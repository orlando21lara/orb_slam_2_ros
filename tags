!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^    HessianBlockType& A() { return _hessian;}$/;"	f	class:g2o::BaseVertex
A	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^    const HessianBlockType& A() const { return _hessian;}$/;"	f	class:g2o::BaseVertex
AT_COMPUTEACTIVERROR	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	/^      AT_COMPUTEACTIVERROR = OptimizableGraph::AT_NUM_ELEMENTS,$/;"	e	enum:g2o::SparseOptimizer::__anon4
AT_NUM_ELEMENTS	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^      AT_NUM_ELEMENTS, \/\/ keep as last element$/;"	e	enum:g2o::OptimizableGraph::ActionType
AT_NUM_ELEMENTS	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	/^      AT_NUM_ELEMENTS, \/\/ keep as last element$/;"	e	enum:g2o::SparseOptimizer::__anon4
AT_POSTITERATION	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^      AT_PREITERATION, AT_POSTITERATION,$/;"	e	enum:g2o::OptimizableGraph::ActionType
AT_PREITERATION	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^      AT_PREITERATION, AT_POSTITERATION,$/;"	e	enum:g2o::OptimizableGraph::ActionType
AbstractHyperGraphElementCreator	orb_slam2/Thirdparty/g2o/g2o/core/creators.h	/^  class  AbstractHyperGraphElementCreator$/;"	c	namespace:g2o
AbstractOptimizationAlgorithmCreator	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.cpp	/^  AbstractOptimizationAlgorithmCreator::AbstractOptimizationAlgorithmCreator(const OptimizationAlgorithmProperty& p) :$/;"	f	class:g2o::AbstractOptimizationAlgorithmCreator
AbstractOptimizationAlgorithmCreator	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.h	/^  class  AbstractOptimizationAlgorithmCreator$/;"	c	namespace:g2o
AbstractRobustKernelCreator	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.h	/^  class  AbstractRobustKernelCreator$/;"	c	namespace:g2o
AcceptKeyFrames	orb_slam2/src/LocalMapping.cc	/^bool LocalMapping::AcceptKeyFrames()$/;"	f	class:ORB_SLAM2::LocalMapping
ActionMap	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^      typedef std::map<std::string, HyperGraphElementAction*> ActionMap;$/;"	t	class:g2o::HyperGraphElementAction
ActionType	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^    enum ActionType {$/;"	g	struct:g2o::OptimizableGraph
ActivateLocalizationMode	orb_slam2/src/System.cc	/^void System::ActivateLocalizationMode()$/;"	f	class:ORB_SLAM2::System
AddChild	orb_slam2/src/KeyFrame.cc	/^void KeyFrame::AddChild(KeyFrame *pKF)$/;"	f	class:ORB_SLAM2::KeyFrame
AddConnection	orb_slam2/src/KeyFrame.cc	/^void KeyFrame::AddConnection(KeyFrame *pKF, const int &weight)$/;"	f	class:ORB_SLAM2::KeyFrame
AddKeyFrame	orb_slam2/src/Map.cc	/^void Map::AddKeyFrame(KeyFrame *pKF)$/;"	f	class:ORB_SLAM2::Map
AddLoopEdge	orb_slam2/src/KeyFrame.cc	/^void KeyFrame::AddLoopEdge(KeyFrame *pKF)$/;"	f	class:ORB_SLAM2::KeyFrame
AddMapPoint	orb_slam2/src/KeyFrame.cc	/^void KeyFrame::AddMapPoint(MapPoint *pMP, const size_t &idx)$/;"	f	class:ORB_SLAM2::KeyFrame
AddMapPoint	orb_slam2/src/Map.cc	/^void Map::AddMapPoint(MapPoint *pMP)$/;"	f	class:ORB_SLAM2::Map
AddObservation	orb_slam2/src/MapPoint.cc	/^void MapPoint::AddObservation(KeyFrame* pKF, size_t idx)$/;"	f	class:ORB_SLAM2::MapPoint
AdjacencyMap	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^      typedef std::tr1::unordered_map<OptimizableGraph::Vertex*, AdjacencyMapEntry, VertexIDHashFunction> AdjacencyMap;$/;"	t	class:g2o::EstimatePropagator
AdjacencyMap	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.h	/^    typedef std::map<HyperGraph::Vertex*, AdjacencyMapEntry> AdjacencyMap;$/;"	t	struct:g2o::HyperDijkstra
AdjacencyMapEntry	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.cpp	/^  EstimatePropagator::AdjacencyMapEntry::AdjacencyMapEntry()$/;"	f	class:g2o::EstimatePropagator::AdjacencyMapEntry
AdjacencyMapEntry	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^      class AdjacencyMapEntry {$/;"	c	class:g2o::EstimatePropagator
AdjacencyMapEntry	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.cpp	/^  HyperDijkstra::AdjacencyMapEntry::AdjacencyMapEntry(HyperGraph::Vertex* child_, HyperGraph::Vertex* parent_, $/;"	f	class:g2o::HyperDijkstra::AdjacencyMapEntry
AdjacencyMapEntry	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.h	/^    struct  AdjacencyMapEntry{$/;"	s	struct:g2o::HyperDijkstra
Affine2D	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Transform<double,2,Eigen::Affine,Eigen::ColMajor>                Affine2D;$/;"	t	namespace:g2o
Affine3D	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Transform<double,3,Eigen::Affine,Eigen::ColMajor>                Affine3D;$/;"	t	namespace:g2o
Aii	orb_slam2/Thirdparty/g2o/g2o/core/matrix_structure.h	/^    int* Aii; \/\/\/< row indices of A, of size nz = Ap [n]$/;"	m	class:g2o::MatrixStructure
Ap	orb_slam2/Thirdparty/g2o/g2o/core/matrix_structure.h	/^    int* Ap;  \/\/\/< column pointers for A, of size n+1$/;"	m	class:g2o::MatrixStructure
AssignFeaturesToGrid	orb_slam2/src/Frame.cc	/^void Frame::AssignFeaturesToGrid()$/;"	f	class:ORB_SLAM2::Frame
BG_BLACK	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	35;"	d
BG_BLUE	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	41;"	d
BG_GREEN	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	37;"	d
BG_LIGHTBLUE	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	39;"	d
BG_MAGENTA	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	40;"	d
BG_RED	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	36;"	d
BG_WHITE	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	42;"	d
BG_YELLOW	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	38;"	d
BHATTACHARYYA	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.h	/^  BHATTACHARYYA,$/;"	e	enum:DBoW2::ScoringType
BINARY	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.h	/^  BINARY$/;"	e	enum:DBoW2::WeightingType
BL	orb_slam2/include/ORBextractor.h	/^    cv::Point2i UL, UR, BL, BR;$/;"	m	class:ORB_SLAM2::ExtractorNode
BOOST_ARCHIVER_H	orb_slam2/include/BoostArchiver.h	12;"	d
BR	orb_slam2/include/ORBextractor.h	/^    cv::Point2i UL, UR, BL, BR;$/;"	m	class:ORB_SLAM2::ExtractorNode
BackupStackType	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^    BackupStackType;$/;"	t	class:g2o::BaseVertex
BaseBinaryEdge	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.h	/^      BaseBinaryEdge() : BaseEdge<D,E>(),$/;"	f	class:g2o::BaseBinaryEdge
BaseBinaryEdge	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.h	/^  class BaseBinaryEdge : public BaseEdge<D, E>$/;"	c	namespace:g2o
BaseClass	orb_slam2/Thirdparty/g2o/g2o/core/parameter_container.h	/^      typedef std::map<int, Parameter*> BaseClass;$/;"	t	class:g2o::ParameterContainer
BaseClass	orb_slam2/Thirdparty/g2o/g2o/stuff/property.h	/^      typedef std::map<std::string, BaseProperty*>        BaseClass;$/;"	t	class:g2o::PropertyMap
BaseEdge	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	/^      BaseEdge() : OptimizableGraph::Edge()$/;"	f	class:g2o::BaseEdge
BaseEdge	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	/^  class BaseEdge : public OptimizableGraph::Edge$/;"	c	namespace:g2o
BaseMultiEdge	orb_slam2/Thirdparty/g2o/g2o/core/base_multi_edge.h	/^      BaseMultiEdge() : BaseEdge<D,E>()$/;"	f	class:g2o::BaseMultiEdge
BaseMultiEdge	orb_slam2/Thirdparty/g2o/g2o/core/base_multi_edge.h	/^  class BaseMultiEdge : public BaseEdge<D,E>$/;"	c	namespace:g2o
BaseProperty	orb_slam2/Thirdparty/g2o/g2o/stuff/property.cpp	/^  BaseProperty::BaseProperty(const std::string name_) :_name(name_){$/;"	f	class:g2o::BaseProperty
BaseProperty	orb_slam2/Thirdparty/g2o/g2o/stuff/property.h	/^  class  BaseProperty {$/;"	c	namespace:g2o
BaseUnaryEdge	orb_slam2/Thirdparty/g2o/g2o/core/base_unary_edge.h	/^      BaseUnaryEdge() : BaseEdge<D,E>(),$/;"	f	class:g2o::BaseUnaryEdge
BaseUnaryEdge	orb_slam2/Thirdparty/g2o/g2o/core/base_unary_edge.h	/^  class BaseUnaryEdge : public BaseEdge<D,E>$/;"	c	namespace:g2o
BaseVertex	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^  class BaseVertex : public OptimizableGraph::Vertex {$/;"	c	namespace:g2o
BaseVertex	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.hpp	/^BaseVertex<D, T>::BaseVertex() :$/;"	f	class:BaseVertex
BatchStatisticsContainer	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	/^  typedef std::vector<G2OBatchStatistics> BatchStatisticsContainer;$/;"	t	namespace:g2o
BlockSolver	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^  class BlockSolver: public BlockSolverBase {$/;"	c	namespace:g2o
BlockSolver	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.hpp	/^BlockSolver<Traits>::BlockSolver(LinearSolverType* linearSolver) :$/;"	f	class:g2o::BlockSolver
BlockSolverBase	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^  class BlockSolverBase : public Solver$/;"	c	namespace:g2o
BlockSolverTraits	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^  struct BlockSolverTraits$/;"	s	namespace:g2o
BlockSolverTraits	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^  struct BlockSolverTraits<Eigen::Dynamic, Eigen::Dynamic>$/;"	s	namespace:g2o
BlockSolverX	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^  typedef BlockSolver< BlockSolverTraits<Eigen::Dynamic, Eigen::Dynamic> > BlockSolverX;$/;"	t	namespace:g2o
BlockSolver_3_2	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^  typedef BlockSolver< BlockSolverTraits<3, 2> > BlockSolver_3_2;$/;"	t	namespace:g2o
BlockSolver_6_3	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^  typedef BlockSolver< BlockSolverTraits<6, 3> > BlockSolver_6_3;  $/;"	t	namespace:g2o
BlockSolver_7_3	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^  typedef BlockSolver< BlockSolverTraits<7, 3> > BlockSolver_7_3;  $/;"	t	namespace:g2o
BoolProperty	orb_slam2/Thirdparty/g2o/g2o/stuff/property.h	/^  typedef Property<bool> BoolProperty;$/;"	t	namespace:g2o
BowVector	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.cpp	/^BowVector::BowVector(void)$/;"	f	class:DBoW2::BowVector
BowVector	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.h	/^class BowVector: $/;"	c	namespace:DBoW2
BundleAdjustment	orb_slam2/src/Optimizer.cc	/^void Optimizer::BundleAdjustment(const vector<KeyFrame *> &vpKFs, const vector<MapPoint *> &vpMP,$/;"	f	class:ORB_SLAM2::Optimizer
CHI_SQUARE	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.h	/^  CHI_SQUARE,$/;"	e	enum:DBoW2::ScoringType
CL_BLACK	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	45;"	d
CL_BLUE	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	51;"	d
CL_GREEN	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	47;"	d
CL_LIGHTBLUE	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	49;"	d
CL_MAGENTA	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	50;"	d
CL_RED	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	46;"	d
CL_WHITE	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	52;"	d
CL_YELLOW	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	48;"	d
CONVERTER_H	orb_slam2/include/Converter.h	22;"	d
CURRENT_TIME	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.h	/^    CURRENT_TIME = 0x1,$/;"	e	enum:DUtils::Timestamp::tOptions
Cache	orb_slam2/Thirdparty/g2o/g2o/core/cache.cpp	/^  Cache::Cache(CacheContainer* container_, const ParameterVector& parameters_) :$/;"	f	class:g2o::Cache
Cache	orb_slam2/Thirdparty/g2o/g2o/core/cache.h	/^  class  Cache: public HyperGraph::HyperGraphElement$/;"	c	namespace:g2o
CacheContainer	orb_slam2/Thirdparty/g2o/g2o/core/cache.cpp	/^  CacheContainer::CacheContainer(OptimizableGraph::Vertex* vertex_) {$/;"	f	class:g2o::CacheContainer
CacheContainer	orb_slam2/Thirdparty/g2o/g2o/core/cache.h	/^  class  CacheContainer: public std::map<Cache::CacheKey, Cache*>$/;"	c	namespace:g2o
CacheKey	orb_slam2/Thirdparty/g2o/g2o/core/cache.cpp	/^  Cache::CacheKey::CacheKey() :$/;"	f	class:g2o::Cache::CacheKey
CacheKey	orb_slam2/Thirdparty/g2o/g2o/core/cache.cpp	/^  Cache::CacheKey::CacheKey(const std::string& type_, const ParameterVector& parameters_) :$/;"	f	class:g2o::Cache::CacheKey
CacheKey	orb_slam2/Thirdparty/g2o/g2o/core/cache.h	/^      class  CacheKey$/;"	c	class:g2o::Cache
ChangeCalibration	orb_slam2/src/Tracking.cc	/^void Tracking::ChangeCalibration(const string &strSettingPath)$/;"	f	class:ORB_SLAM2::Tracking
ChangeParent	orb_slam2/src/KeyFrame.cc	/^void KeyFrame::ChangeParent(KeyFrame *pKF)$/;"	f	class:ORB_SLAM2::KeyFrame
CheckDistEpipolarLine	orb_slam2/src/ORBmatcher.cc	/^bool ORBmatcher::CheckDistEpipolarLine(const cv::KeyPoint &kp1,const cv::KeyPoint &kp2,const cv::Mat &F12,const KeyFrame* pKF2)$/;"	f	class:ORB_SLAM2::ORBmatcher
CheckFinish	orb_slam2/src/LocalMapping.cc	/^bool LocalMapping::CheckFinish()$/;"	f	class:ORB_SLAM2::LocalMapping
CheckFinish	orb_slam2/src/LoopClosing.cc	/^bool LoopClosing::CheckFinish()$/;"	f	class:ORB_SLAM2::LoopClosing
CheckFundamental	orb_slam2/src/Initializer.cc	/^float Initializer::CheckFundamental(const cv::Mat &F21, vector<bool> &vbMatchesInliers, float sigma)$/;"	f	class:ORB_SLAM2::Initializer
CheckHomography	orb_slam2/src/Initializer.cc	/^float Initializer::CheckHomography(const cv::Mat &H21, const cv::Mat &H12, vector<bool> &vbMatchesInliers, float sigma)$/;"	f	class:ORB_SLAM2::Initializer
CheckInliers	orb_slam2/src/PnPsolver.cc	/^void PnPsolver::CheckInliers()$/;"	f	class:ORB_SLAM2::PnPsolver
CheckInliers	orb_slam2/src/Sim3Solver.cc	/^void Sim3Solver::CheckInliers()$/;"	f	class:ORB_SLAM2::Sim3Solver
CheckNewKeyFrames	orb_slam2/src/LocalMapping.cc	/^bool LocalMapping::CheckNewKeyFrames()$/;"	f	class:ORB_SLAM2::LocalMapping
CheckNewKeyFrames	orb_slam2/src/LoopClosing.cc	/^bool LoopClosing::CheckNewKeyFrames()$/;"	f	class:ORB_SLAM2::LoopClosing
CheckRT	orb_slam2/src/Initializer.cc	/^int Initializer::CheckRT(const cv::Mat &R, const cv::Mat &t, const vector<cv::KeyPoint> &vKeys1, const vector<cv::KeyPoint> &vKeys2,$/;"	f	class:ORB_SLAM2::Initializer
CheckReplacedInLastFrame	orb_slam2/src/Tracking.cc	/^void Tracking::CheckReplacedInLastFrame()$/;"	f	class:ORB_SLAM2::Tracking
CholeskyDecomposition	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_eigen.h	/^        CholeskyDecomposition() : Eigen::SimplicialLDLT<SparseMatrix, Eigen::Upper>() {}$/;"	f	class:g2o::LinearSolverEigen::CholeskyDecomposition
CholeskyDecomposition	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_eigen.h	/^    class CholeskyDecomposition : public Eigen::SimplicialLDLT<SparseMatrix, Eigen::Upper>$/;"	c	class:g2o::LinearSolverEigen
CmpPairFirst	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^    struct CmpPairFirst {$/;"	s	namespace:g2o::__anon3
ColSort	orb_slam2/Thirdparty/g2o/g2o/core/matrix_structure.cpp	/^struct ColSort$/;"	s	namespace:g2o	file:
ComputeBoW	orb_slam2/src/Frame.cc	/^void Frame::ComputeBoW()$/;"	f	class:ORB_SLAM2::Frame
ComputeBoW	orb_slam2/src/KeyFrame.cc	/^void KeyFrame::ComputeBoW()$/;"	f	class:ORB_SLAM2::KeyFrame
ComputeCentroid	orb_slam2/src/Sim3Solver.cc	/^void Sim3Solver::ComputeCentroid(cv::Mat &P, cv::Mat &Pr, cv::Mat &C)$/;"	f	class:ORB_SLAM2::Sim3Solver
ComputeDistinctiveDescriptors	orb_slam2/src/MapPoint.cc	/^void MapPoint::ComputeDistinctiveDescriptors()$/;"	f	class:ORB_SLAM2::MapPoint
ComputeF12	orb_slam2/src/LocalMapping.cc	/^cv::Mat LocalMapping::ComputeF12(KeyFrame *&pKF1, KeyFrame *&pKF2)$/;"	f	class:ORB_SLAM2::LocalMapping
ComputeF21	orb_slam2/src/Initializer.cc	/^cv::Mat Initializer::ComputeF21(const vector<cv::Point2f> &vP1,const vector<cv::Point2f> &vP2)$/;"	f	class:ORB_SLAM2::Initializer
ComputeH21	orb_slam2/src/Initializer.cc	/^cv::Mat Initializer::ComputeH21(const vector<cv::Point2f> &vP1, const vector<cv::Point2f> &vP2)$/;"	f	class:ORB_SLAM2::Initializer
ComputeImageBounds	orb_slam2/src/Frame.cc	/^void Frame::ComputeImageBounds(const cv::Mat &imLeft)$/;"	f	class:ORB_SLAM2::Frame
ComputeKeyPointsOctTree	orb_slam2/src/ORBextractor.cc	/^void ORBextractor::ComputeKeyPointsOctTree(vector<vector<KeyPoint> >& allKeypoints)$/;"	f	class:ORB_SLAM2::ORBextractor
ComputeKeyPointsOld	orb_slam2/src/ORBextractor.cc	/^void ORBextractor::ComputeKeyPointsOld(std::vector<std::vector<KeyPoint> > &allKeypoints)$/;"	f	class:ORB_SLAM2::ORBextractor
ComputePyramid	orb_slam2/src/ORBextractor.cc	/^void ORBextractor::ComputePyramid(cv::Mat image)$/;"	f	class:ORB_SLAM2::ORBextractor
ComputeSceneMedianDepth	orb_slam2/src/KeyFrame.cc	/^float KeyFrame::ComputeSceneMedianDepth(const int q)$/;"	f	class:ORB_SLAM2::KeyFrame
ComputeSim3	orb_slam2/src/LoopClosing.cc	/^bool LoopClosing::ComputeSim3()$/;"	f	class:ORB_SLAM2::LoopClosing
ComputeSim3	orb_slam2/src/Sim3Solver.cc	/^void Sim3Solver::ComputeSim3(cv::Mat &P1, cv::Mat &P2)$/;"	f	class:ORB_SLAM2::Sim3Solver
ComputeStereoFromRGBD	orb_slam2/src/Frame.cc	/^void Frame::ComputeStereoFromRGBD(const cv::Mat &imDepth)$/;"	f	class:ORB_SLAM2::Frame
ComputeStereoMatches	orb_slam2/src/Frame.cc	/^void Frame::ComputeStereoMatches()$/;"	f	class:ORB_SLAM2::Frame
ComputeThreeMaxima	orb_slam2/src/ORBmatcher.cc	/^void ORBmatcher::ComputeThreeMaxima(vector<int>* histo, const int L, int &ind1, int &ind2, int &ind3)$/;"	f	class:ORB_SLAM2::ORBmatcher
ConsistentGroup	orb_slam2/include/LoopClosing.h	/^    typedef pair<set<KeyFrame*>,int> ConsistentGroup;    $/;"	t	class:ORB_SLAM2::LoopClosing
Converter	orb_slam2/include/Converter.h	/^class Converter$/;"	c	namespace:ORB_SLAM2
CorrectLoop	orb_slam2/src/LoopClosing.cc	/^void LoopClosing::CorrectLoop()$/;"	f	class:ORB_SLAM2::LoopClosing
CostFunction	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.h	/^    struct  CostFunction {$/;"	s	struct:g2o::HyperDijkstra
CreateInitialMapMonocular	orb_slam2/src/Tracking.cc	/^void Tracking::CreateInitialMapMonocular()$/;"	f	class:ORB_SLAM2::Tracking
CreateNewKeyFrame	orb_slam2/src/Tracking.cc	/^void Tracking::CreateNewKeyFrame()$/;"	f	class:ORB_SLAM2::Tracking
CreateNewMapPoints	orb_slam2/src/LocalMapping.cc	/^void LocalMapping::CreateNewMapPoints()$/;"	f	class:ORB_SLAM2::LocalMapping
CreatorInformation	orb_slam2/Thirdparty/g2o/g2o/core/factory.h	/^          CreatorInformation()$/;"	f	class:g2o::Factory::CreatorInformation
CreatorInformation	orb_slam2/Thirdparty/g2o/g2o/core/factory.h	/^      class CreatorInformation$/;"	c	class:g2o::Factory
CreatorList	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.h	/^      typedef std::list<AbstractOptimizationAlgorithmCreator*>      CreatorList;$/;"	t	class:g2o::OptimizationAlgorithmFactory
CreatorMap	orb_slam2/Thirdparty/g2o/g2o/core/factory.h	/^      typedef std::map<std::string, CreatorInformation*>               CreatorMap;$/;"	t	class:g2o::Factory
CreatorMap	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.h	/^      typedef std::map<std::string, AbstractRobustKernelCreator*>              CreatorMap;$/;"	t	class:g2o::RobustKernelFactory
Cw	orb_slam2/include/KeyFrame.h	/^    cv::Mat Cw; \/\/ Stereo middel point. Only for visualization$/;"	m	class:ORB_SLAM2::KeyFrame
DBoW2	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.cpp	/^namespace DBoW2 {$/;"	n	file:
DBoW2	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.h	/^namespace DBoW2 {$/;"	n
DBoW2	orb_slam2/Thirdparty/DBoW2/DBoW2/FClass.h	/^namespace DBoW2 {$/;"	n
DBoW2	orb_slam2/Thirdparty/DBoW2/DBoW2/FORB.cpp	/^namespace DBoW2 {$/;"	n	file:
DBoW2	orb_slam2/Thirdparty/DBoW2/DBoW2/FORB.h	/^namespace DBoW2 {$/;"	n
DBoW2	orb_slam2/Thirdparty/DBoW2/DBoW2/FeatureVector.cpp	/^namespace DBoW2 {$/;"	n	file:
DBoW2	orb_slam2/Thirdparty/DBoW2/DBoW2/FeatureVector.h	/^namespace DBoW2 {$/;"	n
DBoW2	orb_slam2/Thirdparty/DBoW2/DBoW2/ScoringObject.h	/^namespace DBoW2 {$/;"	n
DBoW2	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^namespace DBoW2 {$/;"	n
DEG2RAD	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	31;"	d
DELTA_EPOCH_IN_MICROSECS	orb_slam2/Thirdparty/g2o/g2o/stuff/timeutil.cpp	43;"	d	file:
DOT_PRODUCT	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.h	/^  DOT_PRODUCT,$/;"	e	enum:DBoW2::ScoringType
DO_EVERY	orb_slam2/Thirdparty/g2o/g2o/stuff/timeutil.h	65;"	d
DO_EVERY_TS	orb_slam2/Thirdparty/g2o/g2o/stuff/timeutil.h	49;"	d
DUtils	orb_slam2/Thirdparty/DBoW2/DUtils/Random.h	/^namespace DUtils {$/;"	n
DUtils	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.h	/^namespace DUtils {$/;"	n
Data	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::Data::Data(){$/;"	f	class:g2o::OptimizableGraph::Data
Data	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^    class  Data : public HyperGraph::HyperGraphElement$/;"	c	struct:g2o::OptimizableGraph
DeactivateLocalizationMode	orb_slam2/src/System.cc	/^void System::DeactivateLocalizationMode()$/;"	f	class:ORB_SLAM2::System
DecomposeE	orb_slam2/src/Initializer.cc	/^void Initializer::DecomposeE(const cv::Mat &E, cv::Mat &R1, cv::Mat &R2, cv::Mat &t)$/;"	f	class:ORB_SLAM2::Initializer
DescriptorDistance	orb_slam2/src/ORBmatcher.cc	/^int ORBmatcher::DescriptorDistance(const cv::Mat &a, const cv::Mat &b)$/;"	f	class:ORB_SLAM2::ORBmatcher
DetectLoop	orb_slam2/src/LoopClosing.cc	/^bool LoopClosing::DetectLoop()$/;"	f	class:ORB_SLAM2::LoopClosing
DetectLoopCandidates	orb_slam2/src/KeyFrameDatabase.cc	/^vector<KeyFrame*> KeyFrameDatabase::DetectLoopCandidates(KeyFrame* pKF, float minScore)$/;"	f	class:ORB_SLAM2::KeyFrameDatabase
DetectRelocalizationCandidates	orb_slam2/src/KeyFrameDatabase.cc	/^vector<KeyFrame*> KeyFrameDatabase::DetectRelocalizationCandidates(Frame *F)$/;"	f	class:ORB_SLAM2::KeyFrameDatabase
Di	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.h	/^      static const int Di = VertexXiType::Dimension;$/;"	m	class:g2o::BaseBinaryEdge
DiagonalVector	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_diagonal.h	/^      typedef std::vector<MatrixType, Eigen::aligned_allocator<MatrixType> >      DiagonalVector;$/;"	t	class:g2o::SparseBlockMatrixDiagonal
Dimension	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.h	/^      static const int Dimension = BaseEdge<D, E>::Dimension;$/;"	m	class:g2o::BaseBinaryEdge
Dimension	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	/^      static const int Dimension = D;$/;"	m	class:g2o::BaseEdge
Dimension	orb_slam2/Thirdparty/g2o/g2o/core/base_multi_edge.h	/^      static const int Dimension = BaseEdge<D,E>::Dimension;$/;"	m	class:g2o::BaseMultiEdge
Dimension	orb_slam2/Thirdparty/g2o/g2o/core/base_unary_edge.h	/^      static const int Dimension = BaseEdge<D, E>::Dimension;$/;"	m	class:g2o::BaseUnaryEdge
Dimension	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^    static const int Dimension = D;           \/\/\/< dimension of the estimate (minimal) in the manifold space$/;"	m	class:g2o::BaseVertex
DistributeOctTree	orb_slam2/src/ORBextractor.cc	/^vector<cv::KeyPoint> ORBextractor::DistributeOctTree(const vector<cv::KeyPoint>& vToDistributeKeys, const int &minX,$/;"	f	class:ORB_SLAM2::ORBextractor
DivideNode	orb_slam2/src/ORBextractor.cc	/^void ExtractorNode::DivideNode(ExtractorNode &n1, ExtractorNode &n2, ExtractorNode &n3, ExtractorNode &n4)$/;"	f	class:ORB_SLAM2::ExtractorNode
Dj	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.h	/^      static const int Dj = VertexXjType::Dimension;$/;"	m	class:g2o::BaseBinaryEdge
DoubleProperty	orb_slam2/Thirdparty/g2o/g2o/stuff/property.h	/^  typedef Property<double> DoubleProperty;$/;"	t	namespace:g2o
DrawAction	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  DrawAction::DrawAction(const std::string& typeName_) $/;"	f	class:g2o::DrawAction
DrawAction	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^  class  DrawAction : public HyperGraphElementAction{$/;"	c	namespace:g2o
DrawCurrentFrame	orb_slam2/src/System.cc	/^cv::Mat System::DrawCurrentFrame () {$/;"	f	class:ORB_SLAM2::System
DrawFrame	orb_slam2/src/FrameDrawer.cc	/^cv::Mat FrameDrawer::DrawFrame()$/;"	f	class:ORB_SLAM2::FrameDrawer
DrawTextInfo	orb_slam2/src/FrameDrawer.cc	/^void FrameDrawer::DrawTextInfo(cv::Mat &im, int nState, cv::Mat &imText)$/;"	f	class:ORB_SLAM2::FrameDrawer
EDGE_THRESHOLD	orb_slam2/src/ORBextractor.cc	/^const int EDGE_THRESHOLD = 19;$/;"	m	namespace:ORB_SLAM2	file:
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::SE3Quat
Edge	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.cpp	/^  HyperGraph::Edge::Edge(int id) : _id(id)$/;"	f	class:g2o::HyperGraph::Edge
Edge	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^      class  Edge : public HyperGraphElement {$/;"	c	class:g2o::HyperGraph
Edge	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::Edge::Edge() :$/;"	f	class:g2o::OptimizableGraph::Edge
Edge	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^    class  Edge: public HyperGraph::Edge {$/;"	c	struct:g2o::OptimizableGraph
EdgeContainer	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^    typedef std::vector<OptimizableGraph::Edge*>        EdgeContainer;$/;"	t	struct:g2o::OptimizableGraph
EdgeIDCompare	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^    struct  EdgeIDCompare {$/;"	s	struct:g2o::OptimizableGraph
EdgeInverseSim3ProjectXYZ	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.cpp	/^  EdgeInverseSim3ProjectXYZ::EdgeInverseSim3ProjectXYZ() :$/;"	f	class:g2o::EdgeInverseSim3ProjectXYZ
EdgeInverseSim3ProjectXYZ	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.h	/^class EdgeInverseSim3ProjectXYZ : public  BaseBinaryEdge<2, Vector2d,  VertexSBAPointXYZ, VertexSim3Expmap>$/;"	c	namespace:g2o
EdgeSE3ProjectXYZ	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.cpp	/^EdgeSE3ProjectXYZ::EdgeSE3ProjectXYZ() : BaseBinaryEdge<2, Vector2d, VertexSBAPointXYZ, VertexSE3Expmap>() {$/;"	f	class:g2o::EdgeSE3ProjectXYZ
EdgeSE3ProjectXYZ	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^class  EdgeSE3ProjectXYZ: public  BaseBinaryEdge<2, Vector2d, VertexSBAPointXYZ, VertexSE3Expmap>{$/;"	c	namespace:g2o
EdgeSE3ProjectXYZOnlyPose	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  EdgeSE3ProjectXYZOnlyPose(){}$/;"	f	class:g2o::EdgeSE3ProjectXYZOnlyPose
EdgeSE3ProjectXYZOnlyPose	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^class  EdgeSE3ProjectXYZOnlyPose: public  BaseUnaryEdge<2, Vector2d, VertexSE3Expmap>{$/;"	c	namespace:g2o
EdgeSet	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^      typedef std::set<Edge*>                           EdgeSet;$/;"	t	class:g2o::HyperGraph
EdgeSim3	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.cpp	/^  EdgeSim3::EdgeSim3() :$/;"	f	class:g2o::EdgeSim3
EdgeSim3	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.h	/^  class EdgeSim3 : public BaseBinaryEdge<7, Sim3, VertexSim3Expmap, VertexSim3Expmap>$/;"	c	namespace:g2o
EdgeSim3ProjectXYZ	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.cpp	/^  EdgeSim3ProjectXYZ::EdgeSim3ProjectXYZ() :$/;"	f	class:g2o::EdgeSim3ProjectXYZ
EdgeSim3ProjectXYZ	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.h	/^class EdgeSim3ProjectXYZ : public  BaseBinaryEdge<2, Vector2d,  VertexSBAPointXYZ, VertexSim3Expmap>$/;"	c	namespace:g2o
EdgeStereoSE3ProjectXYZ	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.cpp	/^EdgeStereoSE3ProjectXYZ::EdgeStereoSE3ProjectXYZ() : BaseBinaryEdge<3, Vector3d, VertexSBAPointXYZ, VertexSE3Expmap>() {$/;"	f	class:g2o::EdgeStereoSE3ProjectXYZ
EdgeStereoSE3ProjectXYZ	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^class  EdgeStereoSE3ProjectXYZ: public  BaseBinaryEdge<3, Vector3d, VertexSBAPointXYZ, VertexSE3Expmap>{$/;"	c	namespace:g2o
EdgeStereoSE3ProjectXYZOnlyPose	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  EdgeStereoSE3ProjectXYZOnlyPose(){}$/;"	f	class:g2o::EdgeStereoSE3ProjectXYZOnlyPose
EdgeStereoSE3ProjectXYZOnlyPose	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^class  EdgeStereoSE3ProjectXYZOnlyPose: public  BaseUnaryEdge<3, Vector3d, VertexSE3Expmap>{$/;"	c	namespace:g2o
EnableLocalizationOnly	orb_slam2/src/System.cc	/^void System::EnableLocalizationOnly (bool localize_only) {$/;"	f	class:ORB_SLAM2::System
EraseChild	orb_slam2/src/KeyFrame.cc	/^void KeyFrame::EraseChild(KeyFrame *pKF)$/;"	f	class:ORB_SLAM2::KeyFrame
EraseConnection	orb_slam2/src/KeyFrame.cc	/^void KeyFrame::EraseConnection(KeyFrame* pKF)$/;"	f	class:ORB_SLAM2::KeyFrame
EraseKeyFrame	orb_slam2/src/Map.cc	/^void Map::EraseKeyFrame(KeyFrame *pKF)$/;"	f	class:ORB_SLAM2::Map
EraseMapPoint	orb_slam2/src/Map.cc	/^void Map::EraseMapPoint(MapPoint *pMP)$/;"	f	class:ORB_SLAM2::Map
EraseMapPointMatch	orb_slam2/src/KeyFrame.cc	/^void KeyFrame::EraseMapPointMatch(MapPoint* pMP)$/;"	f	class:ORB_SLAM2::KeyFrame
EraseMapPointMatch	orb_slam2/src/KeyFrame.cc	/^void KeyFrame::EraseMapPointMatch(const size_t &idx)$/;"	f	class:ORB_SLAM2::KeyFrame
EraseObservation	orb_slam2/src/MapPoint.cc	/^void MapPoint::EraseObservation(KeyFrame* pKF)$/;"	f	class:ORB_SLAM2::MapPoint
ErrorVector	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.h	/^      typedef typename BaseEdge<D,E>::ErrorVector ErrorVector;$/;"	t	class:g2o::BaseBinaryEdge
ErrorVector	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	/^      typedef Matrix<double, D, 1> ErrorVector;$/;"	t	class:g2o::BaseEdge
ErrorVector	orb_slam2/Thirdparty/g2o/g2o/core/base_multi_edge.h	/^      typedef typename BaseEdge<D,E>::ErrorVector ErrorVector;$/;"	t	class:g2o::BaseMultiEdge
ErrorVector	orb_slam2/Thirdparty/g2o/g2o/core/base_unary_edge.h	/^      typedef typename BaseEdge<D,E>::ErrorVector ErrorVector;$/;"	t	class:g2o::BaseUnaryEdge
EstimatePropagator	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.cpp	/^  EstimatePropagator::EstimatePropagator(OptimizableGraph* g): _graph(g)$/;"	f	class:g2o::EstimatePropagator
EstimatePropagator	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^  class  EstimatePropagator {$/;"	c	namespace:g2o
EstimatePropagatorCost	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.cpp	/^  EstimatePropagatorCost::EstimatePropagatorCost (SparseOptimizer* graph) :$/;"	f	class:g2o::EstimatePropagatorCost
EstimatePropagatorCost	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^  class  EstimatePropagatorCost {$/;"	c	namespace:g2o
EstimatePropagatorCostOdometry	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.cpp	/^  EstimatePropagatorCostOdometry::EstimatePropagatorCostOdometry(SparseOptimizer* graph) :$/;"	f	class:g2o::EstimatePropagatorCostOdometry
EstimatePropagatorCostOdometry	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^  class  EstimatePropagatorCostOdometry : public EstimatePropagatorCost {$/;"	c	namespace:g2o
EstimateType	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^    typedef T EstimateType;$/;"	t	class:g2o::BaseVertex
ExtractORB	orb_slam2/src/Frame.cc	/^void Frame::ExtractORB(int flag, const cv::Mat &im)$/;"	f	class:ORB_SLAM2::Frame
ExtractorNode	orb_slam2/include/ORBextractor.h	/^    ExtractorNode():bNoMore(false){}$/;"	f	class:ORB_SLAM2::ExtractorNode
ExtractorNode	orb_slam2/include/ORBextractor.h	/^class ExtractorNode$/;"	c	namespace:ORB_SLAM2
FAST_SCORE	orb_slam2/include/ORBextractor.h	/^    enum {HARRIS_SCORE=0, FAST_SCORE=1 };$/;"	e	enum:ORB_SLAM2::ORBextractor::__anon1
FClass	orb_slam2/Thirdparty/DBoW2/DBoW2/FClass.h	/^class FClass$/;"	c	namespace:DBoW2
FG_BLACK	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	54;"	d
FG_BLUE	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	60;"	d
FG_GREEN	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	56;"	d
FG_LIGHTBLUE	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	58;"	d
FG_MAGENTA	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	59;"	d
FG_NORM	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	63;"	d
FG_RED	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	55;"	d
FG_WHITE	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	61;"	d
FG_YELLOW	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	57;"	d
FIXED	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	128;"	d
FORB	orb_slam2/Thirdparty/DBoW2/DBoW2/FORB.h	/^class FORB: protected FClass$/;"	c	namespace:DBoW2
FRAMEDRAWER_H	orb_slam2/include/FrameDrawer.h	22;"	d
FRAME_GRID_COLS	orb_slam2/include/Frame.h	38;"	d
FRAME_GRID_ROWS	orb_slam2/include/Frame.h	37;"	d
FRAME_H	orb_slam2/include/Frame.h	22;"	d
FT_BOLD	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	31;"	d
FT_UNDERLINE	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	32;"	d
Factory	orb_slam2/Thirdparty/g2o/g2o/core/factory.cpp	/^Factory::Factory()$/;"	f	class:g2o::Factory
Factory	orb_slam2/Thirdparty/g2o/g2o/core/factory.h	/^  class  Factory$/;"	c	namespace:g2o
Fail	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm.h	/^      enum  SolverResult {Terminate=2, OK=1, Fail=-1};$/;"	e	enum:g2o::OptimizationAlgorithm::SolverResult
FeatureVector	orb_slam2/Thirdparty/DBoW2/DBoW2/FeatureVector.cpp	/^FeatureVector::FeatureVector(void)$/;"	f	class:DBoW2::FeatureVector
FeatureVector	orb_slam2/Thirdparty/DBoW2/DBoW2/FeatureVector.h	/^class FeatureVector: $/;"	c	namespace:DBoW2
FindFundamental	orb_slam2/src/Initializer.cc	/^void Initializer::FindFundamental(vector<bool> &vbMatchesInliers, float &score, cv::Mat &F21)$/;"	f	class:ORB_SLAM2::Initializer
FindHomography	orb_slam2/src/Initializer.cc	/^void Initializer::FindHomography(vector<bool> &vbMatchesInliers, float &score, cv::Mat &H21)$/;"	f	class:ORB_SLAM2::Initializer
FloatProperty	orb_slam2/Thirdparty/g2o/g2o/stuff/property.h	/^  typedef Property<float> FloatProperty;$/;"	t	namespace:g2o
ForceLinkFunction	orb_slam2/Thirdparty/g2o/g2o/stuff/misc.h	/^    typedef void (* ForceLinkFunction) (void);$/;"	t
ForceLinker	orb_slam2/Thirdparty/g2o/g2o/stuff/misc.h	/^    ForceLinker(ForceLinkFunction function) { (function)(); }$/;"	f	struct:g2o::ForceLinker
ForceLinker	orb_slam2/Thirdparty/g2o/g2o/stuff/misc.h	/^struct ForceLinker$/;"	s	namespace:g2o
Format	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.cpp	/^string Timestamp::Format(bool machine_friendly) const $/;"	f	class:Timestamp
Format	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.cpp	/^string Timestamp::Format(double s) {$/;"	f	class:Timestamp
Frame	orb_slam2/include/Frame.h	/^class Frame$/;"	c	namespace:ORB_SLAM2
Frame	orb_slam2/src/Frame.cc	/^Frame::Frame()$/;"	f	class:ORB_SLAM2::Frame
Frame	orb_slam2/src/Frame.cc	/^Frame::Frame(const Frame &frame)$/;"	f	class:ORB_SLAM2::Frame
Frame	orb_slam2/src/Frame.cc	/^Frame::Frame(const cv::Mat &imGray, const cv::Mat &imDepth, const double &timeStamp, ORBextractor* extractor,ORBVocabulary* voc, cv::Mat &K, cv::Mat &distCoef, const float &bf, const float &thDepth)$/;"	f	class:ORB_SLAM2::Frame
Frame	orb_slam2/src/Frame.cc	/^Frame::Frame(const cv::Mat &imGray, const double &timeStamp, ORBextractor* extractor,ORBVocabulary* voc, cv::Mat &K, cv::Mat &distCoef, const float &bf, const float &thDepth)$/;"	f	class:ORB_SLAM2::Frame
Frame	orb_slam2/src/Frame.cc	/^Frame::Frame(const cv::Mat &imLeft, const cv::Mat &imRight, const double &timeStamp, ORBextractor* extractorLeft, ORBextractor* extractorRight, ORBVocabulary* voc, cv::Mat &K, cv::Mat &distCoef, const float &bf, const float &thDepth)$/;"	f	class:ORB_SLAM2::Frame
FrameDrawer	orb_slam2/include/FrameDrawer.h	/^class FrameDrawer$/;"	c	namespace:ORB_SLAM2
FrameDrawer	orb_slam2/src/FrameDrawer.cc	/^FrameDrawer::FrameDrawer(Map* pMap):mpMap(pMap)$/;"	f	class:ORB_SLAM2::FrameDrawer
FromCameraToImage	orb_slam2/src/Sim3Solver.cc	/^void Sim3Solver::FromCameraToImage(const vector<cv::Mat> &vP3Dc, vector<cv::Mat> &vP2D, cv::Mat K)$/;"	f	class:ORB_SLAM2::Sim3Solver
FrontierLevelCmp	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.cpp	/^  struct FrontierLevelCmp {$/;"	s	namespace:g2o	file:
Fuse	orb_slam2/src/ORBmatcher.cc	/^int ORBmatcher::Fuse(KeyFrame *pKF, const vector<MapPoint *> &vpMapPoints, const float th)$/;"	f	class:ORB_SLAM2::ORBmatcher
Fuse	orb_slam2/src/ORBmatcher.cc	/^int ORBmatcher::Fuse(KeyFrame *pKF, cv::Mat Scw, const vector<MapPoint *> &vpPoints, float th, vector<MapPoint *> &vpReplacePoint)$/;"	f	class:ORB_SLAM2::ORBmatcher
G2OBatchStatistics	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.cpp	/^  G2OBatchStatistics::G2OBatchStatistics(){$/;"	f	class:g2o::G2OBatchStatistics
G2OBatchStatistics	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	/^  struct  G2OBatchStatistics {$/;"	s	namespace:g2o
G2O_AIS_GENERAL_DIJKSTRA_HH	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.h	28;"	d
G2O_AIS_HYPER_GRAPH_HH	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	28;"	d
G2O_AIS_OPTIMIZABLE_GRAPH_HH_	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	28;"	d
G2O_ATTRIBUTE_CONSTRUCTOR	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	40;"	d
G2O_ATTRIBUTE_CONSTRUCTOR	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	74;"	d
G2O_ATTRIBUTE_CONSTRUCTOR	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	97;"	d
G2O_ATTRIBUTE_DEPRECATED	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	/^    G2O_ATTRIBUTE_DEPRECATED(void linearizeSystem())$/;"	f	class:g2o::SparseOptimizer
G2O_ATTRIBUTE_DEPRECATED	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	102;"	d
G2O_ATTRIBUTE_DEPRECATED	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	48;"	d
G2O_ATTRIBUTE_DEPRECATED	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	84;"	d
G2O_ATTRIBUTE_FORMAT12	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	45;"	d
G2O_ATTRIBUTE_FORMAT12	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	81;"	d
G2O_ATTRIBUTE_FORMAT12	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	99;"	d
G2O_ATTRIBUTE_FORMAT12	orb_slam2/Thirdparty/g2o/g2o/stuff/string_tools.h	/^ std::string formatString(const char* fmt, ...) G2O_ATTRIBUTE_FORMAT12;$/;"	m	namespace:g2o
G2O_ATTRIBUTE_FORMAT23	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	100;"	d
G2O_ATTRIBUTE_FORMAT23	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	46;"	d
G2O_ATTRIBUTE_FORMAT23	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	82;"	d
G2O_ATTRIBUTE_FORMAT23	orb_slam2/Thirdparty/g2o/g2o/stuff/string_tools.h	/^ int strPrintf(std::string& str, const char* fmt, ...) G2O_ATTRIBUTE_FORMAT23;$/;"	m	namespace:g2o
G2O_ATTRIBUTE_UNUSED	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	44;"	d
G2O_ATTRIBUTE_UNUSED	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	80;"	d
G2O_ATTRIBUTE_UNUSED	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	98;"	d
G2O_ATTRIBUTE_WARNING	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	101;"	d
G2O_ATTRIBUTE_WARNING	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	47;"	d
G2O_ATTRIBUTE_WARNING	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	83;"	d
G2O_BASE_BINARY_EDGE_H	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.h	28;"	d
G2O_BASE_EDGE_H	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	28;"	d
G2O_BASE_MULTI_EDGE_H	orb_slam2/Thirdparty/g2o/g2o/core/base_multi_edge.h	28;"	d
G2O_BASE_UNARY_EDGE_H	orb_slam2/Thirdparty/g2o/g2o/core/base_unary_edge.h	28;"	d
G2O_BASE_VERTEX_H	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	28;"	d
G2O_BATCH_STATS_H_	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	28;"	d
G2O_BLOCK_SOLVER_H	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	28;"	d
G2O_CACHE_HH_	orb_slam2/Thirdparty/g2o/g2o/core/cache.h	28;"	d
G2O_COLOR_MACROS_H	orb_slam2/Thirdparty/g2o/g2o/stuff/color_macros.h	28;"	d
G2O_CONFIG_H	orb_slam2/Thirdparty/g2o/config.h	2;"	d
G2O_CORE_MATRIX_OPERATIONS_H	orb_slam2/Thirdparty/g2o/g2o/core/matrix_operations.h	28;"	d
G2O_CREATORS_H	orb_slam2/Thirdparty/g2o/g2o/core/creators.h	28;"	d
G2O_EIGEN_TYPES_H	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	28;"	d
G2O_ESTIMATE_PROPAGATOR_H	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	28;"	d
G2O_FACTORY_EXPORT	orb_slam2/Thirdparty/g2o/g2o/core/factory.h	155;"	d
G2O_FACTORY_EXPORT	orb_slam2/Thirdparty/g2o/g2o/core/factory.h	158;"	d
G2O_FACTORY_H	orb_slam2/Thirdparty/g2o/g2o/core/factory.h	28;"	d
G2O_FACTORY_IMPORT	orb_slam2/Thirdparty/g2o/g2o/core/factory.h	156;"	d
G2O_FACTORY_IMPORT	orb_slam2/Thirdparty/g2o/g2o/core/factory.h	159;"	d
G2O_FSKIP_LINE	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	114;"	d
G2O_GRAPH_OPTIMIZER_CHOL_H_	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	28;"	d
G2O_GRAPH_PARAMETER_CONTAINER_HH_	orb_slam2/Thirdparty/g2o/g2o/core/parameter_container.h	28;"	d
G2O_GRAPH_PARAMETER_HH_	orb_slam2/Thirdparty/g2o/g2o/core/parameter.h	28;"	d
G2O_HYPER_GRAPH_ACTION_H	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	28;"	d
G2O_LINEAR_SOLVER_DENSE_H	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_dense.h	29;"	d
G2O_LINEAR_SOLVER_EIGEN_H	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_eigen.h	28;"	d
G2O_LINEAR_SOLVER_H	orb_slam2/Thirdparty/g2o/g2o/core/linear_solver.h	28;"	d
G2O_MACROS_H	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	28;"	d
G2O_MARGINAL_COVARIANCE_CHOLESKY_H	orb_slam2/Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.h	28;"	d
G2O_MATH_STUFF	orb_slam2/Thirdparty/g2o/g2o/types/se3_ops.h	28;"	d
G2O_MATRIX_STRUCTURE_H	orb_slam2/Thirdparty/g2o/g2o/core/matrix_structure.h	28;"	d
G2O_OAF_EXPORT	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.h	145;"	d
G2O_OAF_IMPORT	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.h	146;"	d
G2O_OPENMP_MUTEX	orb_slam2/Thirdparty/g2o/g2o/core/openmp_mutex.h	28;"	d
G2O_OPTIMIZATION_ALGORITHM_DOGLEG_H	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.h	28;"	d
G2O_OPTIMIZATION_ALGORITHM_GAUSS_NEWTON_H	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_gauss_newton.h	28;"	d
G2O_OPTIMIZATION_ALGORITHM_H	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm.h	28;"	d
G2O_OPTIMIZATION_ALGORITHM_PROPERTY_H	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_property.h	28;"	d
G2O_OPTIMIZATION_ALGORITHM_WITH_HESSIAN_H	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_with_hessian.h	28;"	d
G2O_OPTMIZATION_ALGORITHM_PROPERTY_H	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.h	28;"	d
G2O_OS_SPECIFIC_HH_	orb_slam2/Thirdparty/g2o/g2o/stuff/os_specific.h	28;"	d
G2O_PROPERTY_H_	orb_slam2/Thirdparty/g2o/g2o/stuff/property.h	28;"	d
G2O_REGISTER_ACTION	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	217;"	d
G2O_REGISTER_OPTIMIZATION_ALGORITHM	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.h	159;"	d
G2O_REGISTER_OPTIMIZATION_LIBRARY	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.h	152;"	d
G2O_REGISTER_ROBUST_KERNEL	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.h	141;"	d
G2O_REGISTER_TYPE	orb_slam2/Thirdparty/g2o/g2o/core/factory.h	163;"	d
G2O_REGISTER_TYPE_GROUP	orb_slam2/Thirdparty/g2o/g2o/core/factory.h	171;"	d
G2O_ROBUST_KERNEL_FACTORY_EXPORT	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.h	133;"	d
G2O_ROBUST_KERNEL_FACTORY_EXPORT	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.h	136;"	d
G2O_ROBUST_KERNEL_FACTORY_H	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.h	28;"	d
G2O_ROBUST_KERNEL_FACTORY_IMPORT	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.h	134;"	d
G2O_ROBUST_KERNEL_FACTORY_IMPORT	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.h	137;"	d
G2O_ROBUST_KERNEL_H	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel.h	28;"	d
G2O_ROBUST_KERNEL_IMPL_H	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.h	28;"	d
G2O_SBA_TYPES	orb_slam2/Thirdparty/g2o/g2o/types/types_sba.h	28;"	d
G2O_SE3QUAT_H_	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	28;"	d
G2O_SEVEN_DOF_EXPMAP_TYPES	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.h	32;"	d
G2O_SIM_3	orb_slam2/Thirdparty/g2o/g2o/types/sim3.h	28;"	d
G2O_SIX_DOF_TYPES_EXPMAP	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	35;"	d
G2O_SOLVER_H	orb_slam2/Thirdparty/g2o/g2o/core/solver.h	28;"	d
G2O_SOLVER_LEVENBERG_H	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.h	28;"	d
G2O_SPARSE_BLOCK_MATRIX_	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.h	28;"	d
G2O_SPARSE_BLOCK_MATRIX_CCS_H	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	28;"	d
G2O_SPARSE_BLOCK_MATRIX_DIAGONAL_H	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_diagonal.h	28;"	d
G2O_STRING_TOOLS_H	orb_slam2/Thirdparty/g2o/g2o/stuff/string_tools.h	28;"	d
G2O_STUFF_MISC_H	orb_slam2/Thirdparty/g2o/g2o/stuff/misc.h	28;"	d
G2O_TIMEUTIL_H	orb_slam2/Thirdparty/g2o/g2o/stuff/timeutil.h	28;"	d
G2O_USE_OPTIMIZATION_ALGORITHM	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.h	163;"	d
G2O_USE_OPTIMIZATION_LIBRARY	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.h	155;"	d
G2O_USE_ROBUST_KERNEL	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.h	145;"	d
G2O_USE_TYPE_BY_CLASS_NAME	orb_slam2/Thirdparty/g2o/g2o/core/factory.h	167;"	d
G2O_USE_TYPE_GROUP	orb_slam2/Thirdparty/g2o/g2o/core/factory.h	174;"	d
GET_VALUE	orb_slam2/src/ORBextractor.cc	118;"	d	file:
GET_VALUE	orb_slam2/src/ORBextractor.cc	146;"	d	file:
GeneralScoring	orb_slam2/Thirdparty/DBoW2/DBoW2/ScoringObject.h	/^class GeneralScoring$/;"	c	namespace:DBoW2
GetAllKeyFrames	orb_slam2/src/Map.cc	/^vector<KeyFrame*> Map::GetAllKeyFrames()$/;"	f	class:ORB_SLAM2::Map
GetAllMapPoints	orb_slam2/src/Map.cc	/^vector<MapPoint*> Map::GetAllMapPoints()$/;"	f	class:ORB_SLAM2::Map
GetAllMapPoints	orb_slam2/src/System.cc	/^std::vector<MapPoint*> System::GetAllMapPoints() {$/;"	f	class:ORB_SLAM2::System
GetBestCovisibilityKeyFrames	orb_slam2/src/KeyFrame.cc	/^vector<KeyFrame*> KeyFrame::GetBestCovisibilityKeyFrames(const int &N)$/;"	f	class:ORB_SLAM2::KeyFrame
GetCameraCenter	orb_slam2/include/Frame.h	/^    inline cv::Mat GetCameraCenter(){$/;"	f	class:ORB_SLAM2::Frame
GetCameraCenter	orb_slam2/src/KeyFrame.cc	/^cv::Mat KeyFrame::GetCameraCenter()$/;"	f	class:ORB_SLAM2::KeyFrame
GetChilds	orb_slam2/src/KeyFrame.cc	/^set<KeyFrame*> KeyFrame::GetChilds()$/;"	f	class:ORB_SLAM2::KeyFrame
GetConnectedKeyFrames	orb_slam2/src/KeyFrame.cc	/^set<KeyFrame*> KeyFrame::GetConnectedKeyFrames()$/;"	f	class:ORB_SLAM2::KeyFrame
GetCovisiblesByWeight	orb_slam2/src/KeyFrame.cc	/^vector<KeyFrame*> KeyFrame::GetCovisiblesByWeight(const int &w)$/;"	f	class:ORB_SLAM2::KeyFrame
GetCurrentCallStackSize	orb_slam2/src/System.cc	/^rlim_t System::GetCurrentCallStackSize () {$/;"	f	class:ORB_SLAM2::System
GetCurrentPosition	orb_slam2/src/System.cc	/^cv::Mat System::GetCurrentPosition () {$/;"	f	class:ORB_SLAM2::System
GetDescriptor	orb_slam2/src/MapPoint.cc	/^cv::Mat MapPoint::GetDescriptor()$/;"	f	class:ORB_SLAM2::MapPoint
GetEstimatedRotation	orb_slam2/src/Sim3Solver.cc	/^cv::Mat Sim3Solver::GetEstimatedRotation()$/;"	f	class:ORB_SLAM2::Sim3Solver
GetEstimatedScale	orb_slam2/src/Sim3Solver.cc	/^float Sim3Solver::GetEstimatedScale()$/;"	f	class:ORB_SLAM2::Sim3Solver
GetEstimatedTranslation	orb_slam2/src/Sim3Solver.cc	/^cv::Mat Sim3Solver::GetEstimatedTranslation()$/;"	f	class:ORB_SLAM2::Sim3Solver
GetFeaturesInArea	orb_slam2/src/Frame.cc	/^vector<size_t> Frame::GetFeaturesInArea(const float &x, const float  &y, const float  &r, const int minLevel, const int maxLevel) const$/;"	f	class:ORB_SLAM2::Frame
GetFeaturesInArea	orb_slam2/src/KeyFrame.cc	/^vector<size_t> KeyFrame::GetFeaturesInArea(const float &x, const float &y, const float &r) const$/;"	f	class:ORB_SLAM2::KeyFrame
GetFound	orb_slam2/include/MapPoint.h	/^    inline int GetFound(){$/;"	f	class:ORB_SLAM2::MapPoint
GetFoundRatio	orb_slam2/src/MapPoint.cc	/^float MapPoint::GetFoundRatio()$/;"	f	class:ORB_SLAM2::MapPoint
GetIndexInKeyFrame	orb_slam2/src/MapPoint.cc	/^int MapPoint::GetIndexInKeyFrame(KeyFrame *pKF)$/;"	f	class:ORB_SLAM2::MapPoint
GetInverseScaleFactors	orb_slam2/include/ORBextractor.h	/^    std::vector<float> inline GetInverseScaleFactors(){$/;"	f	class:ORB_SLAM2::ORBextractor::std
GetInverseScaleSigmaSquares	orb_slam2/include/ORBextractor.h	/^    std::vector<float> inline GetInverseScaleSigmaSquares(){$/;"	f	class:ORB_SLAM2::ORBextractor::std
GetLastBigChangeIdx	orb_slam2/src/Map.cc	/^int Map::GetLastBigChangeIdx()$/;"	f	class:ORB_SLAM2::Map
GetLevels	orb_slam2/include/ORBextractor.h	/^    int inline GetLevels(){$/;"	f	class:ORB_SLAM2::ORBextractor
GetLoopEdges	orb_slam2/src/KeyFrame.cc	/^set<KeyFrame*> KeyFrame::GetLoopEdges()$/;"	f	class:ORB_SLAM2::KeyFrame
GetMapPoint	orb_slam2/src/KeyFrame.cc	/^MapPoint* KeyFrame::GetMapPoint(const size_t &idx)$/;"	f	class:ORB_SLAM2::KeyFrame
GetMapPointMatches	orb_slam2/src/KeyFrame.cc	/^vector<MapPoint*> KeyFrame::GetMapPointMatches()$/;"	f	class:ORB_SLAM2::KeyFrame
GetMapPoints	orb_slam2/src/KeyFrame.cc	/^set<MapPoint*> KeyFrame::GetMapPoints()$/;"	f	class:ORB_SLAM2::KeyFrame
GetMaxDistanceInvariance	orb_slam2/src/MapPoint.cc	/^float MapPoint::GetMaxDistanceInvariance()$/;"	f	class:ORB_SLAM2::MapPoint
GetMaxKFid	orb_slam2/src/Map.cc	/^long unsigned int Map::GetMaxKFid()$/;"	f	class:ORB_SLAM2::Map
GetMinDistanceInvariance	orb_slam2/src/MapPoint.cc	/^float MapPoint::GetMinDistanceInvariance()$/;"	f	class:ORB_SLAM2::MapPoint
GetNormal	orb_slam2/src/MapPoint.cc	/^cv::Mat MapPoint::GetNormal()$/;"	f	class:ORB_SLAM2::MapPoint
GetObservations	orb_slam2/src/MapPoint.cc	/^map<KeyFrame*, size_t> MapPoint::GetObservations()$/;"	f	class:ORB_SLAM2::MapPoint
GetParent	orb_slam2/src/KeyFrame.cc	/^KeyFrame* KeyFrame::GetParent()$/;"	f	class:ORB_SLAM2::KeyFrame
GetPose	orb_slam2/src/KeyFrame.cc	/^cv::Mat KeyFrame::GetPose()$/;"	f	class:ORB_SLAM2::KeyFrame
GetPoseInverse	orb_slam2/src/KeyFrame.cc	/^cv::Mat KeyFrame::GetPoseInverse()$/;"	f	class:ORB_SLAM2::KeyFrame
GetReferenceKeyFrame	orb_slam2/src/MapPoint.cc	/^KeyFrame* MapPoint::GetReferenceKeyFrame()$/;"	f	class:ORB_SLAM2::MapPoint
GetReferenceMapPoints	orb_slam2/src/Map.cc	/^vector<MapPoint*> Map::GetReferenceMapPoints()$/;"	f	class:ORB_SLAM2::Map
GetReplaced	orb_slam2/src/MapPoint.cc	/^MapPoint* MapPoint::GetReplaced()$/;"	f	class:ORB_SLAM2::MapPoint
GetRotation	orb_slam2/src/KeyFrame.cc	/^cv::Mat KeyFrame::GetRotation()$/;"	f	class:ORB_SLAM2::KeyFrame
GetRotationInverse	orb_slam2/include/Frame.h	/^    inline cv::Mat GetRotationInverse(){$/;"	f	class:ORB_SLAM2::Frame
GetScaleFactor	orb_slam2/include/ORBextractor.h	/^    float inline GetScaleFactor(){$/;"	f	class:ORB_SLAM2::ORBextractor
GetScaleFactors	orb_slam2/include/ORBextractor.h	/^    std::vector<float> inline GetScaleFactors(){$/;"	f	class:ORB_SLAM2::ORBextractor::std
GetScaleSigmaSquares	orb_slam2/include/ORBextractor.h	/^    std::vector<float> inline GetScaleSigmaSquares(){$/;"	f	class:ORB_SLAM2::ORBextractor::std
GetStereoCenter	orb_slam2/src/KeyFrame.cc	/^cv::Mat KeyFrame::GetStereoCenter()$/;"	f	class:ORB_SLAM2::KeyFrame
GetTrackedKeyPointsUn	orb_slam2/src/System.cc	/^vector<cv::KeyPoint> System::GetTrackedKeyPointsUn()$/;"	f	class:ORB_SLAM2::System
GetTrackedMapPoints	orb_slam2/src/System.cc	/^vector<MapPoint*> System::GetTrackedMapPoints()$/;"	f	class:ORB_SLAM2::System
GetTrackingState	orb_slam2/src/System.cc	/^int System::GetTrackingState()$/;"	f	class:ORB_SLAM2::System
GetTranslation	orb_slam2/src/KeyFrame.cc	/^cv::Mat KeyFrame::GetTranslation()$/;"	f	class:ORB_SLAM2::KeyFrame
GetVectorCovisibleKeyFrames	orb_slam2/src/KeyFrame.cc	/^vector<KeyFrame*> KeyFrame::GetVectorCovisibleKeyFrames()$/;"	f	class:ORB_SLAM2::KeyFrame
GetWeight	orb_slam2/src/KeyFrame.cc	/^int KeyFrame::GetWeight(KeyFrame *pKF)$/;"	f	class:ORB_SLAM2::KeyFrame
GetWorldPos	orb_slam2/src/MapPoint.cc	/^cv::Mat MapPoint::GetWorldPos()$/;"	f	class:ORB_SLAM2::MapPoint
GlobalBundleAdjustemnt	orb_slam2/src/Optimizer.cc	/^void Optimizer::GlobalBundleAdjustemnt(Map* pMap, int nIterations, bool* pbStopFlag, const unsigned long nLoopKF, const bool bRobust)$/;"	f	class:ORB_SLAM2::Optimizer
GrabImageMonocular	orb_slam2/src/Tracking.cc	/^cv::Mat Tracking::GrabImageMonocular(const cv::Mat &im, const double &timestamp)$/;"	f	class:ORB_SLAM2::Tracking
GrabImageRGBD	orb_slam2/src/Tracking.cc	/^cv::Mat Tracking::GrabImageRGBD(const cv::Mat &imRGB,const cv::Mat &imD, const double &timestamp)$/;"	f	class:ORB_SLAM2::Tracking
GrabImageStereo	orb_slam2/src/Tracking.cc	/^cv::Mat Tracking::GrabImageStereo(const cv::Mat &imRectLeft, const cv::Mat &imRectRight, const double &timestamp)$/;"	f	class:ORB_SLAM2::Tracking
GraphElemBitset	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^      typedef std::bitset<HyperGraph::HGET_NUM_ELEMS> GraphElemBitset;$/;"	t	class:g2o::HyperGraph
HALF_PATCH_SIZE	orb_slam2/src/ORBextractor.cc	/^const int HALF_PATCH_SIZE = 15;$/;"	m	namespace:ORB_SLAM2	file:
HARRIS_SCORE	orb_slam2/include/ORBextractor.h	/^    enum {HARRIS_SCORE=0, FAST_SCORE=1 };$/;"	e	enum:ORB_SLAM2::ORBextractor::__anon1
HGET_CACHE	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^        HGET_CACHE,$/;"	e	enum:g2o::HyperGraph::HyperGraphElementType
HGET_DATA	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^        HGET_DATA,$/;"	e	enum:g2o::HyperGraph::HyperGraphElementType
HGET_EDGE	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^        HGET_EDGE,$/;"	e	enum:g2o::HyperGraph::HyperGraphElementType
HGET_NUM_ELEMS	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^        HGET_NUM_ELEMS \/\/ keep as last elem$/;"	e	enum:g2o::HyperGraph::HyperGraphElementType
HGET_PARAMETER	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^        HGET_PARAMETER,$/;"	e	enum:g2o::HyperGraph::HyperGraphElementType
HGET_VERTEX	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^        HGET_VERTEX,$/;"	e	enum:g2o::HyperGraph::HyperGraphElementType
HISTO_LENGTH	orb_slam2/include/ORBmatcher.h	/^    static const int HISTO_LENGTH;$/;"	m	class:ORB_SLAM2::ORBmatcher
HISTO_LENGTH	orb_slam2/src/ORBmatcher.cc	/^const int ORBmatcher::HISTO_LENGTH = 30;$/;"	m	class:ORB_SLAM2::ORBmatcher	file:
HKmeansStep	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::HKmeansStep(NodeId parent_id,$/;"	f	class:DBoW2::TemplatedVocabulary
HessianBlockTransposedType	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.h	/^      typedef Eigen::Map<Matrix<double, Dj, Di>, Matrix<double, Dj, Di>::Flags & PacketAccessBit ? Aligned : Unaligned > HessianBlockTransposedType;$/;"	t	class:g2o::BaseBinaryEdge
HessianBlockType	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.h	/^      typedef Eigen::Map<Matrix<double, Di, Dj>, Matrix<double, Di, Dj>::Flags & PacketAccessBit ? Aligned : Unaligned > HessianBlockType;$/;"	t	class:g2o::BaseBinaryEdge
HessianBlockType	orb_slam2/Thirdparty/g2o/g2o/core/base_multi_edge.h	/^      typedef Eigen::Map<MatrixXd, MatrixXd::Flags & PacketAccessBit ? Aligned : Unaligned > HessianBlockType;$/;"	t	class:g2o::BaseMultiEdge
HessianBlockType	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^    typedef Eigen::Map<Matrix<double, D, D>, Matrix<double,D,D>::Flags & PacketAccessBit ? Aligned : Unaligned >  HessianBlockType;$/;"	t	class:g2o::BaseVertex
HessianHelper	orb_slam2/Thirdparty/g2o/g2o/core/base_multi_edge.h	/^        HessianHelper() : matrix(0, 0, 0), transposed(false) {}$/;"	f	struct:g2o::BaseMultiEdge::HessianHelper
HessianHelper	orb_slam2/Thirdparty/g2o/g2o/core/base_multi_edge.h	/^      struct HessianHelper {$/;"	s	class:g2o::BaseMultiEdge
HyperDijkstra	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.cpp	/^  HyperDijkstra::HyperDijkstra(HyperGraph* g): _graph(g)$/;"	f	class:g2o::HyperDijkstra
HyperDijkstra	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.h	/^  struct  HyperDijkstra{$/;"	s	namespace:g2o
HyperGraph	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.cpp	/^  HyperGraph::HyperGraph()$/;"	f	class:g2o::HyperGraph
HyperGraph	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^      HyperGraph(const HyperGraph&) { }$/;"	f	class:g2o::HyperGraph
HyperGraph	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^  class  HyperGraph$/;"	c	namespace:g2o
HyperGraphAction	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^  class  HyperGraphAction {$/;"	c	namespace:g2o
HyperGraphActionLibrary	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  HyperGraphActionLibrary::HyperGraphActionLibrary()$/;"	f	class:g2o::HyperGraphActionLibrary
HyperGraphActionLibrary	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^  class  HyperGraphActionLibrary{$/;"	c	namespace:g2o
HyperGraphActionSet	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^    typedef std::set<HyperGraphAction*>    HyperGraphActionSet;$/;"	t	struct:g2o::OptimizableGraph
HyperGraphElement	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^      struct  HyperGraphElement {$/;"	s	class:g2o::HyperGraph
HyperGraphElementAction	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementAction::HyperGraphElementAction(const std::string& typeName_)$/;"	f	class:g2o::HyperGraphElementAction
HyperGraphElementAction	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^  class  HyperGraphElementAction{$/;"	c	namespace:g2o
HyperGraphElementActionCollection	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementActionCollection::HyperGraphElementActionCollection(const std::string& name_)$/;"	f	class:g2o::HyperGraphElementActionCollection
HyperGraphElementActionCollection	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^  class  HyperGraphElementActionCollection: public HyperGraphElementAction{$/;"	c	namespace:g2o
HyperGraphElementCreator	orb_slam2/Thirdparty/g2o/g2o/core/creators.h	/^      HyperGraphElementCreator() : _name(typeid(T).name()) {}$/;"	f	class:g2o::HyperGraphElementCreator
HyperGraphElementCreator	orb_slam2/Thirdparty/g2o/g2o/core/creators.h	/^  class HyperGraphElementCreator : public AbstractHyperGraphElementCreator$/;"	c	namespace:g2o
HyperGraphElementType	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^      enum  HyperGraphElementType {$/;"	g	class:g2o::HyperGraph
IC_Angle	orb_slam2/src/ORBextractor.cc	/^static float IC_Angle(const Mat& image, Point2f pt,  const vector<int> & u_max)$/;"	f	namespace:ORB_SLAM2
IDF	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.h	/^  IDF,$/;"	e	enum:DBoW2::WeightingType
INITIALIZER_H	orb_slam2/include/Initializer.h	21;"	d
ImageCallback	ros/src/MonoNode.cc	/^void MonoNode::ImageCallback (const sensor_msgs::ImageConstPtr& msg) {$/;"	f	class:MonoNode
ImageCallback	ros/src/RGBDNode.cc	/^void RGBDNode::ImageCallback (const sensor_msgs::ImageConstPtr& msgRGB, const sensor_msgs::ImageConstPtr& msgD) {$/;"	f	class:RGBDNode
ImageCallback	ros/src/StereoNode.cc	/^void StereoNode::ImageCallback (const sensor_msgs::ImageConstPtr& msgLeft, const sensor_msgs::ImageConstPtr& msgRight) {$/;"	f	class:StereoNode
IncreaseFound	orb_slam2/src/MapPoint.cc	/^void MapPoint::IncreaseFound(int n)$/;"	f	class:ORB_SLAM2::MapPoint
IncreaseVisible	orb_slam2/src/MapPoint.cc	/^void MapPoint::IncreaseVisible(int n)$/;"	f	class:ORB_SLAM2::MapPoint
InformNewBigChange	orb_slam2/src/Map.cc	/^void Map::InformNewBigChange()$/;"	f	class:ORB_SLAM2::Map
InformOnlyTracking	orb_slam2/src/Tracking.cc	/^void Tracking::InformOnlyTracking(const bool &flag)$/;"	f	class:ORB_SLAM2::Tracking
InformationType	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.h	/^      typedef typename BaseEdge<D,E>::InformationType InformationType;$/;"	t	class:g2o::BaseBinaryEdge
InformationType	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	/^      typedef Matrix<double, D, D> InformationType;$/;"	t	class:g2o::BaseEdge
InformationType	orb_slam2/Thirdparty/g2o/g2o/core/base_multi_edge.h	/^      typedef typename BaseEdge<D,E>::InformationType InformationType;$/;"	t	class:g2o::BaseMultiEdge
InformationType	orb_slam2/Thirdparty/g2o/g2o/core/base_unary_edge.h	/^      typedef typename BaseEdge<D,E>::InformationType InformationType;$/;"	t	class:g2o::BaseUnaryEdge
Init	ros/src/Node.cc	/^void Node::Init () {$/;"	f	class:Node
Initialize	orb_slam2/src/Initializer.cc	/^bool Initializer::Initialize(const Frame &CurrentFrame, const vector<int> &vMatches12, cv::Mat &R21, cv::Mat &t21,$/;"	f	class:ORB_SLAM2::Initializer
Initializer	orb_slam2/include/Initializer.h	/^class Initializer$/;"	c	namespace:ORB_SLAM2
Initializer	orb_slam2/src/Initializer.cc	/^Initializer::Initializer(const Frame &ReferenceFrame, float sigma, int iterations)$/;"	f	class:ORB_SLAM2::Initializer
InsertKeyFrame	orb_slam2/src/LocalMapping.cc	/^void LocalMapping::InsertKeyFrame(KeyFrame *pKF)$/;"	f	class:ORB_SLAM2::LocalMapping
InsertKeyFrame	orb_slam2/src/LoopClosing.cc	/^void LoopClosing::InsertKeyFrame(KeyFrame *pKF)$/;"	f	class:ORB_SLAM2::LoopClosing
IntBlockMap	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.h	/^    typedef std::map<int, SparseMatrixBlock*> IntBlockMap;$/;"	t	class:g2o::SparseBlockMatrix
IntProperty	orb_slam2/Thirdparty/g2o/g2o/stuff/property.h	/^  typedef Property<int> IntProperty;$/;"	t	namespace:g2o
InterruptBA	orb_slam2/src/LocalMapping.cc	/^void LocalMapping::InterruptBA()$/;"	f	class:ORB_SLAM2::LocalMapping
IsInImage	orb_slam2/src/KeyFrame.cc	/^bool KeyFrame::IsInImage(const float &x, const float &y) const$/;"	f	class:ORB_SLAM2::KeyFrame
IsInKeyFrame	orb_slam2/src/MapPoint.cc	/^bool MapPoint::IsInKeyFrame(KeyFrame *pKF)$/;"	f	class:ORB_SLAM2::MapPoint
Isometry2D	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Transform<double,2,Eigen::Isometry,Eigen::ColMajor>              Isometry2D;$/;"	t	namespace:g2o
Isometry3D	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Transform<double,3,Eigen::Isometry,Eigen::ColMajor>              Isometry3D;$/;"	t	namespace:g2o
JACOBIAN_WORKSPACE_H	orb_slam2/Thirdparty/g2o/g2o/core/jacobian_workspace.h	28;"	d
JacobianType	orb_slam2/Thirdparty/g2o/g2o/core/base_multi_edge.h	/^      typedef MatrixXd::MapType JacobianType;$/;"	t	class:g2o::BaseMultiEdge
JacobianWorkspace	orb_slam2/Thirdparty/g2o/g2o/core/jacobian_workspace.cpp	/^JacobianWorkspace::JacobianWorkspace() :$/;"	f	class:g2o::JacobianWorkspace
JacobianWorkspace	orb_slam2/Thirdparty/g2o/g2o/core/jacobian_workspace.h	/^  class  JacobianWorkspace$/;"	c	namespace:g2o
JacobianXiOplusType	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.h	/^      typedef typename Matrix<double, D, Di>::AlignedMapType JacobianXiOplusType;$/;"	t	class:g2o::BaseBinaryEdge
JacobianXiOplusType	orb_slam2/Thirdparty/g2o/g2o/core/base_unary_edge.h	/^      typedef typename Matrix<double, D, VertexXiType::Dimension>::AlignedMapType JacobianXiOplusType;$/;"	t	class:g2o::BaseUnaryEdge
JacobianXjOplusType	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.h	/^      typedef typename Matrix<double, D, Dj>::AlignedMapType JacobianXjOplusType;$/;"	t	class:g2o::BaseBinaryEdge
KEYFRAMEDATABASE_H	orb_slam2/include/KeyFrameDatabase.h	22;"	d
KEYFRAME_H	orb_slam2/include/KeyFrame.h	22;"	d
KL	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.h	/^  KL,$/;"	e	enum:DBoW2::ScoringType
KeyFrame	orb_slam2/include/KeyFrame.h	/^class KeyFrame$/;"	c	namespace:ORB_SLAM2
KeyFrame	orb_slam2/src/KeyFrame.cc	/^KeyFrame::KeyFrame():$/;"	f	class:ORB_SLAM2::KeyFrame
KeyFrame	orb_slam2/src/KeyFrame.cc	/^KeyFrame::KeyFrame(Frame &F, Map *pMap, KeyFrameDatabase *pKFDB):$/;"	f	class:ORB_SLAM2::KeyFrame
KeyFrameAndPose	orb_slam2/include/LoopClosing.h	/^        Eigen::aligned_allocator<std::pair<KeyFrame* const, g2o::Sim3> > > KeyFrameAndPose;$/;"	t	class:ORB_SLAM2::LoopClosing
KeyFrameCulling	orb_slam2/src/LocalMapping.cc	/^void LocalMapping::KeyFrameCulling()$/;"	f	class:ORB_SLAM2::LocalMapping
KeyFrameDatabase	orb_slam2/include/KeyFrameDatabase.h	/^   KeyFrameDatabase() {}$/;"	f	class:ORB_SLAM2::KeyFrameDatabase
KeyFrameDatabase	orb_slam2/include/KeyFrameDatabase.h	/^class KeyFrameDatabase$/;"	c	namespace:ORB_SLAM2
KeyFrameDatabase	orb_slam2/src/KeyFrameDatabase.cc	/^KeyFrameDatabase::KeyFrameDatabase (const ORBVocabulary &voc):$/;"	f	class:ORB_SLAM2::KeyFrameDatabase
KeyFramesInMap	orb_slam2/src/Map.cc	/^long unsigned int Map::KeyFramesInMap()$/;"	f	class:ORB_SLAM2::Map
KeyframesInQueue	orb_slam2/include/LocalMapping.h	/^    int KeyframesInQueue(){$/;"	f	class:ORB_SLAM2::LocalMapping
L	orb_slam2/Thirdparty/DBoW2/DBoW2/FORB.cpp	/^const int FORB::L=32;$/;"	m	class:DBoW2::FORB	file:
L	orb_slam2/Thirdparty/DBoW2/DBoW2/FORB.h	/^  static const int L;$/;"	m	class:DBoW2::FORB
L1	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.h	/^  L1,$/;"	e	enum:DBoW2::LNorm
L1_NORM	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.h	/^  L1_NORM,$/;"	e	enum:DBoW2::ScoringType
L2	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.h	/^  L2$/;"	e	enum:DBoW2::LNorm
L2_NORM	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.h	/^  L2_NORM,$/;"	e	enum:DBoW2::ScoringType
LNorm	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.h	/^enum LNorm$/;"	g	namespace:DBoW2
LOCALMAPPING_H	orb_slam2/include/LocalMapping.h	22;"	d
LOG_EPS	orb_slam2/Thirdparty/DBoW2/DBoW2/ScoringObject.cpp	/^const double GeneralScoring::LOG_EPS = log(DBL_EPSILON); \/\/ FLT_EPSILON$/;"	m	class:GeneralScoring	file:
LOG_EPS	orb_slam2/Thirdparty/DBoW2/DBoW2/ScoringObject.h	/^	static const double LOG_EPS; $/;"	m	class:DBoW2::GeneralScoring
LOOPCLOSING_H	orb_slam2/include/LoopClosing.h	22;"	d
LOST	orb_slam2/include/Tracking.h	/^        LOST=3$/;"	e	enum:ORB_SLAM2::Tracking::eTrackingState
LandmarkDim	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      static const int LandmarkDim = Traits::LandmarkDim;$/;"	m	class:g2o::BlockSolver
LandmarkDim	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^    static const int LandmarkDim = Eigen::Dynamic;$/;"	m	struct:g2o::BlockSolverTraits
LandmarkDim	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^    static const int LandmarkDim = _LandmarkDim;$/;"	m	struct:g2o::BlockSolverTraits
LandmarkHessianType	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      typedef typename Traits::LandmarkHessianType LandmarkHessianType;$/;"	t	class:g2o::BlockSolver
LandmarkHessianType	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^    typedef SparseBlockMatrix<LandmarkMatrixType> LandmarkHessianType;$/;"	t	struct:g2o::BlockSolverTraits
LandmarkMatrixType	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      typedef typename Traits::LandmarkMatrixType LandmarkMatrixType; $/;"	t	class:g2o::BlockSolver
LandmarkMatrixType	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^    typedef Matrix<double, LandmarkDim, LandmarkDim> LandmarkMatrixType;$/;"	t	struct:g2o::BlockSolverTraits
LandmarkMatrixType	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^    typedef MatrixXd LandmarkMatrixType;$/;"	t	struct:g2o::BlockSolverTraits
LandmarkVectorType	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      typedef typename Traits::LandmarkVectorType LandmarkVectorType;$/;"	t	class:g2o::BlockSolver
LandmarkVectorType	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^    typedef Matrix<double, LandmarkDim, 1> LandmarkVectorType;$/;"	t	struct:g2o::BlockSolverTraits
LandmarkVectorType	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^    typedef VectorXd LandmarkVectorType;$/;"	t	struct:g2o::BlockSolverTraits
LinearSolver	orb_slam2/Thirdparty/g2o/g2o/core/linear_solver.h	/^    LinearSolver() {};$/;"	f	class:g2o::LinearSolver
LinearSolver	orb_slam2/Thirdparty/g2o/g2o/core/linear_solver.h	/^class LinearSolver$/;"	c	namespace:g2o
LinearSolverCCS	orb_slam2/Thirdparty/g2o/g2o/core/linear_solver.h	/^    LinearSolverCCS() : LinearSolver<MatrixType>(), _ccsMatrix(0) {}$/;"	f	class:g2o::LinearSolverCCS
LinearSolverCCS	orb_slam2/Thirdparty/g2o/g2o/core/linear_solver.h	/^class LinearSolverCCS : public LinearSolver<MatrixType>$/;"	c	namespace:g2o
LinearSolverDense	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_dense.h	/^      LinearSolverDense() :$/;"	f	class:g2o::LinearSolverDense
LinearSolverDense	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_dense.h	/^  class LinearSolverDense : public LinearSolver<MatrixType>$/;"	c	namespace:g2o
LinearSolverEigen	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_eigen.h	/^    LinearSolverEigen() :$/;"	f	class:g2o::LinearSolverEigen
LinearSolverEigen	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_eigen.h	/^class LinearSolverEigen: public LinearSolver<MatrixType>$/;"	c	namespace:g2o
LinearSolverType	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      typedef typename Traits::LinearSolverType LinearSolverType;$/;"	t	class:g2o::BlockSolver
LinearSolverType	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^    typedef LinearSolver<PoseMatrixType> LinearSolverType;$/;"	t	struct:g2o::BlockSolverTraits
LoadMap	orb_slam2/src/System.cc	/^bool System::LoadMap(const string &filename) {$/;"	f	class:ORB_SLAM2::System
LoadOrbParameters	ros/src/Node.cc	/^void Node::LoadOrbParameters (ORB_SLAM2::ORBParameters& parameters) {$/;"	f	class:Node
LocalBundleAdjustment	orb_slam2/src/Optimizer.cc	/^void Optimizer::LocalBundleAdjustment(KeyFrame *pKF, bool* pbStopFlag, Map* pMap)$/;"	f	class:ORB_SLAM2::Optimizer
LocalMapping	orb_slam2/include/LocalMapping.h	/^class LocalMapping$/;"	c	namespace:ORB_SLAM2
LocalMapping	orb_slam2/src/LocalMapping.cc	/^LocalMapping::LocalMapping(Map *pMap, const float bMonocular):$/;"	f	class:ORB_SLAM2::LocalMapping
LookupMap	orb_slam2/Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.h	/^      typedef std::tr1::unordered_map<int, double>     LookupMap;$/;"	t	class:g2o::MarginalCovarianceCholesky
LoopClosing	orb_slam2/include/LoopClosing.h	/^class LoopClosing$/;"	c	namespace:ORB_SLAM2
LoopClosing	orb_slam2/src/LoopClosing.cc	/^LoopClosing::LoopClosing(Map *pMap, KeyFrameDatabase *pDB, ORBVocabulary *pVoc, const bool bFixScale):$/;"	f	class:ORB_SLAM2::LoopClosing
MAPPOINT_H	orb_slam2/include/MapPoint.h	22;"	d
MAP_H	orb_slam2/include/Map.h	22;"	d
MEASURE_FUNCTION_TIME	orb_slam2/Thirdparty/g2o/g2o/stuff/timeutil.h	126;"	d
MEASURE_TIME	orb_slam2/Thirdparty/g2o/g2o/stuff/timeutil.h	69;"	d
MONOCULAR	orb_slam2/include/System.h	/^        MONOCULAR=0,$/;"	e	enum:ORB_SLAM2::System::eSensor
M_PI	orb_slam2/Thirdparty/g2o/g2o/stuff/misc.h	34;"	d
Map	orb_slam2/include/Map.h	/^class Map$/;"	c	namespace:ORB_SLAM2
Map	orb_slam2/src/Map.cc	/^Map::Map():mnMaxKFid(0),mnBigChangeIdx(0)$/;"	f	class:ORB_SLAM2::Map
MapChanged	orb_slam2/src/System.cc	/^bool System::MapChanged()$/;"	f	class:ORB_SLAM2::System
MapPoint	orb_slam2/include/MapPoint.h	/^class MapPoint$/;"	c	namespace:ORB_SLAM2
MapPoint	orb_slam2/src/MapPoint.cc	/^MapPoint::MapPoint():$/;"	f	class:ORB_SLAM2::MapPoint
MapPoint	orb_slam2/src/MapPoint.cc	/^MapPoint::MapPoint(const cv::Mat &Pos, KeyFrame *pRefKF, Map* pMap):$/;"	f	class:ORB_SLAM2::MapPoint
MapPoint	orb_slam2/src/MapPoint.cc	/^MapPoint::MapPoint(const cv::Mat &Pos, Map* pMap, Frame* pFrame, const int &idxF):$/;"	f	class:ORB_SLAM2::MapPoint
MapPointCulling	orb_slam2/src/LocalMapping.cc	/^void LocalMapping::MapPointCulling()$/;"	f	class:ORB_SLAM2::LocalMapping
MapPointsInMap	orb_slam2/src/Map.cc	/^long unsigned int Map::MapPointsInMap()$/;"	f	class:ORB_SLAM2::Map
MapPointsToPointCloud	ros/src/Node.cc	/^sensor_msgs::PointCloud2 Node::MapPointsToPointCloud (std::vector<ORB_SLAM2::MapPoint*> map_points) {$/;"	f	class:Node
MarginalCovarianceCholesky	orb_slam2/Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.cpp	/^MarginalCovarianceCholesky::MarginalCovarianceCholesky() :$/;"	f	class:g2o::MarginalCovarianceCholesky
MarginalCovarianceCholesky	orb_slam2/Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.h	/^  class  MarginalCovarianceCholesky {$/;"	c	namespace:g2o
Match	orb_slam2/include/Initializer.h	/^    typedef pair<int,int> Match;$/;"	t	class:ORB_SLAM2::Initializer
Matrix2D	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Matrix<double,2,2,Eigen::ColMajor>                               Matrix2D;$/;"	t	namespace:g2o
Matrix2F	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Matrix<float,2,2,Eigen::ColMajor>                                Matrix2F;$/;"	t	namespace:g2o
Matrix2I	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Matrix<int,2,2,Eigen::ColMajor>                                  Matrix2I;$/;"	t	namespace:g2o
Matrix3D	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Matrix<double,3,3,Eigen::ColMajor>                               Matrix3D;$/;"	t	namespace:g2o
Matrix3F	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Matrix<float,3,3,Eigen::ColMajor>                                Matrix3F;$/;"	t	namespace:g2o
Matrix3I	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Matrix<int,3,3,Eigen::ColMajor>                                  Matrix3I;$/;"	t	namespace:g2o
Matrix4D	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Matrix<double,4,4,Eigen::ColMajor>                               Matrix4D;$/;"	t	namespace:g2o
Matrix4F	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Matrix<float,4,4,Eigen::ColMajor>                                Matrix4F;$/;"	t	namespace:g2o
Matrix4I	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Matrix<int,4,4,Eigen::ColMajor>                                  Matrix4I;$/;"	t	namespace:g2o
Matrix6d	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^typedef Matrix<double, 6, 6> Matrix6d;$/;"	t	namespace:g2o
Matrix7d	orb_slam2/Thirdparty/g2o/g2o/types/sim3.h	/^  typedef  Matrix <double, 7, 7> Matrix7d;$/;"	t	namespace:g2o
MatrixElem	orb_slam2/Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.cpp	/^  MatrixElem(int r_, int c_) : r(r_), c(c_) {}$/;"	f	struct:g2o::MatrixElem
MatrixElem	orb_slam2/Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.cpp	/^struct MatrixElem$/;"	s	namespace:g2o	file:
MatrixStructure	orb_slam2/Thirdparty/g2o/g2o/core/matrix_structure.cpp	/^MatrixStructure::MatrixStructure() :$/;"	f	class:g2o::MatrixStructure
MatrixStructure	orb_slam2/Thirdparty/g2o/g2o/core/matrix_structure.h	/^class MatrixStructure$/;"	c	namespace:g2o
MatrixXD	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic,Eigen::ColMajor>     MatrixXD;$/;"	t	namespace:g2o
MatrixXF	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Matrix<float,Eigen::Dynamic,Eigen::Dynamic,Eigen::ColMajor>      MatrixXF;$/;"	t	namespace:g2o
MatrixXI	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Matrix<int,Eigen::Dynamic,Eigen::Dynamic,Eigen::ColMajor>        MatrixXI;$/;"	t	namespace:g2o
Measurement	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.h	/^      typedef typename BaseEdge<D,E>::Measurement Measurement;$/;"	t	class:g2o::BaseBinaryEdge
Measurement	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	/^      typedef E Measurement;$/;"	t	class:g2o::BaseEdge
Measurement	orb_slam2/Thirdparty/g2o/g2o/core/base_multi_edge.h	/^      typedef typename BaseEdge<D,E>::Measurement Measurement;$/;"	t	class:g2o::BaseMultiEdge
Measurement	orb_slam2/Thirdparty/g2o/g2o/core/base_unary_edge.h	/^      typedef typename BaseEdge<D,E>::Measurement Measurement;$/;"	t	class:g2o::BaseUnaryEdge
MonoNode	ros/include/MonoNode.h	/^class MonoNode : public Node$/;"	c
MonoNode	ros/src/MonoNode.cc	/^MonoNode::MonoNode (ORB_SLAM2::System::eSensor sensor, ros::NodeHandle &node_handle, image_transport::ImageTransport &image_transport) : Node (sensor, node_handle, image_transport) {$/;"	f	class:MonoNode
MonocularInitialization	orb_slam2/src/Tracking.cc	/^void Tracking::MonocularInitialization()$/;"	f	class:ORB_SLAM2::Tracking
N	orb_slam2/include/Frame.h	/^    int N;$/;"	m	class:ORB_SLAM2::Frame
N	orb_slam2/include/FrameDrawer.h	/^    int N;$/;"	m	class:ORB_SLAM2::FrameDrawer
N	orb_slam2/include/KeyFrame.h	/^    const int N;$/;"	m	class:ORB_SLAM2::KeyFrame
N	orb_slam2/include/PnPsolver.h	/^  int N;$/;"	m	class:ORB_SLAM2::PnPsolver
N	orb_slam2/include/Sim3Solver.h	/^    int N;$/;"	m	class:ORB_SLAM2::Sim3Solver
NONE	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.h	/^    NONE = 0,$/;"	e	enum:DUtils::Timestamp::tOptions
NOT_INITIALIZED	orb_slam2/include/Tracking.h	/^        NOT_INITIALIZED=1,$/;"	e	enum:ORB_SLAM2::Tracking::eTrackingState
NO_IMAGES_YET	orb_slam2/include/Tracking.h	/^        NO_IMAGES_YET=0,$/;"	e	enum:ORB_SLAM2::Tracking::eTrackingState
NeedNewKeyFrame	orb_slam2/src/Tracking.cc	/^bool Tracking::NeedNewKeyFrame()$/;"	f	class:ORB_SLAM2::Tracking
Node	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^    Node(): id(0), weight(0), parent(0), word_id(0){}$/;"	f	struct:DBoW2::TemplatedVocabulary::Node
Node	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^    Node(NodeId _id): id(_id), weight(0), parent(0), word_id(0){}$/;"	f	struct:DBoW2::TemplatedVocabulary::Node
Node	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^  struct Node$/;"	s	class:DBoW2::TemplatedVocabulary
Node	ros/include/Node.h	/^class Node$/;"	c
Node	ros/src/Node.cc	/^Node::Node (ORB_SLAM2::System::eSensor sensor, ros::NodeHandle &node_handle, image_transport::ImageTransport &image_transport) :  image_transport_(image_transport) {$/;"	f	class:Node
NodeId	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.h	/^typedef unsigned int NodeId;$/;"	t	namespace:DBoW2
Normalize	orb_slam2/src/Initializer.cc	/^void Initializer::Normalize(const vector<cv::KeyPoint> &vKeys, vector<cv::Point2f> &vNormalizedPoints, cv::Mat &T)$/;"	f	class:ORB_SLAM2::Initializer
OK	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm.h	/^      enum  SolverResult {Terminate=2, OK=1, Fail=-1};$/;"	e	enum:g2o::OptimizationAlgorithm::SolverResult
OK	orb_slam2/include/Tracking.h	/^        OK=2,$/;"	e	enum:ORB_SLAM2::Tracking::eTrackingState
OPTIMIZER_H	orb_slam2/include/Optimizer.h	22;"	d
ORBEXTRACTOR_H	orb_slam2/include/ORBextractor.h	22;"	d
ORBMATCHER_H	orb_slam2/include/ORBmatcher.h	23;"	d
ORBParameters	orb_slam2/include/Tracking.h	/^struct ORBParameters{$/;"	s	namespace:ORB_SLAM2
ORBSLAM2_ROS_MONONODE_H_	ros/include/MonoNode.h	22;"	d
ORBSLAM2_ROS_NODE_H_	ros/include/Node.h	22;"	d
ORBSLAM2_ROS_RGBDODE_H_	ros/include/RGBDNode.h	22;"	d
ORBVOCABULARY_H	orb_slam2/include/ORBVocabulary.h	23;"	d
ORBVocabulary	orb_slam2/include/ORBVocabulary.h	/^  ORBVocabulary;$/;"	t	namespace:ORB_SLAM2
ORB_SLAM2	orb_slam2/include/Converter.h	/^namespace ORB_SLAM2$/;"	n
ORB_SLAM2	orb_slam2/include/Frame.h	/^namespace ORB_SLAM2$/;"	n
ORB_SLAM2	orb_slam2/include/FrameDrawer.h	/^namespace ORB_SLAM2$/;"	n
ORB_SLAM2	orb_slam2/include/Initializer.h	/^namespace ORB_SLAM2$/;"	n
ORB_SLAM2	orb_slam2/include/KeyFrame.h	/^namespace ORB_SLAM2$/;"	n
ORB_SLAM2	orb_slam2/include/KeyFrameDatabase.h	/^namespace ORB_SLAM2$/;"	n
ORB_SLAM2	orb_slam2/include/LocalMapping.h	/^namespace ORB_SLAM2$/;"	n
ORB_SLAM2	orb_slam2/include/LoopClosing.h	/^namespace ORB_SLAM2$/;"	n
ORB_SLAM2	orb_slam2/include/Map.h	/^namespace ORB_SLAM2$/;"	n
ORB_SLAM2	orb_slam2/include/MapPoint.h	/^namespace ORB_SLAM2$/;"	n
ORB_SLAM2	orb_slam2/include/ORBVocabulary.h	/^namespace ORB_SLAM2$/;"	n
ORB_SLAM2	orb_slam2/include/ORBextractor.h	/^namespace ORB_SLAM2$/;"	n
ORB_SLAM2	orb_slam2/include/ORBmatcher.h	/^namespace ORB_SLAM2$/;"	n
ORB_SLAM2	orb_slam2/include/Optimizer.h	/^namespace ORB_SLAM2$/;"	n
ORB_SLAM2	orb_slam2/include/PnPsolver.h	/^namespace ORB_SLAM2$/;"	n
ORB_SLAM2	orb_slam2/include/Sim3Solver.h	/^namespace ORB_SLAM2$/;"	n
ORB_SLAM2	orb_slam2/include/System.h	/^namespace ORB_SLAM2$/;"	n
ORB_SLAM2	orb_slam2/include/Tracking.h	/^namespace ORB_SLAM2$/;"	n
ORB_SLAM2	orb_slam2/src/Converter.cc	/^namespace ORB_SLAM2$/;"	n	file:
ORB_SLAM2	orb_slam2/src/Frame.cc	/^namespace ORB_SLAM2$/;"	n	file:
ORB_SLAM2	orb_slam2/src/FrameDrawer.cc	/^namespace ORB_SLAM2$/;"	n	file:
ORB_SLAM2	orb_slam2/src/Initializer.cc	/^namespace ORB_SLAM2$/;"	n	file:
ORB_SLAM2	orb_slam2/src/KeyFrame.cc	/^namespace ORB_SLAM2$/;"	n	file:
ORB_SLAM2	orb_slam2/src/KeyFrameDatabase.cc	/^namespace ORB_SLAM2$/;"	n	file:
ORB_SLAM2	orb_slam2/src/LocalMapping.cc	/^namespace ORB_SLAM2$/;"	n	file:
ORB_SLAM2	orb_slam2/src/LoopClosing.cc	/^namespace ORB_SLAM2$/;"	n	file:
ORB_SLAM2	orb_slam2/src/Map.cc	/^namespace ORB_SLAM2$/;"	n	file:
ORB_SLAM2	orb_slam2/src/MapPoint.cc	/^namespace ORB_SLAM2$/;"	n	file:
ORB_SLAM2	orb_slam2/src/ORBextractor.cc	/^namespace ORB_SLAM2$/;"	n	file:
ORB_SLAM2	orb_slam2/src/ORBmatcher.cc	/^namespace ORB_SLAM2$/;"	n	file:
ORB_SLAM2	orb_slam2/src/Optimizer.cc	/^namespace ORB_SLAM2$/;"	n	file:
ORB_SLAM2	orb_slam2/src/PnPsolver.cc	/^namespace ORB_SLAM2$/;"	n	file:
ORB_SLAM2	orb_slam2/src/Sim3Solver.cc	/^namespace ORB_SLAM2$/;"	n	file:
ORB_SLAM2	orb_slam2/src/System.cc	/^namespace ORB_SLAM2$/;"	n	file:
ORB_SLAM2	orb_slam2/src/Tracking.cc	/^namespace ORB_SLAM2$/;"	n	file:
ORBextractor	orb_slam2/include/ORBextractor.h	/^class ORBextractor$/;"	c	namespace:ORB_SLAM2
ORBextractor	orb_slam2/src/ORBextractor.cc	/^ORBextractor::ORBextractor(int _nfeatures, float _scaleFactor, int _nlevels,$/;"	f	class:ORB_SLAM2::ORBextractor
ORBmatcher	orb_slam2/include/ORBmatcher.h	/^class ORBmatcher$/;"	c	namespace:ORB_SLAM2
ORBmatcher	orb_slam2/src/ORBmatcher.cc	/^ORBmatcher::ORBmatcher(float nnratio, bool checkOri): mfNNratio(nnratio), mbCheckOrientation(checkOri)$/;"	f	class:ORB_SLAM2::ORBmatcher
Observations	orb_slam2/src/MapPoint.cc	/^int MapPoint::Observations()$/;"	f	class:ORB_SLAM2::MapPoint
OpenMPMutex	orb_slam2/Thirdparty/g2o/g2o/core/openmp_mutex.h	/^      OpenMPMutex() { omp_init_lock(&_lock); }$/;"	f	class:g2o::OpenMPMutex
OpenMPMutex	orb_slam2/Thirdparty/g2o/g2o/core/openmp_mutex.h	/^  class OpenMPMutex$/;"	c	namespace:g2o
OptimizableGraph	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::OptimizableGraph()$/;"	f	class:g2o::OptimizableGraph
OptimizableGraph	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^  struct  OptimizableGraph : public HyperGraph {$/;"	s	namespace:g2o
OptimizationAlgorithm	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm.cpp	/^OptimizationAlgorithm::OptimizationAlgorithm() :$/;"	f	class:g2o::OptimizationAlgorithm
OptimizationAlgorithm	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm.h	/^      OptimizationAlgorithm(const OptimizationAlgorithm&) { }$/;"	f	class:g2o::OptimizationAlgorithm
OptimizationAlgorithm	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm.h	/^  class  OptimizationAlgorithm$/;"	c	namespace:g2o
OptimizationAlgorithmDogleg	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.cpp	/^  OptimizationAlgorithmDogleg::OptimizationAlgorithmDogleg(BlockSolverBase* solver) :$/;"	f	class:g2o::OptimizationAlgorithmDogleg
OptimizationAlgorithmDogleg	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.h	/^  class  OptimizationAlgorithmDogleg : public OptimizationAlgorithmWithHessian$/;"	c	namespace:g2o
OptimizationAlgorithmFactory	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.cpp	/^  OptimizationAlgorithmFactory::OptimizationAlgorithmFactory()$/;"	f	class:g2o::OptimizationAlgorithmFactory
OptimizationAlgorithmFactory	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.h	/^  class  OptimizationAlgorithmFactory$/;"	c	namespace:g2o
OptimizationAlgorithmGaussNewton	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_gauss_newton.cpp	/^  OptimizationAlgorithmGaussNewton::OptimizationAlgorithmGaussNewton(Solver* solver) :$/;"	f	class:g2o::OptimizationAlgorithmGaussNewton
OptimizationAlgorithmGaussNewton	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_gauss_newton.h	/^  class  OptimizationAlgorithmGaussNewton : public OptimizationAlgorithmWithHessian$/;"	c	namespace:g2o
OptimizationAlgorithmLevenberg	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.cpp	/^  OptimizationAlgorithmLevenberg::OptimizationAlgorithmLevenberg(Solver* solver) :$/;"	f	class:g2o::OptimizationAlgorithmLevenberg
OptimizationAlgorithmLevenberg	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.h	/^  class  OptimizationAlgorithmLevenberg : public OptimizationAlgorithmWithHessian$/;"	c	namespace:g2o
OptimizationAlgorithmProperty	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_property.h	/^  OptimizationAlgorithmProperty() :$/;"	f	struct:g2o::OptimizationAlgorithmProperty
OptimizationAlgorithmProperty	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_property.h	/^  OptimizationAlgorithmProperty(const std::string& name_, const std::string& desc_, const std::string& type_, bool requiresMarginalize_, int poseDim_, int landmarkDim_) :$/;"	f	struct:g2o::OptimizationAlgorithmProperty
OptimizationAlgorithmProperty	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_property.h	/^struct  OptimizationAlgorithmProperty$/;"	s	namespace:g2o
OptimizationAlgorithmWithHessian	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_with_hessian.cpp	/^  OptimizationAlgorithmWithHessian::OptimizationAlgorithmWithHessian(Solver* solver) :$/;"	f	class:g2o::OptimizationAlgorithmWithHessian
OptimizationAlgorithmWithHessian	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_with_hessian.h	/^  class  OptimizationAlgorithmWithHessian : public OptimizationAlgorithm$/;"	c	namespace:g2o
OptimizeEssentialGraph	orb_slam2/src/Optimizer.cc	/^void Optimizer::OptimizeEssentialGraph(Map* pMap, KeyFrame* pLoopKF, KeyFrame* pCurKF,$/;"	f	class:ORB_SLAM2::Optimizer
OptimizeSim3	orb_slam2/src/Optimizer.cc	/^int Optimizer::OptimizeSim3(KeyFrame *pKF1, KeyFrame *pKF2, vector<MapPoint *> &vpMatches1, g2o::Sim3 &g2oS12, const float th2, const bool bFixScale)$/;"	f	class:ORB_SLAM2::Optimizer
Optimizer	orb_slam2/include/Optimizer.h	/^class Optimizer$/;"	c	namespace:ORB_SLAM2
Ow	orb_slam2/include/KeyFrame.h	/^    cv::Mat Ow;$/;"	m	class:ORB_SLAM2::KeyFrame
PACKAGE	ros/config/dynamic_reconfigure.cfg	/^PACKAGE = "orb_slam2_ros"$/;"	v
PATCH_SIZE	orb_slam2/src/ORBextractor.cc	/^const int PATCH_SIZE = 31;$/;"	m	namespace:ORB_SLAM2	file:
PNPSOLVER_H	orb_slam2/include/PnPsolver.h	52;"	d
PTHING	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.cpp	36;"	d	file:
PVAR	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	118;"	d
PVARA	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	123;"	d
Parameter	orb_slam2/Thirdparty/g2o/g2o/core/parameter.cpp	/^  Parameter::Parameter() : _id(-1)$/;"	f	class:g2o::Parameter
Parameter	orb_slam2/Thirdparty/g2o/g2o/core/parameter.h	/^    class  Parameter : public HyperGraph::HyperGraphElement$/;"	c	namespace:g2o
ParameterContainer	orb_slam2/Thirdparty/g2o/g2o/core/parameter_container.cpp	/^  ParameterContainer::ParameterContainer(bool isMainStorage_) :$/;"	f	class:g2o::ParameterContainer
ParameterContainer	orb_slam2/Thirdparty/g2o/g2o/core/parameter_container.h	/^    class ParameterContainer : protected std::map<int, Parameter*> $/;"	c	namespace:g2o
ParameterVector	orb_slam2/Thirdparty/g2o/g2o/core/parameter.h	/^    typedef std::vector<Parameter*> ParameterVector;$/;"	t	namespace:g2o
Parameters	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  DrawAction::Parameters::Parameters(){$/;"	f	class:g2o::DrawAction::Parameters
Parameters	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^      class  Parameters {$/;"	c	class:g2o::HyperGraphAction
Parameters	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^      struct  Parameters: public HyperGraphElementAction::Parameters{$/;"	s	class:g2o::WriteGnuplotAction
Parameters	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^      struct  Parameters{$/;"	s	class:g2o::HyperGraphElementAction
Parameters	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^    class  Parameters: public HyperGraphElementAction::Parameters,  public PropertyMap{$/;"	c	class:g2o::DrawAction
ParametersIteration	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  HyperGraphAction::ParametersIteration::ParametersIteration(int iter) :$/;"	f	class:g2o::HyperGraphAction::ParametersIteration
ParametersIteration	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^      class  ParametersIteration : public Parameters {$/;"	c	class:g2o::HyperGraphAction
ParamsChangedCallback	ros/src/Node.cc	/^void Node::ParamsChangedCallback(orb_slam2_ros::dynamic_reconfigureConfig &config, uint32_t level) {$/;"	f	class:Node
PermutationMatrix	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_eigen.h	/^    typedef Eigen::PermutationMatrix<Eigen::Dynamic, Eigen::Dynamic> PermutationMatrix;$/;"	t	class:g2o::LinearSolverEigen
PnPsolver	orb_slam2/include/PnPsolver.h	/^class PnPsolver {$/;"	c	namespace:ORB_SLAM2
PnPsolver	orb_slam2/src/PnPsolver.cc	/^PnPsolver::PnPsolver(const Frame &F, const vector<MapPoint*> &vpMapPointMatches):$/;"	f	class:ORB_SLAM2::PnPsolver
PosInGrid	orb_slam2/src/Frame.cc	/^bool Frame::PosInGrid(const cv::KeyPoint &kp, int &posX, int &posY)$/;"	f	class:ORB_SLAM2::Frame
PoseDim	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      static const int PoseDim = Traits::PoseDim;$/;"	m	class:g2o::BlockSolver
PoseDim	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^    static const int PoseDim = Eigen::Dynamic;$/;"	m	struct:g2o::BlockSolverTraits
PoseDim	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^    static const int PoseDim = _PoseDim;$/;"	m	struct:g2o::BlockSolverTraits
PoseHessianType	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      typedef typename Traits::PoseHessianType PoseHessianType;$/;"	t	class:g2o::BlockSolver
PoseHessianType	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^    typedef SparseBlockMatrix<PoseMatrixType> PoseHessianType;$/;"	t	struct:g2o::BlockSolverTraits
PoseLandmarkHessianType	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      typedef typename Traits::PoseLandmarkHessianType PoseLandmarkHessianType;$/;"	t	class:g2o::BlockSolver
PoseLandmarkHessianType	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^    typedef SparseBlockMatrix<PoseLandmarkMatrixType> PoseLandmarkHessianType;$/;"	t	struct:g2o::BlockSolverTraits
PoseLandmarkMatrixType	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      typedef typename Traits::PoseLandmarkMatrixType PoseLandmarkMatrixType;$/;"	t	class:g2o::BlockSolver
PoseLandmarkMatrixType	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^    typedef Matrix<double, PoseDim, LandmarkDim> PoseLandmarkMatrixType;$/;"	t	struct:g2o::BlockSolverTraits
PoseLandmarkMatrixType	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^    typedef MatrixXd PoseLandmarkMatrixType;$/;"	t	struct:g2o::BlockSolverTraits
PoseMatrixType	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      typedef typename Traits::PoseMatrixType PoseMatrixType;$/;"	t	class:g2o::BlockSolver
PoseMatrixType	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^    typedef Matrix<double, PoseDim, PoseDim> PoseMatrixType;$/;"	t	struct:g2o::BlockSolverTraits
PoseMatrixType	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^    typedef MatrixXd PoseMatrixType;$/;"	t	struct:g2o::BlockSolverTraits
PoseOptimization	orb_slam2/src/Optimizer.cc	/^int Optimizer::PoseOptimization(Frame *pFrame)$/;"	f	class:ORB_SLAM2::Optimizer
PoseVectorType	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      typedef typename Traits::PoseVectorType PoseVectorType;$/;"	t	class:g2o::BlockSolver
PoseVectorType	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^    typedef Matrix<double, PoseDim, 1> PoseVectorType;$/;"	t	struct:g2o::BlockSolverTraits
PoseVectorType	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^    typedef VectorXd PoseVectorType;$/;"	t	struct:g2o::BlockSolverTraits
PredictScale	orb_slam2/src/MapPoint.cc	/^int MapPoint::PredictScale(const float &currentDist, Frame* pF)$/;"	f	class:ORB_SLAM2::MapPoint
PredictScale	orb_slam2/src/MapPoint.cc	/^int MapPoint::PredictScale(const float &currentDist, KeyFrame* pKF)$/;"	f	class:ORB_SLAM2::MapPoint
PriorityQueue	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^      class PriorityQueue : public std::multimap<double, AdjacencyMapEntry*> {$/;"	c	class:g2o::EstimatePropagator
ProcessNewKeyFrame	orb_slam2/src/LocalMapping.cc	/^void LocalMapping::ProcessNewKeyFrame()$/;"	f	class:ORB_SLAM2::LocalMapping
Project	orb_slam2/src/Sim3Solver.cc	/^void Sim3Solver::Project(const vector<cv::Mat> &vP3Dw, vector<cv::Mat> &vP2D, cv::Mat Tcw, cv::Mat K)$/;"	f	class:ORB_SLAM2::Sim3Solver
PropagateAction	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^      struct PropagateAction {$/;"	s	class:g2o::EstimatePropagator
PropagateCost	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^      typedef EstimatePropagatorCost PropagateCost;$/;"	t	class:g2o::EstimatePropagator
Property	orb_slam2/Thirdparty/g2o/g2o/stuff/property.h	/^      Property(const std::string& name_): BaseProperty(name_){}$/;"	f	class:g2o::Property
Property	orb_slam2/Thirdparty/g2o/g2o/stuff/property.h	/^      Property(const std::string& name_, const T& v): BaseProperty(name_), _value(v){}$/;"	f	class:g2o::Property
Property	orb_slam2/Thirdparty/g2o/g2o/stuff/property.h	/^  class Property: public BaseProperty {$/;"	c	namespace:g2o
PropertyMap	orb_slam2/Thirdparty/g2o/g2o/stuff/property.h	/^  class  PropertyMap : protected std::map<std::string, BaseProperty*>$/;"	c	namespace:g2o
PropertyMapConstIterator	orb_slam2/Thirdparty/g2o/g2o/stuff/property.h	/^      typedef BaseClass::const_iterator                   PropertyMapConstIterator;$/;"	t	class:g2o::PropertyMap
PropertyMapIterator	orb_slam2/Thirdparty/g2o/g2o/stuff/property.h	/^      typedef BaseClass::iterator                         PropertyMapIterator;$/;"	t	class:g2o::PropertyMap
PublishGBAStatus	ros/src/Node.cc	/^void Node::PublishGBAStatus (bool gba_status) {$/;"	f	class:Node
PublishMapPoints	ros/src/Node.cc	/^void Node::PublishMapPoints (std::vector<ORB_SLAM2::MapPoint*> map_points) {$/;"	f	class:Node
PublishPositionAsPoseStamped	ros/src/Node.cc	/^void Node::PublishPositionAsPoseStamped (cv::Mat position) {$/;"	f	class:Node
PublishPositionAsTransform	ros/src/Node.cc	/^void Node::PublishPositionAsTransform (cv::Mat position) {$/;"	f	class:Node
PublishRenderedImage	ros/src/Node.cc	/^void Node::PublishRenderedImage (cv::Mat image) {$/;"	f	class:Node
RAD2DEG	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	35;"	d
RGB	orb_slam2/include/Tracking.h	/^    bool RGB;$/;"	m	struct:ORB_SLAM2::ORBParameters
RGBD	orb_slam2/include/System.h	/^        RGBD=2$/;"	e	enum:ORB_SLAM2::System::eSensor
RGBDNode	ros/include/RGBDNode.h	/^class RGBDNode : public Node$/;"	c
RGBDNode	ros/src/RGBDNode.cc	/^RGBDNode::RGBDNode (const ORB_SLAM2::System::eSensor sensor, ros::NodeHandle &node_handle, image_transport::ImageTransport &image_transport) : Node (sensor, node_handle, image_transport) {$/;"	f	class:RGBDNode
RadiusByViewingCos	orb_slam2/src/ORBmatcher.cc	/^float ORBmatcher::RadiusByViewingCos(const float &viewCos)$/;"	f	class:ORB_SLAM2::ORBmatcher
Random	orb_slam2/Thirdparty/DBoW2/DUtils/Random.h	/^class Random$/;"	c	namespace:DUtils
RandomGaussianValue	orb_slam2/Thirdparty/DBoW2/DUtils/Random.h	/^	static T RandomGaussianValue(T mean, T sigma)$/;"	f	class:DUtils::Random
RandomInt	orb_slam2/Thirdparty/DBoW2/DUtils/Random.cpp	/^int DUtils::Random::RandomInt(int min, int max){$/;"	f	class:DUtils::Random
RandomValue	orb_slam2/Thirdparty/DBoW2/DUtils/Random.h	/^	static T RandomValue(){$/;"	f	class:DUtils::Random
RandomValue	orb_slam2/Thirdparty/DBoW2/DUtils/Random.h	/^	static T RandomValue(T min, T max){$/;"	f	class:DUtils::Random
ReconstructF	orb_slam2/src/Initializer.cc	/^bool Initializer::ReconstructF(vector<bool> &vbMatchesInliers, cv::Mat &F21, cv::Mat &K,$/;"	f	class:ORB_SLAM2::Initializer
ReconstructH	orb_slam2/src/Initializer.cc	/^bool Initializer::ReconstructH(vector<bool> &vbMatchesInliers, cv::Mat &H21, cv::Mat &K,$/;"	f	class:ORB_SLAM2::Initializer
Refine	orb_slam2/src/PnPsolver.cc	/^bool PnPsolver::Refine()$/;"	f	class:ORB_SLAM2::PnPsolver
RegisterActionProxy	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^      RegisterActionProxy()$/;"	f	class:g2o::RegisterActionProxy
RegisterActionProxy	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^  template<typename T> class RegisterActionProxy$/;"	c	namespace:g2o
RegisterOptimizationAlgorithmProxy	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.h	/^      RegisterOptimizationAlgorithmProxy(AbstractOptimizationAlgorithmCreator* c)$/;"	f	class:g2o::RegisterOptimizationAlgorithmProxy
RegisterOptimizationAlgorithmProxy	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.h	/^  class RegisterOptimizationAlgorithmProxy$/;"	c	namespace:g2o
RegisterRobustKernelProxy	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.h	/^      RegisterRobustKernelProxy(const std::string& name) : _name(name)$/;"	f	class:g2o::RegisterRobustKernelProxy
RegisterRobustKernelProxy	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.h	/^  class RegisterRobustKernelProxy$/;"	c	namespace:g2o
RegisterTypeProxy	orb_slam2/Thirdparty/g2o/g2o/core/factory.h	/^      RegisterTypeProxy(const std::string& name) : _name(name)$/;"	f	class:g2o::RegisterTypeProxy
RegisterTypeProxy	orb_slam2/Thirdparty/g2o/g2o/core/factory.h	/^  class RegisterTypeProxy$/;"	c	namespace:g2o
Release	orb_slam2/src/LocalMapping.cc	/^void LocalMapping::Release()$/;"	f	class:ORB_SLAM2::LocalMapping
Relocalization	orb_slam2/src/Tracking.cc	/^bool Tracking::Relocalization()$/;"	f	class:ORB_SLAM2::Tracking
Replace	orb_slam2/src/MapPoint.cc	/^void MapPoint::Replace(MapPoint* pMP)$/;"	f	class:ORB_SLAM2::MapPoint
ReplaceMapPointMatch	orb_slam2/src/KeyFrame.cc	/^void KeyFrame::ReplaceMapPointMatch(const size_t &idx, MapPoint* pMP)$/;"	f	class:ORB_SLAM2::KeyFrame
RequestFinish	orb_slam2/src/LocalMapping.cc	/^void LocalMapping::RequestFinish()$/;"	f	class:ORB_SLAM2::LocalMapping
RequestFinish	orb_slam2/src/LoopClosing.cc	/^void LoopClosing::RequestFinish()$/;"	f	class:ORB_SLAM2::LoopClosing
RequestReset	orb_slam2/src/LocalMapping.cc	/^void LocalMapping::RequestReset()$/;"	f	class:ORB_SLAM2::LocalMapping
RequestReset	orb_slam2/src/LoopClosing.cc	/^void LoopClosing::RequestReset()$/;"	f	class:ORB_SLAM2::LoopClosing
RequestStop	orb_slam2/src/LocalMapping.cc	/^void LocalMapping::RequestStop()$/;"	f	class:ORB_SLAM2::LocalMapping
Reset	orb_slam2/src/System.cc	/^void System::Reset()$/;"	f	class:ORB_SLAM2::System
Reset	orb_slam2/src/Tracking.cc	/^void Tracking::Reset()$/;"	f	class:ORB_SLAM2::Tracking
ResetIfRequested	orb_slam2/src/LocalMapping.cc	/^void LocalMapping::ResetIfRequested()$/;"	f	class:ORB_SLAM2::LocalMapping
ResetIfRequested	orb_slam2/src/LoopClosing.cc	/^void LoopClosing::ResetIfRequested()$/;"	f	class:ORB_SLAM2::LoopClosing
RobustKernel	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel.cpp	/^RobustKernel::RobustKernel() :$/;"	f	class:g2o::RobustKernel
RobustKernel	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel.cpp	/^RobustKernel::RobustKernel(double delta) :$/;"	f	class:g2o::RobustKernel
RobustKernel	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel.h	/^  class  RobustKernel$/;"	c	namespace:g2o
RobustKernelCauchy	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.h	/^  class  RobustKernelCauchy : public RobustKernel$/;"	c	namespace:g2o
RobustKernelCreator	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.h	/^  class RobustKernelCreator : public AbstractRobustKernelCreator$/;"	c	namespace:g2o
RobustKernelDCS	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.h	/^  class  RobustKernelDCS : public RobustKernel$/;"	c	namespace:g2o
RobustKernelFactory	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.cpp	/^RobustKernelFactory::RobustKernelFactory()$/;"	f	class:g2o::RobustKernelFactory
RobustKernelFactory	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.h	/^  class  RobustKernelFactory$/;"	c	namespace:g2o
RobustKernelHuber	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.h	/^  class  RobustKernelHuber : public RobustKernel$/;"	c	namespace:g2o
RobustKernelPseudoHuber	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.h	/^  class  RobustKernelPseudoHuber : public RobustKernel$/;"	c	namespace:g2o
RobustKernelPtr	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel.h	/^  typedef std::tr1::shared_ptr<RobustKernel> RobustKernelPtr;$/;"	t	namespace:g2o
RobustKernelSaturated	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.h	/^  class  RobustKernelSaturated : public RobustKernel$/;"	c	namespace:g2o
RobustKernelScaleDelta	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.cpp	/^RobustKernelScaleDelta::RobustKernelScaleDelta(const RobustKernelPtr& kernel, double delta) :$/;"	f	class:g2o::RobustKernelScaleDelta
RobustKernelScaleDelta	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.cpp	/^RobustKernelScaleDelta::RobustKernelScaleDelta(double delta) :$/;"	f	class:g2o::RobustKernelScaleDelta
RobustKernelScaleDelta	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.h	/^  class  RobustKernelScaleDelta : public RobustKernel$/;"	c	namespace:g2o
RobustKernelTukey	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.h	/^  class  RobustKernelTukey : public RobustKernel$/;"	c	namespace:g2o
RowBlock	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^        RowBlock() : row(-1), block(0) {}$/;"	f	struct:g2o::SparseBlockMatrixCCS::RowBlock
RowBlock	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^        RowBlock(int r, MatrixType* b) : row(r), block(b) {}$/;"	f	struct:g2o::SparseBlockMatrixCCS::RowBlock
RowBlock	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      struct RowBlock$/;"	s	class:g2o::SparseBlockMatrixCCS
Run	orb_slam2/src/LocalMapping.cc	/^void LocalMapping::Run()$/;"	f	class:ORB_SLAM2::LocalMapping
Run	orb_slam2/src/LoopClosing.cc	/^void LoopClosing::Run()$/;"	f	class:ORB_SLAM2::LoopClosing
RunGlobalBundleAdjustment	orb_slam2/src/LoopClosing.cc	/^void LoopClosing::RunGlobalBundleAdjustment(unsigned long nLoopKF)$/;"	f	class:ORB_SLAM2::LoopClosing
SE3Quat	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^        explicit SE3Quat(const MatrixBase<Derived>& v)$/;"	f	class:g2o::SE3Quat
SE3Quat	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^      SE3Quat(){$/;"	f	class:g2o::SE3Quat
SE3Quat	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^      SE3Quat(const Matrix3d& R, const Vector3d& t):_r(Quaterniond(R)),_t(t){ $/;"	f	class:g2o::SE3Quat
SE3Quat	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^      SE3Quat(const Quaterniond& q, const Vector3d& t):_r(q),_t(t){$/;"	f	class:g2o::SE3Quat
SE3Quat	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^  class SE3Quat {$/;"	c	namespace:g2o
SIM3SOLVER_H	orb_slam2/include/Sim3Solver.h	23;"	d
STEP_DL	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.h	/^        STEP_SD, STEP_GN, STEP_DL$/;"	e	enum:g2o::OptimizationAlgorithmDogleg::__anon2
STEP_GN	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.h	/^        STEP_SD, STEP_GN, STEP_DL$/;"	e	enum:g2o::OptimizationAlgorithmDogleg::__anon2
STEP_SD	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.h	/^        STEP_SD, STEP_GN, STEP_DL$/;"	e	enum:g2o::OptimizationAlgorithmDogleg::__anon2
STEP_UNDEFINED	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.h	/^        STEP_UNDEFINED,$/;"	e	enum:g2o::OptimizationAlgorithmDogleg::__anon2
STEREO	orb_slam2/include/System.h	/^        STEREO=1,$/;"	e	enum:ORB_SLAM2::System::eSensor
SYSTEM_H	orb_slam2/include/System.h	23;"	d
SYSTEM_NOT_READY	orb_slam2/include/Tracking.h	/^        SYSTEM_NOT_READY=-1,$/;"	e	enum:ORB_SLAM2::Tracking::eTrackingState
SaveKeyFrameTrajectoryTUM	orb_slam2/src/System.cc	/^void System::SaveKeyFrameTrajectoryTUM(const string &filename)$/;"	f	class:ORB_SLAM2::System
SaveMap	orb_slam2/src/System.cc	/^bool System::SaveMap(const string &filename) {$/;"	f	class:ORB_SLAM2::System
SaveMapSrv	ros/src/Node.cc	/^bool Node::SaveMapSrv (orb_slam2_ros::SaveMap::Request &req, orb_slam2_ros::SaveMap::Response &res) {$/;"	f	class:Node
SaveTrajectoryKITTI	orb_slam2/src/System.cc	/^void System::SaveTrajectoryKITTI(const string &filename)$/;"	f	class:ORB_SLAM2::System
SaveTrajectoryTUM	orb_slam2/src/System.cc	/^void System::SaveTrajectoryTUM(const string &filename)$/;"	f	class:ORB_SLAM2::System
ScopeTime	orb_slam2/Thirdparty/g2o/g2o/stuff/timeutil.cpp	/^ScopeTime::ScopeTime(const char* title) : _title(title), _startTime(get_monotonic_time()) {}$/;"	f	class:g2o::ScopeTime
ScopeTime	orb_slam2/Thirdparty/g2o/g2o/stuff/timeutil.h	/^class  ScopeTime {$/;"	c	namespace:g2o
ScopedOpenMPMutex	orb_slam2/Thirdparty/g2o/g2o/core/openmp_mutex.h	/^      explicit ScopedOpenMPMutex(OpenMPMutex* mutex) : _mutex(mutex) { _mutex->lock(); }$/;"	f	class:g2o::ScopedOpenMPMutex
ScopedOpenMPMutex	orb_slam2/Thirdparty/g2o/g2o/core/openmp_mutex.h	/^  class ScopedOpenMPMutex$/;"	c	namespace:g2o
ScoringType	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.h	/^enum ScoringType$/;"	g	namespace:DBoW2
SearchAndFuse	orb_slam2/src/LoopClosing.cc	/^void LoopClosing::SearchAndFuse(const KeyFrameAndPose &CorrectedPosesMap)$/;"	f	class:ORB_SLAM2::LoopClosing
SearchByBoW	orb_slam2/src/ORBmatcher.cc	/^int ORBmatcher::SearchByBoW(KeyFrame *pKF1, KeyFrame *pKF2, vector<MapPoint *> &vpMatches12)$/;"	f	class:ORB_SLAM2::ORBmatcher
SearchByBoW	orb_slam2/src/ORBmatcher.cc	/^int ORBmatcher::SearchByBoW(KeyFrame* pKF,Frame &F, vector<MapPoint*> &vpMapPointMatches)$/;"	f	class:ORB_SLAM2::ORBmatcher
SearchByProjection	orb_slam2/src/ORBmatcher.cc	/^int ORBmatcher::SearchByProjection(Frame &CurrentFrame, KeyFrame *pKF, const set<MapPoint*> &sAlreadyFound, const float th , const int ORBdist)$/;"	f	class:ORB_SLAM2::ORBmatcher
SearchByProjection	orb_slam2/src/ORBmatcher.cc	/^int ORBmatcher::SearchByProjection(Frame &CurrentFrame, const Frame &LastFrame, const float th, const bool bMono)$/;"	f	class:ORB_SLAM2::ORBmatcher
SearchByProjection	orb_slam2/src/ORBmatcher.cc	/^int ORBmatcher::SearchByProjection(Frame &F, const vector<MapPoint*> &vpMapPoints, const float th)$/;"	f	class:ORB_SLAM2::ORBmatcher
SearchByProjection	orb_slam2/src/ORBmatcher.cc	/^int ORBmatcher::SearchByProjection(KeyFrame* pKF, cv::Mat Scw, const vector<MapPoint*> &vpPoints, vector<MapPoint*> &vpMatched, int th)$/;"	f	class:ORB_SLAM2::ORBmatcher
SearchBySim3	orb_slam2/src/ORBmatcher.cc	/^int ORBmatcher::SearchBySim3(KeyFrame *pKF1, KeyFrame *pKF2, vector<MapPoint*> &vpMatches12,$/;"	f	class:ORB_SLAM2::ORBmatcher
SearchForInitialization	orb_slam2/src/ORBmatcher.cc	/^int ORBmatcher::SearchForInitialization(Frame &F1, Frame &F2, vector<cv::Point2f> &vbPrevMatched, vector<int> &vnMatches12, int windowSize)$/;"	f	class:ORB_SLAM2::ORBmatcher
SearchForTriangulation	orb_slam2/src/ORBmatcher.cc	/^int ORBmatcher::SearchForTriangulation(KeyFrame *pKF1, KeyFrame *pKF2, cv::Mat F12,$/;"	f	class:ORB_SLAM2::ORBmatcher
SearchInNeighbors	orb_slam2/src/LocalMapping.cc	/^void LocalMapping::SearchInNeighbors()$/;"	f	class:ORB_SLAM2::LocalMapping
SearchLocalPoints	orb_slam2/src/Tracking.cc	/^void Tracking::SearchLocalPoints()$/;"	f	class:ORB_SLAM2::Tracking
SeedRand	orb_slam2/Thirdparty/DBoW2/DUtils/Random.cpp	/^void DUtils::Random::SeedRand(){$/;"	f	class:DUtils::Random
SeedRand	orb_slam2/Thirdparty/DBoW2/DUtils/Random.cpp	/^void DUtils::Random::SeedRand(int seed)$/;"	f	class:DUtils::Random
SeedRandOnce	orb_slam2/Thirdparty/DBoW2/DUtils/Random.cpp	/^void DUtils::Random::SeedRandOnce()$/;"	f	class:DUtils::Random
SeedRandOnce	orb_slam2/Thirdparty/DBoW2/DUtils/Random.cpp	/^void DUtils::Random::SeedRandOnce(int seed)$/;"	f	class:DUtils::Random
SetAcceptKeyFrames	orb_slam2/src/LocalMapping.cc	/^void LocalMapping::SetAcceptKeyFrames(bool flag)$/;"	f	class:ORB_SLAM2::LocalMapping
SetBadFlag	orb_slam2/src/KeyFrame.cc	/^void KeyFrame::SetBadFlag()$/;"	f	class:ORB_SLAM2::KeyFrame
SetBadFlag	orb_slam2/src/MapPoint.cc	/^void MapPoint::SetBadFlag()$/;"	f	class:ORB_SLAM2::MapPoint
SetCallStackSize	orb_slam2/src/System.cc	/^bool System::SetCallStackSize (const rlim_t kNewStackSize) {$/;"	f	class:ORB_SLAM2::System
SetErase	orb_slam2/src/KeyFrame.cc	/^void KeyFrame::SetErase()$/;"	f	class:ORB_SLAM2::KeyFrame
SetFinish	orb_slam2/src/LocalMapping.cc	/^void LocalMapping::SetFinish()$/;"	f	class:ORB_SLAM2::LocalMapping
SetFinish	orb_slam2/src/LoopClosing.cc	/^void LoopClosing::SetFinish()$/;"	f	class:ORB_SLAM2::LoopClosing
SetLocalMapper	orb_slam2/src/LoopClosing.cc	/^void LoopClosing::SetLocalMapper(LocalMapping *pLocalMapper)$/;"	f	class:ORB_SLAM2::LoopClosing
SetLocalMapper	orb_slam2/src/Tracking.cc	/^void Tracking::SetLocalMapper(LocalMapping *pLocalMapper)$/;"	f	class:ORB_SLAM2::Tracking
SetLoopCloser	orb_slam2/src/LocalMapping.cc	/^void LocalMapping::SetLoopCloser(LoopClosing* pLoopCloser)$/;"	f	class:ORB_SLAM2::LocalMapping
SetLoopClosing	orb_slam2/src/Tracking.cc	/^void Tracking::SetLoopClosing(LoopClosing *pLoopClosing)$/;"	f	class:ORB_SLAM2::Tracking
SetMinimumKeyFrames	orb_slam2/include/Tracking.h	/^    void SetMinimumKeyFrames (int min_num_kf) {mnMinimumKeyFrames = min_num_kf;}$/;"	f	class:ORB_SLAM2::Tracking
SetMinimumKeyFrames	orb_slam2/src/System.cc	/^void System::SetMinimumKeyFrames (int min_num_kf) {$/;"	f	class:ORB_SLAM2::System
SetNotErase	orb_slam2/src/KeyFrame.cc	/^void KeyFrame::SetNotErase()$/;"	f	class:ORB_SLAM2::KeyFrame
SetNotStop	orb_slam2/src/LocalMapping.cc	/^bool LocalMapping::SetNotStop(bool flag)$/;"	f	class:ORB_SLAM2::LocalMapping
SetORBvocabulary	orb_slam2/include/KeyFrame.h	/^    void SetORBvocabulary(ORBVocabulary *porbv) {mpORBvocabulary=porbv;}$/;"	f	class:ORB_SLAM2::KeyFrame
SetORBvocabulary	orb_slam2/include/KeyFrameDatabase.h	/^   void SetORBvocabulary(ORBVocabulary *porbv) {mpVoc=porbv;}$/;"	f	class:ORB_SLAM2::KeyFrameDatabase
SetPose	orb_slam2/src/Frame.cc	/^void Frame::SetPose(cv::Mat Tcw)$/;"	f	class:ORB_SLAM2::Frame
SetPose	orb_slam2/src/KeyFrame.cc	/^void KeyFrame::SetPose(const cv::Mat &Tcw_)$/;"	f	class:ORB_SLAM2::KeyFrame
SetRansacParameters	orb_slam2/src/PnPsolver.cc	/^void PnPsolver::SetRansacParameters(double probability, int minInliers, int maxIterations, int minSet, float epsilon, float th2)$/;"	f	class:ORB_SLAM2::PnPsolver
SetRansacParameters	orb_slam2/src/Sim3Solver.cc	/^void Sim3Solver::SetRansacParameters(double probability, int minInliers, int maxIterations)$/;"	f	class:ORB_SLAM2::Sim3Solver
SetReferenceMapPoints	orb_slam2/src/Map.cc	/^void Map::SetReferenceMapPoints(const vector<MapPoint *> &vpMPs)$/;"	f	class:ORB_SLAM2::Map
SetTracker	orb_slam2/src/LocalMapping.cc	/^void LocalMapping::SetTracker(Tracking *pTracker)$/;"	f	class:ORB_SLAM2::LocalMapping
SetTracker	orb_slam2/src/LoopClosing.cc	/^void LoopClosing::SetTracker(Tracking *pTracker)$/;"	f	class:ORB_SLAM2::LoopClosing
SetWorldPos	orb_slam2/src/MapPoint.cc	/^void MapPoint::SetWorldPos(const cv::Mat &Pos)$/;"	f	class:ORB_SLAM2::MapPoint
Shutdown	orb_slam2/src/System.cc	/^void System::Shutdown()$/;"	f	class:ORB_SLAM2::System
Sim3	orb_slam2/Thirdparty/g2o/g2o/types/sim3.h	/^    Sim3()$/;"	f	struct:g2o::Sim3
Sim3	orb_slam2/Thirdparty/g2o/g2o/types/sim3.h	/^    Sim3(const Matrix3d & R, const Vector3d & t, double s)$/;"	f	struct:g2o::Sim3
Sim3	orb_slam2/Thirdparty/g2o/g2o/types/sim3.h	/^    Sim3(const Quaterniond & r, const Vector3d & t, double s)$/;"	f	struct:g2o::Sim3
Sim3	orb_slam2/Thirdparty/g2o/g2o/types/sim3.h	/^    Sim3(const Vector7d & update)$/;"	f	struct:g2o::Sim3
Sim3	orb_slam2/Thirdparty/g2o/g2o/types/sim3.h	/^  struct Sim3$/;"	s	namespace:g2o
Sim3Solver	orb_slam2/include/Sim3Solver.h	/^class Sim3Solver$/;"	c	namespace:ORB_SLAM2
Sim3Solver	orb_slam2/src/Sim3Solver.cc	/^Sim3Solver::Sim3Solver(KeyFrame *pKF1, KeyFrame *pKF2, const vector<MapPoint *> &vpMatched12, const bool bFixScale):$/;"	f	class:ORB_SLAM2::Sim3Solver
SkewSymmetricMatrix	orb_slam2/src/LocalMapping.cc	/^cv::Mat LocalMapping::SkewSymmetricMatrix(const cv::Mat &v)$/;"	f	class:ORB_SLAM2::LocalMapping
Solver	orb_slam2/Thirdparty/g2o/g2o/core/solver.cpp	/^Solver::Solver() :$/;"	f	class:g2o::Solver
Solver	orb_slam2/Thirdparty/g2o/g2o/core/solver.h	/^      Solver(const Solver&) { }$/;"	f	class:g2o::Solver
Solver	orb_slam2/Thirdparty/g2o/g2o/core/solver.h	/^  class  Solver$/;"	c	namespace:g2o
SolverResult	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm.h	/^      enum  SolverResult {Terminate=2, OK=1, Fail=-1};$/;"	g	class:g2o::OptimizationAlgorithm
SparseBlockMatrix	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.h	/^class SparseBlockMatrix {$/;"	c	namespace:g2o
SparseBlockMatrix	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^  SparseBlockMatrix<MatrixType>::SparseBlockMatrix( ):$/;"	f	class:g2o::SparseBlockMatrix
SparseBlockMatrix	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^  SparseBlockMatrix<MatrixType>::SparseBlockMatrix( const int * rbi, const int* cbi, int rb, int cb, bool hasStorage):$/;"	f	class:g2o::SparseBlockMatrix
SparseBlockMatrixCCS	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      SparseBlockMatrixCCS(const std::vector<int>& rowIndices, const std::vector<int>& colIndices) :$/;"	f	class:g2o::SparseBlockMatrixCCS
SparseBlockMatrixCCS	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^  class SparseBlockMatrixCCS$/;"	c	namespace:g2o
SparseBlockMatrixDiagonal	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_diagonal.h	/^      SparseBlockMatrixDiagonal(const std::vector<int>& blockIndices) :$/;"	f	class:g2o::SparseBlockMatrixDiagonal
SparseBlockMatrixDiagonal	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_diagonal.h	/^  class SparseBlockMatrixDiagonal$/;"	c	namespace:g2o
SparseBlockMatrixHashMap	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      SparseBlockMatrixHashMap(const std::vector<int>& rowIndices, const std::vector<int>& colIndices) :$/;"	f	class:g2o::SparseBlockMatrixHashMap
SparseBlockMatrixHashMap	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^  class SparseBlockMatrixHashMap$/;"	c	namespace:g2o
SparseBlockMatrixX	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_test.cpp	/^SparseBlockMatrixX;$/;"	t	file:
SparseBlockMatrixXd	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.h	/^  typedef SparseBlockMatrix<MatrixXd> SparseBlockMatrixXd;   $/;"	t	namespace:g2o
SparseColumn	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      typedef std::tr1::unordered_map<int, MatrixType*> SparseColumn;$/;"	t	class:g2o::SparseBlockMatrixHashMap
SparseColumn	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      typedef std::vector<RowBlock>      SparseColumn;$/;"	t	class:g2o::SparseBlockMatrixCCS
SparseMatrix	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_eigen.h	/^    typedef Eigen::SparseMatrix<double, Eigen::ColMajor> SparseMatrix;$/;"	t	class:g2o::LinearSolverEigen
SparseMatrixBlock	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.h	/^    typedef MatrixType SparseMatrixBlock;$/;"	t	class:g2o::SparseBlockMatrix
SparseMatrixBlock	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      typedef MatrixType SparseMatrixBlock;$/;"	t	class:g2o::SparseBlockMatrixCCS
SparseMatrixBlock	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      typedef MatrixType SparseMatrixBlock;$/;"	t	class:g2o::SparseBlockMatrixHashMap
SparseMatrixBlock	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_diagonal.h	/^      typedef MatrixType SparseMatrixBlock;$/;"	t	class:g2o::SparseBlockMatrixDiagonal
SparseOptimizer	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  SparseOptimizer::SparseOptimizer() :$/;"	f	class:g2o::SparseOptimizer
SparseOptimizer	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	/^  class  SparseOptimizer : public OptimizableGraph {$/;"	c	namespace:g2o
StereoInitialization	orb_slam2/src/Tracking.cc	/^void Tracking::StereoInitialization()$/;"	f	class:ORB_SLAM2::Tracking
StereoNode	ros/include/StereoNode.h	/^class StereoNode : public Node$/;"	c
StereoNode	ros/src/StereoNode.cc	/^StereoNode::StereoNode (const ORB_SLAM2::System::eSensor sensor, ros::NodeHandle &node_handle, image_transport::ImageTransport &image_transport) : Node (sensor, node_handle, image_transport) {$/;"	f	class:StereoNode
Stop	orb_slam2/src/LocalMapping.cc	/^bool LocalMapping::Stop()$/;"	f	class:ORB_SLAM2::LocalMapping
StringProperty	orb_slam2/Thirdparty/g2o/g2o/stuff/property.h	/^  typedef Property<std::string> StringProperty;$/;"	t	namespace:g2o
System	orb_slam2/include/System.h	/^class System$/;"	c	namespace:ORB_SLAM2
System	orb_slam2/src/System.cc	/^System::System(const string strVocFile, const eSensor sensor, ORBParameters& parameters,$/;"	f	class:ORB_SLAM2::System
TDescriptor	orb_slam2/Thirdparty/DBoW2/DBoW2/FORB.h	/^  typedef cv::Mat TDescriptor; \/\/ CV_8U$/;"	t	class:DBoW2::FORB
TF	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.h	/^  TF,$/;"	e	enum:DBoW2::WeightingType
TF_IDF	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.h	/^  TF_IDF,$/;"	e	enum:DBoW2::WeightingType
TH_HIGH	orb_slam2/include/ORBmatcher.h	/^    static const int TH_HIGH;$/;"	m	class:ORB_SLAM2::ORBmatcher
TH_HIGH	orb_slam2/src/ORBmatcher.cc	/^const int ORBmatcher::TH_HIGH = 100;$/;"	m	class:ORB_SLAM2::ORBmatcher	file:
TH_LOW	orb_slam2/include/ORBmatcher.h	/^    static const int TH_LOW;$/;"	m	class:ORB_SLAM2::ORBmatcher
TH_LOW	orb_slam2/src/ORBmatcher.cc	/^const int ORBmatcher::TH_LOW = 50;$/;"	m	class:ORB_SLAM2::ORBmatcher	file:
TRACKING_H	orb_slam2/include/Tracking.h	23;"	d
TagLookup	orb_slam2/Thirdparty/g2o/g2o/core/factory.h	/^      typedef std::map<std::string, std::string>                      TagLookup;$/;"	t	class:g2o::Factory
Tcw	orb_slam2/include/KeyFrame.h	/^    cv::Mat Tcw;$/;"	m	class:ORB_SLAM2::KeyFrame
TemplatedVocabulary	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^TemplatedVocabulary<TDescriptor,F>::TemplatedVocabulary$/;"	f	class:DBoW2::TemplatedVocabulary
TemplatedVocabulary	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^TemplatedVocabulary<TDescriptor,F>::TemplatedVocabulary($/;"	f	class:DBoW2::TemplatedVocabulary
TemplatedVocabulary	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^class TemplatedVocabulary$/;"	c	namespace:DBoW2
Terminate	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm.h	/^      enum  SolverResult {Terminate=2, OK=1, Fail=-1};$/;"	e	enum:g2o::OptimizationAlgorithm::SolverResult
Timestamp	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.cpp	/^Timestamp::Timestamp(Timestamp::tOptions option)$/;"	f	class:Timestamp
Timestamp	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.h	/^class Timestamp$/;"	c	namespace:DUtils
Track	orb_slam2/src/Tracking.cc	/^void Tracking::Track()$/;"	f	class:ORB_SLAM2::Tracking
TrackLocalMap	orb_slam2/src/Tracking.cc	/^bool Tracking::TrackLocalMap()$/;"	f	class:ORB_SLAM2::Tracking
TrackMonocular	orb_slam2/src/System.cc	/^void System::TrackMonocular(const cv::Mat &im, const double &timestamp)$/;"	f	class:ORB_SLAM2::System
TrackRGBD	orb_slam2/src/System.cc	/^void System::TrackRGBD(const cv::Mat &im, const cv::Mat &depthmap, const double &timestamp)$/;"	f	class:ORB_SLAM2::System
TrackReferenceKeyFrame	orb_slam2/src/Tracking.cc	/^bool Tracking::TrackReferenceKeyFrame()$/;"	f	class:ORB_SLAM2::Tracking
TrackStereo	orb_slam2/src/System.cc	/^void System::TrackStereo(const cv::Mat &imLeft, const cv::Mat &imRight, const double &timestamp)$/;"	f	class:ORB_SLAM2::System
TrackWithMotionModel	orb_slam2/src/Tracking.cc	/^bool Tracking::TrackWithMotionModel()$/;"	f	class:ORB_SLAM2::Tracking
TrackedMapPoints	orb_slam2/src/KeyFrame.cc	/^int KeyFrame::TrackedMapPoints(const int &minObs)$/;"	f	class:ORB_SLAM2::KeyFrame
Tracking	orb_slam2/include/Tracking.h	/^class Tracking$/;"	c	namespace:ORB_SLAM2
Tracking	orb_slam2/src/Tracking.cc	/^Tracking::Tracking(System *pSys, ORBVocabulary* pVoc, FrameDrawer *pFrameDrawer,$/;"	f	class:ORB_SLAM2::Tracking
TransformFromMat	ros/src/Node.cc	/^tf2::Transform Node::TransformFromMat (cv::Mat position_mat) {$/;"	f	class:Node
TransformToTarget	ros/src/Node.cc	/^tf2::Transform Node::TransformToTarget (tf2::Transform tf_in, std::string frame_in, std::string frame_target) {$/;"	f	class:Node
TreeAction	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.h	/^    struct  TreeAction {$/;"	s	struct:g2o::HyperDijkstra
Triangulate	orb_slam2/src/Initializer.cc	/^void Initializer::Triangulate(const cv::KeyPoint &kp1, const cv::KeyPoint &kp2, const cv::Mat &P1, const cv::Mat &P2, cv::Mat &x3D)$/;"	f	class:ORB_SLAM2::Initializer
Triplet	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_eigen.h	/^    typedef Eigen::Triplet<double> Triplet;$/;"	t	class:g2o::LinearSolverEigen
TripletColSort	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^    struct TripletColSort$/;"	s	namespace:g2o::__anon3
TripletEntry	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^      TripletEntry(int r_, int c_, double x_) : r(r_), c(c_), x(x_) {}$/;"	f	struct:g2o::__anon3::TripletEntry
TripletEntry	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^    struct TripletEntry$/;"	s	namespace:g2o::__anon3
Twc	orb_slam2/include/KeyFrame.h	/^    cv::Mat Twc;$/;"	m	class:ORB_SLAM2::KeyFrame
UL	orb_slam2/include/ORBextractor.h	/^    cv::Point2i UL, UR, BL, BR;$/;"	m	class:ORB_SLAM2::ExtractorNode
UR	orb_slam2/include/ORBextractor.h	/^    cv::Point2i UL, UR, BL, BR;$/;"	m	class:ORB_SLAM2::ExtractorNode
UndistortKeyPoints	orb_slam2/src/Frame.cc	/^void Frame::UndistortKeyPoints()$/;"	f	class:ORB_SLAM2::Frame
UniformCostFunction	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.h	/^  struct  UniformCostFunction: public HyperDijkstra::CostFunction {$/;"	s	namespace:g2o
UnprojectStereo	orb_slam2/src/Frame.cc	/^cv::Mat Frame::UnprojectStereo(const int &i)$/;"	f	class:ORB_SLAM2::Frame
UnprojectStereo	orb_slam2/src/KeyFrame.cc	/^cv::Mat KeyFrame::UnprojectStereo(int i)$/;"	f	class:ORB_SLAM2::KeyFrame
UnrepeatedRandomizer	orb_slam2/Thirdparty/DBoW2/DUtils/Random.cpp	/^DUtils::Random::UnrepeatedRandomizer::UnrepeatedRandomizer$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
UnrepeatedRandomizer	orb_slam2/Thirdparty/DBoW2/DUtils/Random.cpp	/^DUtils::Random::UnrepeatedRandomizer::UnrepeatedRandomizer(int min, int max)$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
UnrepeatedRandomizer	orb_slam2/Thirdparty/DBoW2/DUtils/Random.h	/^class Random::UnrepeatedRandomizer$/;"	c	class:DUtils::Random
Update	orb_slam2/src/FrameDrawer.cc	/^void FrameDrawer::Update(Tracking *pTracker)$/;"	f	class:ORB_SLAM2::FrameDrawer
Update	ros/src/Node.cc	/^void Node::Update () {$/;"	f	class:Node
UpdateBestCovisibles	orb_slam2/src/KeyFrame.cc	/^void KeyFrame::UpdateBestCovisibles()$/;"	f	class:ORB_SLAM2::KeyFrame
UpdateConnections	orb_slam2/src/KeyFrame.cc	/^void KeyFrame::UpdateConnections()$/;"	f	class:ORB_SLAM2::KeyFrame
UpdateLastFrame	orb_slam2/src/Tracking.cc	/^void Tracking::UpdateLastFrame()$/;"	f	class:ORB_SLAM2::Tracking
UpdateLocalKeyFrames	orb_slam2/src/Tracking.cc	/^void Tracking::UpdateLocalKeyFrames()$/;"	f	class:ORB_SLAM2::Tracking
UpdateLocalMap	orb_slam2/src/Tracking.cc	/^void Tracking::UpdateLocalMap()$/;"	f	class:ORB_SLAM2::Tracking
UpdateLocalPoints	orb_slam2/src/Tracking.cc	/^void Tracking::UpdateLocalPoints()$/;"	f	class:ORB_SLAM2::Tracking
UpdateNormalAndDepth	orb_slam2/src/MapPoint.cc	/^void MapPoint::UpdateNormalAndDepth()$/;"	f	class:ORB_SLAM2::MapPoint
UpdatePoseMatrices	orb_slam2/src/Frame.cc	/^void Frame::UpdatePoseMatrices()$/;"	f	class:ORB_SLAM2::Frame
ValueType	orb_slam2/Thirdparty/g2o/g2o/stuff/property.h	/^      typedef T ValueType;$/;"	t	class:g2o::Property
Vector2D	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Matrix<double,2,1,Eigen::ColMajor>                               Vector2D;$/;"	t	namespace:g2o
Vector2F	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Matrix<float,2,1,Eigen::ColMajor>                                Vector2F; $/;"	t	namespace:g2o
Vector2I	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Matrix<int,2,1,Eigen::ColMajor>                                  Vector2I;$/;"	t	namespace:g2o
Vector3D	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Matrix<double,3,1,Eigen::ColMajor>                               Vector3D;$/;"	t	namespace:g2o
Vector3F	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Matrix<float,3,1,Eigen::ColMajor>                                Vector3F; $/;"	t	namespace:g2o
Vector3I	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Matrix<int,3,1,Eigen::ColMajor>                                  Vector3I;$/;"	t	namespace:g2o
Vector4D	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Matrix<double,4,1,Eigen::ColMajor>                               Vector4D;$/;"	t	namespace:g2o
Vector4F	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Matrix<float,4,1,Eigen::ColMajor>                                Vector4F; $/;"	t	namespace:g2o
Vector4I	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Matrix<int,4,1,Eigen::ColMajor>                                  Vector4I;$/;"	t	namespace:g2o
Vector6d	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^  typedef Matrix<double, 6, 1> Vector6d;$/;"	t	namespace:g2o
Vector7d	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^  typedef Matrix<double, 7, 1> Vector7d;$/;"	t	namespace:g2o
Vector7d	orb_slam2/Thirdparty/g2o/g2o/types/sim3.h	/^  typedef  Matrix <double, 7, 1> Vector7d;$/;"	t	namespace:g2o
VectorXD	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Matrix<double,Eigen::Dynamic,1,Eigen::ColMajor>                  VectorXD;$/;"	t	namespace:g2o
VectorXF	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Matrix<float,Eigen::Dynamic,1,Eigen::ColMajor>                   VectorXF; $/;"	t	namespace:g2o
VectorXI	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^  typedef Eigen::Matrix<int,Eigen::Dynamic,1,Eigen::ColMajor>                     VectorXI; $/;"	t	namespace:g2o
Vertex	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.cpp	/^  HyperGraph::Vertex::Vertex(int id) : _id(id)$/;"	f	class:g2o::HyperGraph::Vertex
Vertex	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^      class  Vertex : public HyperGraphElement {$/;"	c	class:g2o::HyperGraph
Vertex	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::Vertex::Vertex() :$/;"	f	class:g2o::OptimizableGraph::Vertex
Vertex	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^    class  Vertex : public HyperGraph::Vertex {$/;"	c	struct:g2o::OptimizableGraph
VertexContainer	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^      typedef std::vector<Vertex*>                      VertexContainer;$/;"	t	class:g2o::HyperGraph
VertexContainer	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^    typedef std::vector<OptimizableGraph::Vertex*>      VertexContainer;$/;"	t	struct:g2o::OptimizableGraph
VertexIDCompare	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^    struct  VertexIDCompare {$/;"	s	struct:g2o::OptimizableGraph
VertexIDHashFunction	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^      class VertexIDHashFunction {$/;"	c	class:g2o::EstimatePropagator
VertexIDMap	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^      typedef std::tr1::unordered_map<int, Vertex*>     VertexIDMap;$/;"	t	class:g2o::HyperGraph
VertexSBAPointXYZ	orb_slam2/Thirdparty/g2o/g2o/types/types_sba.cpp	/^  VertexSBAPointXYZ::VertexSBAPointXYZ() : BaseVertex<3, Vector3d>()$/;"	f	class:g2o::VertexSBAPointXYZ
VertexSBAPointXYZ	orb_slam2/Thirdparty/g2o/g2o/types/types_sba.h	/^ class VertexSBAPointXYZ : public BaseVertex<3, Vector3d>$/;"	c	namespace:g2o
VertexSE3Expmap	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.cpp	/^VertexSE3Expmap::VertexSE3Expmap() : BaseVertex<6, SE3Quat>() {$/;"	f	class:g2o::VertexSE3Expmap
VertexSE3Expmap	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^class  VertexSE3Expmap : public BaseVertex<6, SE3Quat>{$/;"	c	namespace:g2o
VertexSet	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^      typedef std::set<Vertex*>                         VertexSet;$/;"	t	class:g2o::HyperGraph
VertexSim3Expmap	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.cpp	/^  VertexSim3Expmap::VertexSim3Expmap() : BaseVertex<7, Sim3>()$/;"	f	class:g2o::VertexSim3Expmap
VertexSim3Expmap	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.h	/^  class VertexSim3Expmap : public BaseVertex<7, Sim3>$/;"	c	namespace:g2o
VertexXiType	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.h	/^      typedef VertexXi VertexXiType;$/;"	t	class:g2o::BaseBinaryEdge
VertexXiType	orb_slam2/Thirdparty/g2o/g2o/core/base_unary_edge.h	/^      typedef VertexXi VertexXiType;$/;"	t	class:g2o::BaseUnaryEdge
VertexXjType	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.h	/^      typedef VertexXj VertexXjType;$/;"	t	class:g2o::BaseBinaryEdge
WIN32	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.cpp	22;"	d	file:
WeightingType	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.h	/^enum WeightingType$/;"	g	namespace:DBoW2
WordId	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.h	/^typedef unsigned int WordId;$/;"	t	namespace:DBoW2
WordValue	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.h	/^typedef double WordValue;$/;"	t	namespace:DBoW2
WorkspaceVector	orb_slam2/Thirdparty/g2o/g2o/core/jacobian_workspace.h	/^      typedef std::vector<Eigen::VectorXd, Eigen::aligned_allocator<Eigen::VectorXd> >      WorkspaceVector;$/;"	t	class:g2o::JacobianWorkspace
WriteGnuplotAction	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  WriteGnuplotAction::WriteGnuplotAction(const std::string& typeName_)$/;"	f	class:g2o::WriteGnuplotAction
WriteGnuplotAction	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^  class  WriteGnuplotAction: public HyperGraphElementAction{$/;"	c	namespace:g2o
Xw	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  Vector3d Xw;$/;"	m	class:g2o::EdgeSE3ProjectXYZOnlyPose
Xw	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  Vector3d Xw;$/;"	m	class:g2o::EdgeStereoSE3ProjectXYZOnlyPose
ZERO	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.h	/^    ZERO = 0x2$/;"	e	enum:DUtils::Timestamp::tOptions
_Ai	orb_slam2/Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.h	/^      int* _Ai;         \/\/\/< row indices of the CCS storage$/;"	m	class:g2o::MarginalCovarianceCholesky
_Ap	orb_slam2/Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.h	/^      int* _Ap;         \/\/\/< column pointer of the CCS storage$/;"	m	class:g2o::MarginalCovarianceCholesky
_Ax	orb_slam2/Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.h	/^      double* _Ax;      \/\/\/< values of the cholesky factor$/;"	m	class:g2o::MarginalCovarianceCholesky
_DInvSchur	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      SparseBlockMatrixDiagonal<LandmarkMatrixType>* _DInvSchur;$/;"	m	class:g2o::BlockSolver
_H	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_dense.h	/^      Eigen::MatrixXd _H;$/;"	m	class:g2o::LinearSolverDense
_Hll	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      SparseBlockMatrix<LandmarkMatrixType>* _Hll;$/;"	m	class:g2o::BlockSolver
_Hpl	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      SparseBlockMatrix<PoseLandmarkMatrixType>* _Hpl;$/;"	m	class:g2o::BlockSolver
_HplCCS	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      SparseBlockMatrixCCS<PoseLandmarkMatrixType>* _HplCCS;$/;"	m	class:g2o::BlockSolver
_Hpp	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      SparseBlockMatrix<PoseMatrixType>* _Hpp;$/;"	m	class:g2o::BlockSolver
_Hschur	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      SparseBlockMatrix<PoseMatrixType>* _Hschur;$/;"	m	class:g2o::BlockSolver
_HschurTransposedCCS	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      SparseBlockMatrixCCS<PoseMatrixType>* _HschurTransposedCCS;$/;"	m	class:g2o::BlockSolver
__D_RANDOM__	orb_slam2/Thirdparty/DBoW2/DUtils/Random.h	13;"	d
__D_TIMESTAMP__	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.h	11;"	d
__D_T_BOW_VECTOR__	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.h	11;"	d
__D_T_FCLASS__	orb_slam2/Thirdparty/DBoW2/DBoW2/FClass.h	11;"	d
__D_T_FEATURE_VECTOR__	orb_slam2/Thirdparty/DBoW2/DBoW2/FeatureVector.h	11;"	d
__D_T_F_ORB__	orb_slam2/Thirdparty/DBoW2/DBoW2/FORB.h	11;"	d
__D_T_SCORING_OBJECT__	orb_slam2/Thirdparty/DBoW2/DBoW2/ScoringObject.h	11;"	d
__D_T_TEMPLATED_VOCABULARY__	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	18;"	d
__PRETTY_FUNCTION__	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	62;"	d
__PRETTY_FUNCTION__	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	95;"	d
__SCORING_CLASS	orb_slam2/Thirdparty/DBoW2/DBoW2/ScoringObject.h	53;"	d
__SCORING_CLASS	orb_slam2/Thirdparty/DBoW2/DBoW2/ScoringObject.h	91;"	d
_action	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^        HyperGraphElementAction* _action;$/;"	m	class:g2o::RegisterActionProxy
_actionMap	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^      ActionMap _actionMap;$/;"	m	class:g2o::HyperGraphElementActionCollection
_actionMap	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^      HyperGraphElementAction::ActionMap _actionMap;$/;"	m	class:g2o::HyperGraphActionLibrary
_activeEdges	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	/^    EdgeContainer _activeEdges;        \/\/\/< sorted according to EdgeIDCompare$/;"	m	class:g2o::SparseOptimizer
_activeVertices	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	/^    VertexContainer _activeVertices;   \/\/\/< sorted according to VertexIDCompare$/;"	m	class:g2o::SparseOptimizer
_additionalVectorSpace	orb_slam2/Thirdparty/g2o/g2o/core/solver.h	/^      size_t _additionalVectorSpace;$/;"	m	class:g2o::Solver
_adjacencyMap	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^      AdjacencyMap _adjacencyMap;$/;"	m	class:g2o::EstimatePropagator
_adjacencyMap	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.h	/^    AdjacencyMap _adjacencyMap;$/;"	m	struct:g2o::HyperDijkstra
_algorithm	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	/^    OptimizationAlgorithm* _algorithm;$/;"	m	class:g2o::SparseOptimizer
_auxVector	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.h	/^      Eigen::VectorXd _auxVector;   \/\/\/< auxilary vector used to perform multiplications or other stuff$/;"	m	class:g2o::OptimizationAlgorithmDogleg
_b	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^    Matrix<double, D, 1> _b;$/;"	m	class:g2o::BaseVertex
_b	orb_slam2/Thirdparty/g2o/g2o/core/solver.h	/^      double* _b;$/;"	m	class:g2o::Solver
_backup	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^    BackupStackType _backup;$/;"	m	class:g2o::BaseVertex
_batchStatistics	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	/^    BatchStatisticsContainer _batchStatistics;   \/\/\/< global statistics of the optimizer, e.g., timing, num-non-zeros$/;"	m	class:g2o::SparseOptimizer
_blockCols	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.h	/^    std::vector <IntBlockMap> _blockCols;$/;"	m	class:g2o::SparseBlockMatrix
_blockCols	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      std::vector<SparseColumn> _blockCols;     \/\/\/< the matrices stored in CCS order$/;"	m	class:g2o::SparseBlockMatrixCCS
_blockCols	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      std::vector<SparseColumn> _blockCols;     \/\/\/< the matrices stored in CCS order$/;"	m	class:g2o::SparseBlockMatrixHashMap
_blockIndices	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_diagonal.h	/^      const std::vector<int>& _blockIndices; \/\/\/< vector of the indices of the blocks along the diagonal$/;"	m	class:g2o::SparseBlockMatrixDiagonal
_blockOrdering	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_eigen.h	/^    bool _blockOrdering;$/;"	m	class:g2o::LinearSolverEigen
_bschur	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      double* _bschur;$/;"	m	class:g2o::BlockSolver
_cacheContainer	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        CacheContainer* _cacheContainer;$/;"	m	class:g2o::OptimizableGraph::Vertex
_cacheIds	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        std::vector<int> _cacheIds;$/;"	m	class:g2o::OptimizableGraph::Edge
_ccsMatrix	orb_slam2/Thirdparty/g2o/g2o/core/linear_solver.h	/^    SparseBlockMatrixCCS<MatrixType>* _ccsMatrix;$/;"	m	class:g2o::LinearSolverCCS
_child	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^          OptimizableGraph::Vertex* _child;$/;"	m	class:g2o::EstimatePropagator::AdjacencyMapEntry
_child	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.h	/^      HyperGraph::Vertex* _child;$/;"	m	struct:g2o::HyperDijkstra::AdjacencyMapEntry
_children	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.h	/^      HyperGraph::VertexSet _children;$/;"	m	struct:g2o::HyperDijkstra::AdjacencyMapEntry
_cholesky	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_dense.h	/^      Eigen::LDLT<Eigen::MatrixXd> _cholesky;$/;"	m	class:g2o::LinearSolverDense
_cholesky	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_eigen.h	/^    CholeskyDecomposition _cholesky;$/;"	m	class:g2o::LinearSolverEigen
_coefficients	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      double* _coefficients;$/;"	m	class:g2o::BlockSolver
_coefficientsMutex	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      std::vector<OpenMPMutex> _coefficientsMutex;$/;"	m	class:g2o::BlockSolver
_colBlockIndices	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.h	/^    std::vector<int> _colBlockIndices; \/\/\/< vector of the indices of the blocks along the cols$/;"	m	class:g2o::SparseBlockMatrix
_colBlockIndices	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      const std::vector<int>& _colBlockIndices; \/\/\/< vector of the indices of the blocks along the cols$/;"	m	class:g2o::SparseBlockMatrixCCS
_colBlockIndices	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      const std::vector<int>& _colBlockIndices; \/\/\/< vector of the indices of the blocks along the cols$/;"	m	class:g2o::SparseBlockMatrixHashMap
_colInHessian	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        int _colInHessian;$/;"	m	class:g2o::OptimizableGraph::Vertex
_computeBatchStatistics	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	/^    bool _computeBatchStatistics;$/;"	m	class:g2o::SparseOptimizer
_container	orb_slam2/Thirdparty/g2o/g2o/core/cache.h	/^      CacheContainer* _container;$/;"	m	class:g2o::Cache
_creator	orb_slam2/Thirdparty/g2o/g2o/core/factory.h	/^      CreatorMap _creator;     \/\/\/< look-up map for the existing creators$/;"	m	class:g2o::Factory
_creator	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.h	/^      AbstractOptimizationAlgorithmCreator* _creator;$/;"	m	class:g2o::RegisterOptimizationAlgorithmProxy
_creator	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.h	/^      CreatorList _creator;$/;"	m	class:g2o::OptimizationAlgorithmFactory
_creator	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.h	/^      CreatorMap _creator;     \/\/\/< look-up map for the existing creators$/;"	m	class:g2o::RobustKernelFactory
_currentLambda	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.h	/^      double _currentLambda;        \/\/\/< the damping factor to force positive definite matrix$/;"	m	class:g2o::OptimizationAlgorithmDogleg
_currentLambda	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.h	/^      double _currentLambda;$/;"	m	class:g2o::OptimizationAlgorithmLevenberg
_delta	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.h	/^      double _delta;                \/\/\/< trust region$/;"	m	class:g2o::OptimizationAlgorithmDogleg
_delta	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel.h	/^      double _delta;$/;"	m	class:g2o::RobustKernel
_deltaSqr	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.h	/^      float _deltaSqr;$/;"	m	class:g2o::RobustKernelTukey
_diag	orb_slam2/Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.h	/^      std::vector<double> _diag;  \/\/\/< cache 1 \/ H_ii to avoid recalculations$/;"	m	class:g2o::MarginalCovarianceCholesky
_diagonal	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_diagonal.h	/^      DiagonalVector _diagonal;$/;"	m	class:g2o::SparseBlockMatrixDiagonal
_diagonalBackupLandmark	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      std::vector<LandmarkVectorType, Eigen::aligned_allocator<LandmarkVectorType> > _diagonalBackupLandmark;$/;"	m	class:g2o::BlockSolver
_diagonalBackupPose	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      std::vector<PoseVectorType, Eigen::aligned_allocator<PoseVectorType> > _diagonalBackupPose;$/;"	m	class:g2o::BlockSolver
_dimension	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        int _dimension;$/;"	m	class:g2o::OptimizableGraph::Edge
_dimension	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        int _dimension;$/;"	m	class:g2o::OptimizableGraph::Vertex
_distance	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^          double _distance;$/;"	m	class:g2o::EstimatePropagator::AdjacencyMapEntry
_distance	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.h	/^      double _distance;$/;"	m	struct:g2o::HyperDijkstra::AdjacencyMapEntry
_doSchur	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      bool _doSchur;$/;"	m	class:g2o::BlockSolver
_edge	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^          OptimizableGraph::Edge* _edge;$/;"	m	class:g2o::EstimatePropagator::AdjacencyMapEntry
_edge	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.h	/^      HyperGraph::Edge* _edge;$/;"	m	struct:g2o::HyperDijkstra::AdjacencyMapEntry
_edge_has_id	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^    bool _edge_has_id;$/;"	m	struct:g2o::OptimizableGraph
_edges	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^          EdgeSet _edges;$/;"	m	class:g2o::HyperGraph::Vertex
_edges	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^      EdgeSet _edges;$/;"	m	class:g2o::HyperGraph
_error	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	/^      ErrorVector _error;$/;"	m	class:g2o::BaseEdge
_estimate	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^    EstimateType _estimate;$/;"	m	class:g2o::BaseVertex
_fix_scale	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.h	/^    bool _fix_scale;$/;"	m	class:g2o::VertexSim3Expmap
_fixed	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        bool _fixed;$/;"	m	class:g2o::OptimizableGraph::Vertex
_focal_length1	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.h	/^    Vector2d _focal_length1, _focal_length2;$/;"	m	class:g2o::VertexSim3Expmap
_focal_length2	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.h	/^    Vector2d _focal_length1, _focal_length2;$/;"	m	class:g2o::VertexSim3Expmap
_forceStopFlag	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	/^    bool* _forceStopFlag;$/;"	m	class:g2o::SparseOptimizer
_frontierLevel	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^          int _frontierLevel;$/;"	m	class:g2o::EstimatePropagator::AdjacencyMapEntry
_globalStats	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	/^    static G2OBatchStatistics* _globalStats;$/;"	m	struct:g2o::G2OBatchStatistics
_goodStepLowerScale	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.h	/^      double _goodStepLowerScale; \/\/\/< lower bound for lambda decrease if a good LM step$/;"	m	class:g2o::OptimizationAlgorithmLevenberg
_goodStepUpperScale	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.h	/^      double _goodStepUpperScale; \/\/\/< upper bound for lambda decrease if a good LM step$/;"	m	class:g2o::OptimizationAlgorithmLevenberg
_graph	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^      OptimizableGraph* _graph;$/;"	m	class:g2o::EstimatePropagator
_graph	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^      SparseOptimizer* _graph;$/;"	m	class:g2o::EstimatePropagatorCost
_graph	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.h	/^    HyperGraph* _graph;$/;"	m	struct:g2o::HyperDijkstra
_graph	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        OptimizableGraph* _graph;$/;"	m	class:g2o::OptimizableGraph::Vertex
_graphActions	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^    std::vector<HyperGraphActionSet> _graphActions;$/;"	m	struct:g2o::OptimizableGraph
_hasStorage	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.h	/^    bool _hasStorage;$/;"	m	class:g2o::SparseBlockMatrix
_hdl	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.h	/^      Eigen::VectorXd _hdl;         \/\/\/< final dogleg step$/;"	m	class:g2o::OptimizationAlgorithmDogleg
_hessian	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.h	/^      HessianBlockType _hessian;$/;"	m	class:g2o::BaseBinaryEdge
_hessian	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^    HessianBlockType _hessian;$/;"	m	class:g2o::BaseVertex
_hessianIndex	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        int _hessianIndex;$/;"	m	class:g2o::OptimizableGraph::Vertex
_hessianTransposed	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.h	/^      HessianBlockTransposedType _hessianTransposed;$/;"	m	class:g2o::BaseBinaryEdge
_hsd	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.h	/^      Eigen::VectorXd _hsd;         \/\/\/< steepest decent step$/;"	m	class:g2o::OptimizationAlgorithmDogleg
_id	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^          int _id; \/\/\/< unique id$/;"	m	class:g2o::HyperGraph::Edge
_id	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^          int _id;$/;"	m	class:g2o::HyperGraph::Vertex
_id	orb_slam2/Thirdparty/g2o/g2o/core/parameter.h	/^        int _id;$/;"	m	class:g2o::Parameter
_information	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	/^      InformationType _information;$/;"	m	class:g2o::BaseEdge
_init	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_eigen.h	/^    bool _init;$/;"	m	class:g2o::LinearSolverEigen
_initialLambda	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.h	/^      Property<double>* _initialLambda;$/;"	m	class:g2o::OptimizationAlgorithmDogleg
_internalId	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        long long _internalId;$/;"	m	class:g2o::OptimizableGraph::Edge
_invDeltaSqr	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.h	/^      float _invDeltaSqr;$/;"	m	class:g2o::RobustKernelTukey
_isLevenberg	orb_slam2/Thirdparty/g2o/g2o/core/solver.h	/^      bool _isLevenberg; \/\/\/< the system we gonna solve is a Levenberg-Marquardt system$/;"	m	class:g2o::Solver
_isMainStorage	orb_slam2/Thirdparty/g2o/g2o/core/parameter_container.h	/^      bool _isMainStorage;$/;"	m	class:g2o::ParameterContainer
_ivMap	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	/^    VertexContainer _ivMap;$/;"	m	class:g2o::SparseOptimizer
_jacobianOplus	orb_slam2/Thirdparty/g2o/g2o/core/base_multi_edge.h	/^      std::vector<JacobianType, aligned_allocator<JacobianType> > _jacobianOplus; \/\/\/< jacobians of the edge (w.r.t. oplus)$/;"	m	class:g2o::BaseMultiEdge
_jacobianOplusXi	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.h	/^      JacobianXiOplusType _jacobianOplusXi;$/;"	m	class:g2o::BaseBinaryEdge
_jacobianOplusXj	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.h	/^      JacobianXjOplusType _jacobianOplusXj;$/;"	m	class:g2o::BaseBinaryEdge
_jacobianWorkspace	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^    JacobianWorkspace _jacobianWorkspace;$/;"	m	struct:g2o::OptimizableGraph
_kernel	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.h	/^      RobustKernelPtr _kernel;$/;"	m	class:g2o::RobustKernelScaleDelta
_lamdbaFactor	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.h	/^      Property<double>* _lamdbaFactor;$/;"	m	class:g2o::OptimizationAlgorithmDogleg
_lastNumTries	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.h	/^      int _lastNumTries;$/;"	m	class:g2o::OptimizationAlgorithmDogleg
_lastStep	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.h	/^      int _lastStep;                \/\/\/< type of the step taken by the algorithm$/;"	m	class:g2o::OptimizationAlgorithmDogleg
_level	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        int _level;$/;"	m	class:g2o::OptimizableGraph::Edge
_levenbergIterations	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.h	/^      int _levenbergIterations;   \/\/\/< the numer of levenberg iterations performed to accept the last step$/;"	m	class:g2o::OptimizationAlgorithmLevenberg
_linearSolver	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      LinearSolver<PoseMatrixType>* _linearSolver;$/;"	m	class:g2o::BlockSolver
_lock	orb_slam2/Thirdparty/g2o/g2o/core/openmp_mutex.h	/^      omp_lock_t _lock;$/;"	m	class:g2o::OpenMPMutex
_map	orb_slam2/Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.h	/^      LookupMap _map;             \/\/\/< hash look up table for the already computed entries$/;"	m	class:g2o::MarginalCovarianceCholesky
_marginalized	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        bool _marginalized;$/;"	m	class:g2o::OptimizableGraph::Vertex
_maxDimension	orb_slam2/Thirdparty/g2o/g2o/core/jacobian_workspace.h	/^      int _maxDimension;            \/\/\/< the maximum dimension (number of elements) for a Jacobian$/;"	m	class:g2o::JacobianWorkspace
_maxNumVertices	orb_slam2/Thirdparty/g2o/g2o/core/jacobian_workspace.h	/^      int _maxNumVertices;          \/\/\/< the maximum number of vertices connected by a hyper-edge$/;"	m	class:g2o::JacobianWorkspace
_maxTrialsAfterFailure	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.h	/^      Property<int>* _maxTrialsAfterFailure;$/;"	m	class:g2o::OptimizationAlgorithmDogleg
_maxTrialsAfterFailure	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.h	/^      Property<int>* _maxTrialsAfterFailure;$/;"	m	class:g2o::OptimizationAlgorithmLevenberg
_maxXSize	orb_slam2/Thirdparty/g2o/g2o/core/solver.h	/^      size_t _xSize, _maxXSize;$/;"	m	class:g2o::Solver
_measurement	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	/^      Measurement _measurement;$/;"	m	class:g2o::BaseEdge
_mutex	orb_slam2/Thirdparty/g2o/g2o/core/openmp_mutex.h	/^      OpenMPMutex* const _mutex;$/;"	m	class:g2o::ScopedOpenMPMutex
_n	orb_slam2/Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.h	/^      int _n;           \/\/\/< L is an n X n matrix$/;"	m	class:g2o::MarginalCovarianceCholesky
_nBad	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.h	/^      int _nBad;$/;"	m	class:g2o::OptimizationAlgorithmLevenberg
_name	orb_slam2/Thirdparty/g2o/g2o/core/creators.h	/^      std::string _name;$/;"	m	class:g2o::HyperGraphElementCreator
_name	orb_slam2/Thirdparty/g2o/g2o/core/factory.h	/^      std::string _name;$/;"	m	class:g2o::RegisterTypeProxy
_name	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^      std::string _name;$/;"	m	class:g2o::HyperGraphElementAction
_name	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.h	/^      std::string _name;$/;"	m	class:g2o::RegisterRobustKernelProxy
_name	orb_slam2/Thirdparty/g2o/g2o/stuff/property.h	/^      std::string _name;$/;"	m	class:g2o::BaseProperty
_next	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        Data* _next; \/\/ linked list of multiple data;$/;"	m	class:g2o::OptimizableGraph::Data
_nextEdgeId	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^    long long _nextEdgeId;$/;"	m	struct:g2o::OptimizableGraph
_ni	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.h	/^      double _ni;$/;"	m	class:g2o::OptimizationAlgorithmLevenberg
_numLandmarks	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      int _numPoses, _numLandmarks;$/;"	m	class:g2o::BlockSolver
_numPoses	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      int _numPoses, _numLandmarks;$/;"	m	class:g2o::BlockSolver
_optimizer	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm.h	/^      SparseOptimizer* _optimizer;   \/\/\/< the optimizer the solver is working on$/;"	m	class:g2o::OptimizationAlgorithm
_optimizer	orb_slam2/Thirdparty/g2o/g2o/core/solver.h	/^      SparseOptimizer* _optimizer;$/;"	m	class:g2o::Solver
_parameterIds	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        std::vector<int> _parameterIds;$/;"	m	class:g2o::OptimizableGraph::Edge
_parameterTypes	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        std::vector<std::string> _parameterTypes;$/;"	m	class:g2o::OptimizableGraph::Edge
_parameters	orb_slam2/Thirdparty/g2o/g2o/core/cache.h	/^          ParameterVector _parameters;$/;"	m	class:g2o::Cache::CacheKey
_parameters	orb_slam2/Thirdparty/g2o/g2o/core/cache.h	/^      ParameterVector _parameters;$/;"	m	class:g2o::Cache
_parameters	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        std::vector<Parameter**> _parameters;$/;"	m	class:g2o::OptimizableGraph::Edge
_parameters	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^    ParameterContainer _parameters;$/;"	m	struct:g2o::OptimizableGraph
_parent	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^          OptimizableGraph::VertexSet _parent;$/;"	m	class:g2o::EstimatePropagator::AdjacencyMapEntry
_parent	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.h	/^      HyperGraph::Vertex* _parent;$/;"	m	struct:g2o::HyperDijkstra::AdjacencyMapEntry
_parentCaches	orb_slam2/Thirdparty/g2o/g2o/core/cache.h	/^      std::vector<Cache*> _parentCaches;$/;"	m	class:g2o::Cache
_perm	orb_slam2/Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.h	/^      int* _perm;       \/\/\/< permutation of the cholesky factor. Variable re-ordering for better fill-in$/;"	m	class:g2o::MarginalCovarianceCholesky
_previousParams	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^    Parameters* _previousParams;$/;"	m	class:g2o::DrawAction
_principle_point1	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.h	/^    Vector2d _principle_point1, _principle_point2;$/;"	m	class:g2o::VertexSim3Expmap
_principle_point2	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.h	/^    Vector2d _principle_point1, _principle_point2;$/;"	m	class:g2o::VertexSim3Expmap
_properties	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm.h	/^      PropertyMap _properties;       \/\/\/< the properties of your solver, use this to store the parameters of your solver$/;"	m	class:g2o::OptimizationAlgorithm
_property	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.h	/^      OptimizationAlgorithmProperty _property;$/;"	m	class:g2o::AbstractOptimizationAlgorithmCreator
_quadraticFormMutex	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        OpenMPMutex _quadraticFormMutex;$/;"	m	class:g2o::OptimizableGraph::Vertex
_r	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^      Quaterniond _r;$/;"	m	class:g2o::SE3Quat
_renamedTypesLookup	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^    std::map<std::string, std::string> _renamedTypesLookup;$/;"	m	struct:g2o::OptimizableGraph
_reset	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_dense.h	/^      bool _reset;$/;"	m	class:g2o::LinearSolverDense
_robustKernel	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        RobustKernel* _robustKernel;$/;"	m	class:g2o::OptimizableGraph::Edge
_rowBlockIndices	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.h	/^    std::vector<int> _rowBlockIndices; \/\/\/< vector of the indices of the blocks along the rows.$/;"	m	class:g2o::SparseBlockMatrix
_rowBlockIndices	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      const std::vector<int>& _rowBlockIndices; \/\/\/< vector of the indices of the blocks along the rows.$/;"	m	class:g2o::SparseBlockMatrixCCS
_rowBlockIndices	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      const std::vector<int>& _rowBlockIndices; \/\/\/< vector of the indices of the blocks along the rows.$/;"	m	class:g2o::SparseBlockMatrixHashMap
_show	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^    BoolProperty* _show;$/;"	m	class:g2o::DrawAction
_showId	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^    BoolProperty* _showId;$/;"	m	class:g2o::DrawAction
_sizeLandmarks	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      int _sizePoses, _sizeLandmarks;$/;"	m	class:g2o::BlockSolver
_sizePoses	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      int _sizePoses, _sizeLandmarks;$/;"	m	class:g2o::BlockSolver
_solver	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_with_hessian.h	/^      Solver* _solver;$/;"	m	class:g2o::OptimizationAlgorithmWithHessian
_sparseMatrix	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_eigen.h	/^    SparseMatrix _sparseMatrix;$/;"	m	class:g2o::LinearSolverEigen
_startTime	orb_slam2/Thirdparty/g2o/g2o/stuff/timeutil.h	/^    double _startTime;$/;"	m	class:g2o::ScopeTime
_t	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^      Vector3d _t;$/;"	m	class:g2o::SE3Quat
_tagLookup	orb_slam2/Thirdparty/g2o/g2o/core/factory.h	/^      TagLookup _tagLookup;    \/\/\/< reverse look-up, class name to tag$/;"	m	class:g2o::Factory
_tau	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.h	/^      double _tau;$/;"	m	class:g2o::OptimizationAlgorithmLevenberg
_title	orb_slam2/Thirdparty/g2o/g2o/stuff/timeutil.h	/^    std::string _title;$/;"	m	class:g2o::ScopeTime
_type	orb_slam2/Thirdparty/g2o/g2o/core/cache.h	/^          std::string _type;$/;"	m	class:g2o::Cache::CacheKey
_typeName	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^      std::string _typeName;$/;"	m	class:g2o::HyperGraphElementAction
_updateNeeded	orb_slam2/Thirdparty/g2o/g2o/core/cache.h	/^      bool _updateNeeded;$/;"	m	class:g2o::Cache
_updateNeeded	orb_slam2/Thirdparty/g2o/g2o/core/cache.h	/^      bool _updateNeeded;$/;"	m	class:g2o::CacheContainer
_userData	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        Data* _userData;$/;"	m	class:g2o::OptimizableGraph::Vertex
_userDeltaInit	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.h	/^      Property<double>* _userDeltaInit;$/;"	m	class:g2o::OptimizationAlgorithmDogleg
_userLambdaInit	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.h	/^      Property<double>* _userLambdaInit;$/;"	m	class:g2o::OptimizationAlgorithmLevenberg
_value	orb_slam2/Thirdparty/g2o/g2o/stuff/property.h	/^      T _value;$/;"	m	class:g2o::Property
_verbose	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	/^    bool _verbose;$/;"	m	class:g2o::SparseOptimizer
_vertex	orb_slam2/Thirdparty/g2o/g2o/core/cache.h	/^      OptimizableGraph::Vertex* _vertex;$/;"	m	class:g2o::CacheContainer
_vertices	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^          VertexContainer _vertices;$/;"	m	class:g2o::HyperGraph::Edge
_vertices	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^      VertexIDMap _vertices;$/;"	m	class:g2o::HyperGraph
_visited	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^      OptimizableGraph::VertexSet _visited;$/;"	m	class:g2o::EstimatePropagator
_visited	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.h	/^    HyperGraph::VertexSet _visited;$/;"	m	struct:g2o::HyperDijkstra
_wasPDInAllIterations	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.h	/^      bool _wasPDInAllIterations;   \/\/\/< the matrix we solve was positive definite in all iterations -> if not apply damping$/;"	m	class:g2o::OptimizationAlgorithmDogleg
_workspace	orb_slam2/Thirdparty/g2o/g2o/core/jacobian_workspace.h	/^      WorkspaceVector _workspace;   \/\/\/< the memory pre-allocated for computing the Jacobians$/;"	m	class:g2o::JacobianWorkspace
_writeDebug	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_with_hessian.h	/^      Property<bool>* _writeDebug;$/;"	m	class:g2o::OptimizationAlgorithmWithHessian
_writeDebug	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_eigen.h	/^    bool _writeDebug;$/;"	m	class:g2o::LinearSolverEigen
_x	orb_slam2/Thirdparty/g2o/g2o/core/solver.h	/^      double* _x;$/;"	m	class:g2o::Solver
_xSize	orb_slam2/Thirdparty/g2o/g2o/core/solver.h	/^      size_t _xSize, _maxXSize;$/;"	m	class:g2o::Solver
actionByName	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementAction* HyperGraphActionLibrary::actionByName(const std::string& name)$/;"	f	class:g2o::HyperGraphActionLibrary
actionLibInstance	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^      static HyperGraphActionLibrary* actionLibInstance;$/;"	m	class:g2o::HyperGraphActionLibrary
actionMap	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^      ActionMap& actionMap() {return _actionMap;}$/;"	f	class:g2o::HyperGraphElementActionCollection
actionMap	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^      inline HyperGraphElementAction::ActionMap& actionMap() {return _actionMap;}$/;"	f	class:g2o::HyperGraphActionLibrary
activeChi2	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  double SparseOptimizer::activeChi2( ) const$/;"	f	class:g2o::SparseOptimizer
activeEdges	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	/^    const EdgeContainer& activeEdges() const { return _activeEdges;}$/;"	f	class:g2o::SparseOptimizer
activeRobustChi2	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  double SparseOptimizer::activeRobustChi2() const$/;"	f	class:g2o::SparseOptimizer
activeVertices	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	/^    const VertexContainer& activeVertices() const { return _activeVertices;}$/;"	f	class:g2o::SparseOptimizer
add	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^  bool SparseBlockMatrix<MatrixType>::add(SparseBlockMatrix*& dest) const {$/;"	f	class:g2o::SparseBlockMatrix
add	orb_slam2/src/KeyFrameDatabase.cc	/^void KeyFrameDatabase::add(KeyFrame *pKF)$/;"	f	class:ORB_SLAM2::KeyFrameDatabase
addBlock	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      MatrixType* addBlock(int r, int c, bool zeroBlock = false)$/;"	f	class:g2o::SparseBlockMatrixHashMap
addComputeErrorAction	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  bool SparseOptimizer::addComputeErrorAction(HyperGraphAction* action)$/;"	f	class:g2o::SparseOptimizer
addEdge	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.cpp	/^  bool HyperGraph::addEdge(Edge* e)$/;"	f	class:g2o::HyperGraph
addEdge	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::addEdge(HyperGraph::Edge* e_)$/;"	f	class:g2o::OptimizableGraph
addFeature	orb_slam2/Thirdparty/DBoW2/DBoW2/FeatureVector.cpp	/^void FeatureVector::addFeature(NodeId id, unsigned int i_feature)$/;"	f	class:DBoW2::FeatureVector
addGraph	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::addGraph(OptimizableGraph* g){$/;"	f	class:g2o::OptimizableGraph
addIfNotExist	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.cpp	/^void BowVector::addIfNotExist(WordId id, WordValue v)$/;"	f	class:DBoW2::BowVector
addParameter	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^    bool addParameter(Parameter* p) {$/;"	f	struct:g2o::OptimizableGraph
addParameter	orb_slam2/Thirdparty/g2o/g2o/core/parameter_container.cpp	/^  bool ParameterContainer::addParameter(Parameter* p){$/;"	f	class:g2o::ParameterContainer
addPostIterationAction	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::addPostIterationAction(HyperGraphAction* action)$/;"	f	class:g2o::OptimizableGraph
addPreIterationAction	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::addPreIterationAction(HyperGraphAction* action)$/;"	f	class:g2o::OptimizableGraph
addProperty	orb_slam2/Thirdparty/g2o/g2o/stuff/property.cpp	/^  bool PropertyMap::addProperty(BaseProperty* p) {$/;"	f	class:g2o::PropertyMap
addUserData	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^	void addUserData(Data* obs) { $/;"	f	class:g2o::OptimizableGraph::Vertex
addVertex	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.cpp	/^  bool HyperGraph::addVertex(Vertex* v)$/;"	f	class:g2o::HyperGraph
addVertex	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::addVertex(HyperGraph::Vertex* v, Data* userData)$/;"	f	class:g2o::OptimizableGraph
addVertex	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^    virtual bool addVertex(HyperGraph::Vertex* v) { return addVertex(v, 0);}$/;"	f	struct:g2o::OptimizableGraph
addWeight	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.cpp	/^void BowVector::addWeight(WordId id, WordValue v)$/;"	f	class:DBoW2::BowVector
add_correspondence	orb_slam2/src/PnPsolver.cc	/^void PnPsolver::add_correspondence(double X, double Y, double Z, double u, double v)$/;"	f	class:ORB_SLAM2::PnPsolver
additionalVectorSpace	orb_slam2/Thirdparty/g2o/g2o/core/solver.h	/^      size_t additionalVectorSpace() const { return _additionalVectorSpace;}$/;"	f	class:g2o::Solver
adj	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^      Matrix<double, 6, 6> adj() const$/;"	f	class:g2o::SE3Quat
adjacencyMap	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^      AdjacencyMap& adjacencyMap() {return _adjacencyMap; }$/;"	f	class:g2o::EstimatePropagator
adjacencyMap	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.h	/^    AdjacencyMap& adjacencyMap() {return _adjacencyMap; }$/;"	f	struct:g2o::HyperDijkstra
algorithm	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	/^    const OptimizationAlgorithm* algorithm() const { return _algorithm;}$/;"	f	class:g2o::SparseOptimizer
allVerticesFixed	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.hpp	/^bool BaseBinaryEdge<D, E, VertexXiType, VertexXjType>::allVerticesFixed() const$/;"	f	class:BaseBinaryEdge
allVerticesFixed	orb_slam2/Thirdparty/g2o/g2o/core/base_multi_edge.hpp	/^bool BaseMultiEdge<D, E>::allVerticesFixed() const$/;"	f	class:BaseMultiEdge
allVerticesFixed	orb_slam2/Thirdparty/g2o/g2o/core/base_unary_edge.hpp	/^bool BaseUnaryEdge<D, E, VertexXiType>::allVerticesFixed() const$/;"	f	class:BaseUnaryEdge
alloc	orb_slam2/Thirdparty/g2o/g2o/core/matrix_structure.cpp	/^void MatrixStructure::alloc(int n_, int nz)$/;"	f	class:g2o::MatrixStructure
allocate	orb_slam2/Thirdparty/g2o/g2o/core/jacobian_workspace.cpp	/^bool JacobianWorkspace::allocate()$/;"	f	class:g2o::JacobianWorkspace
alphas	orb_slam2/include/PnPsolver.h	/^  double * pws, * us, * alphas, * pcs;$/;"	m	class:ORB_SLAM2::PnPsolver
analyzePatternWithPermutation	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_eigen.h	/^        void analyzePatternWithPermutation(SparseMatrix& a, const PermutationMatrix& permutation)$/;"	f	class:g2o::LinearSolverEigen::CholeskyDecomposition
applyAction	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  void applyAction(HyperGraph* graph, HyperGraphElementAction* action, HyperGraphElementAction::Parameters* params, const std::string& typeName)$/;"	f	namespace:g2o
arrayHasNaN	orb_slam2/Thirdparty/g2o/g2o/stuff/misc.h	/^inline bool arrayHasNaN(const double* array, int size, int* nanIndex = 0)$/;"	f	namespace:g2o
atxpy	orb_slam2/Thirdparty/g2o/g2o/core/matrix_operations.h	/^    inline void atxpy(const Eigen::Matrix<double, Eigen::Dynamic, t>& A, const Eigen::Map<const Eigen::VectorXd>& x, int xoff, Eigen::Map<Eigen::VectorXd>& y, int yoff)$/;"	f	namespace:g2o::internal
atxpy	orb_slam2/Thirdparty/g2o/g2o/core/matrix_operations.h	/^    inline void atxpy(const Eigen::MatrixXd& A, const Eigen::Map<const Eigen::VectorXd>& x, int xoff, Eigen::Map<Eigen::VectorXd>& y, int yoff)$/;"	f	namespace:g2o::internal
atxpy	orb_slam2/Thirdparty/g2o/g2o/core/matrix_operations.h	/^    inline void atxpy(const MatrixType& A, const Eigen::Map<const Eigen::VectorXd>& x, int xoff, Eigen::Map<Eigen::VectorXd>& y, int yoff)$/;"	f	namespace:g2o::internal
average_angle	orb_slam2/Thirdparty/g2o/g2o/stuff/misc.h	/^inline double average_angle(double theta1, double theta2)$/;"	f	namespace:g2o
axpy	orb_slam2/Thirdparty/g2o/g2o/core/matrix_operations.h	/^    inline void axpy(const Eigen::Matrix<double, Eigen::Dynamic, t>& A, const Eigen::Map<const Eigen::VectorXd>& x, int xoff, Eigen::Map<Eigen::VectorXd>& y, int yoff)$/;"	f	namespace:g2o::internal
axpy	orb_slam2/Thirdparty/g2o/g2o/core/matrix_operations.h	/^    inline void axpy(const Eigen::MatrixXd& A, const Eigen::Map<const Eigen::VectorXd>& x, int xoff, Eigen::Map<Eigen::VectorXd>& y, int yoff)$/;"	f	namespace:g2o::internal
axpy	orb_slam2/Thirdparty/g2o/g2o/core/matrix_operations.h	/^    inline void axpy(const MatrixType& A, const Eigen::Map<const Eigen::VectorXd>& x, int xoff, Eigen::Map<Eigen::VectorXd>& y, int yoff)$/;"	f	namespace:g2o::internal
b	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^    Matrix<double, D, 1>& b() { return _b;}$/;"	f	class:g2o::BaseVertex
b	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^    const Matrix<double, D, 1>& b() const { return _b;}$/;"	f	class:g2o::BaseVertex
b	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^    virtual const double& b(int i) const { assert(i < D); return _b(i);}$/;"	f	class:g2o::BaseVertex
b	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^    virtual double& b(int i) { assert(i < D); return _b(i);}$/;"	f	class:g2o::BaseVertex
b	orb_slam2/Thirdparty/g2o/g2o/core/solver.h	/^      const double* b() const { return _b;}$/;"	f	class:g2o::Solver
b	orb_slam2/Thirdparty/g2o/g2o/core/solver.h	/^      double* b() { return _b;}$/;"	f	class:g2o::Solver
bData	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^    virtual double* bData() { return _b.data();}$/;"	f	class:g2o::BaseVertex
bNoMore	orb_slam2/include/ORBextractor.h	/^    bool bNoMore;$/;"	m	class:ORB_SLAM2::ExtractorNode
baseOfBlock	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_diagonal.h	/^      inline int baseOfBlock(int r) const { return r ? _blockIndices[r-1] : 0 ; }$/;"	f	class:g2o::SparseBlockMatrixDiagonal
baseline	orb_slam2/include/Tracking.h	/^    float fx, fy, cx, cy, baseline;$/;"	m	struct:ORB_SLAM2::ORBParameters
batchStatistics	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	/^    BatchStatisticsContainer& batchStatistics() { return _batchStatistics;}$/;"	f	class:g2o::SparseOptimizer
batchStatistics	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	/^    const BatchStatisticsContainer& batchStatistics() const { return _batchStatistics;}$/;"	f	class:g2o::SparseOptimizer
bf	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  double fx, fy, cx, cy, bf;$/;"	m	class:g2o::EdgeStereoSE3ProjectXYZ
bf	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  double fx, fy, cx, cy, bf;$/;"	m	class:g2o::EdgeStereoSE3ProjectXYZOnlyPose
bit_pattern_31_	orb_slam2/src/ORBextractor.cc	/^static int bit_pattern_31_[256*4] =$/;"	m	namespace:ORB_SLAM2	file:
block	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^  const typename SparseBlockMatrix<MatrixType>::SparseMatrixBlock* SparseBlockMatrix<MatrixType>::block(int r, int c) const {$/;"	f	class:g2o::SparseBlockMatrix
block	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^  typename SparseBlockMatrix<MatrixType>::SparseMatrixBlock* SparseBlockMatrix<MatrixType>::block(int r, int c, bool alloc) {$/;"	f	class:g2o::SparseBlockMatrix
block	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^        MatrixType* block;    \/\/\/< matrix pointer for the block$/;"	m	struct:g2o::SparseBlockMatrixCCS::RowBlock
blockCols	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.h	/^    const std::vector<IntBlockMap>& blockCols() const { return _blockCols;}$/;"	f	class:g2o::SparseBlockMatrix
blockCols	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.h	/^    std::vector<IntBlockMap>& blockCols() { return _blockCols;}$/;"	f	class:g2o::SparseBlockMatrix
blockCols	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      const std::vector<SparseColumn>& blockCols() const { return _blockCols;}$/;"	f	class:g2o::SparseBlockMatrixCCS
blockCols	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      const std::vector<SparseColumn>& blockCols() const { return _blockCols;}$/;"	f	class:g2o::SparseBlockMatrixHashMap
blockCols	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      std::vector<SparseColumn>& blockCols() { return _blockCols;}$/;"	f	class:g2o::SparseBlockMatrixCCS
blockCols	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      std::vector<SparseColumn>& blockCols() { return _blockCols;}$/;"	f	class:g2o::SparseBlockMatrixHashMap
blockIndices	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_diagonal.h	/^      const std::vector<int>& blockIndices() const { return _blockIndices;}$/;"	f	class:g2o::SparseBlockMatrixDiagonal
blockOrdering	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_eigen.h	/^    bool blockOrdering() const { return _blockOrdering;}$/;"	f	class:g2o::LinearSolverEigen
boost	orb_slam2/include/BoostArchiver.h	/^namespace boost{$/;"	n
buildIndexMapping	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  bool SparseOptimizer::buildIndexMapping(SparseOptimizer::VertexContainer& vlist){$/;"	f	class:g2o::SparseOptimizer
buildLinearStructure	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_with_hessian.cpp	/^  bool OptimizationAlgorithmWithHessian::buildLinearStructure()$/;"	f	class:g2o::OptimizationAlgorithmWithHessian
buildStructure	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.hpp	/^bool BlockSolver<Traits>::buildStructure(bool zeroBlocks)$/;"	f	class:g2o::BlockSolver
buildSystem	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.hpp	/^bool BlockSolver<Traits>::buildSystem()$/;"	f	class:g2o::BlockSolver
c	orb_slam2/Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.cpp	/^  int r, c;$/;"	m	struct:g2o::MatrixElem	file:
c	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^      int r, c;$/;"	m	struct:g2o::__anon3::TripletEntry
cacheContainer	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  CacheContainer* OptimizableGraph::Vertex::cacheContainer(){$/;"	f	class:g2o::OptimizableGraph::Vertex
cam_map1	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.h	/^    Vector2d cam_map1(const Vector2d & v) const$/;"	f	class:g2o::VertexSim3Expmap
cam_map2	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.h	/^    Vector2d cam_map2(const Vector2d & v) const$/;"	f	class:g2o::VertexSim3Expmap
cam_project	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.cpp	/^Vector2d EdgeSE3ProjectXYZ::cam_project(const Vector3d & trans_xyz) const{$/;"	f	class:g2o::EdgeSE3ProjectXYZ
cam_project	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.cpp	/^Vector2d EdgeSE3ProjectXYZOnlyPose::cam_project(const Vector3d & trans_xyz) const{$/;"	f	class:g2o::EdgeSE3ProjectXYZOnlyPose
cam_project	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.cpp	/^Vector3d EdgeStereoSE3ProjectXYZ::cam_project(const Vector3d & trans_xyz, const float &bf) const{$/;"	f	class:g2o::EdgeStereoSE3ProjectXYZ
cam_project	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.cpp	/^Vector3d EdgeStereoSE3ProjectXYZOnlyPose::cam_project(const Vector3d & trans_xyz) const{$/;"	f	class:g2o::EdgeStereoSE3ProjectXYZOnlyPose
camera_frame_id_param_	ros/include/Node.h	/^    std::string camera_frame_id_param_;$/;"	m	class:Node
camera_info_topic_	ros/include/Node.h	/^    std::string camera_info_topic_;$/;"	m	class:Node
ccs	orb_slam2/include/PnPsolver.h	/^  double cws[4][3], ccs[4][3];$/;"	m	class:ORB_SLAM2::PnPsolver
changeId	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.cpp	/^  bool HyperGraph::changeId(Vertex* v, int newId){$/;"	f	class:g2o::HyperGraph
chi2	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	/^      virtual double chi2() const $/;"	f	class:g2o::BaseEdge
chi2	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	/^    double chi2;                      \/\/\/< total chi2$/;"	m	struct:g2o::G2OBatchStatistics
chi2	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^double OptimizableGraph::chi2() const$/;"	f	class:g2o::OptimizableGraph
child	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^          OptimizableGraph::Vertex* child() const {return _child;}$/;"	f	class:g2o::EstimatePropagator::AdjacencyMapEntry
child	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.h	/^      HyperGraph::Vertex* child() const {return _child;}$/;"	f	struct:g2o::HyperDijkstra::AdjacencyMapEntry
children	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^    vector<NodeId> children;$/;"	m	struct:DBoW2::TemplatedVocabulary::Node
children	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.h	/^      HyperGraph::VertexSet& children() {return _children;}$/;"	f	struct:g2o::HyperDijkstra::AdjacencyMapEntry
children	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.h	/^      const HyperGraph::VertexSet& children() const {return _children;}$/;"	f	struct:g2o::HyperDijkstra::AdjacencyMapEntry
choleskyNNZ	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	/^    size_t choleskyNNZ;               \/\/\/< number of non-zeros in the cholesky factor$/;"	m	struct:g2o::G2OBatchStatistics
choose_control_points	orb_slam2/src/PnPsolver.cc	/^void PnPsolver::choose_control_points(void)$/;"	f	class:ORB_SLAM2::PnPsolver
clamp	orb_slam2/Thirdparty/g2o/g2o/stuff/misc.h	/^inline T clamp(T l, T x, T u) $/;"	f	namespace:g2o
clear	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.cpp	/^  void HyperGraph::clear()$/;"	f	class:g2o::HyperGraph
clear	orb_slam2/Thirdparty/g2o/g2o/core/parameter_container.cpp	/^  void ParameterContainer::clear() {$/;"	f	class:g2o::ParameterContainer
clear	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^  void SparseBlockMatrix<MatrixType>::clear(bool dealloc) {$/;"	f	class:g2o::SparseBlockMatrix
clear	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::clear() {$/;"	f	class:g2o::SparseOptimizer
clear	orb_slam2/src/KeyFrameDatabase.cc	/^void KeyFrameDatabase::clear()$/;"	f	class:ORB_SLAM2::KeyFrameDatabase
clear	orb_slam2/src/Map.cc	/^void Map::clear()$/;"	f	class:ORB_SLAM2::Map
clearIndexMapping	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::clearIndexMapping(){$/;"	f	class:g2o::SparseOptimizer
clearParameters	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::clearParameters()$/;"	f	class:g2o::OptimizableGraph
clearQuadraticForm	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.hpp	/^void BaseVertex<D, T>::clearQuadraticForm() {$/;"	f	class:BaseVertex
clone	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::Edge* OptimizableGraph::Edge::clone() const$/;"	f	class:g2o::OptimizableGraph::Edge
clone	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::Vertex* OptimizableGraph::Vertex::clone() const$/;"	f	class:g2o::OptimizableGraph::Vertex
clone	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^  SparseBlockMatrix<MatrixType>* SparseBlockMatrix<MatrixType>::clone() const {$/;"	f	class:g2o::SparseBlockMatrix
colBaseOfBlock	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.h	/^    inline int colBaseOfBlock(int c) const { return c ? _colBlockIndices[c-1] : 0 ; }$/;"	f	class:g2o::SparseBlockMatrix
colBaseOfBlock	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      int colBaseOfBlock(int c) const { return c ? _colBlockIndices[c-1] : 0 ; }$/;"	f	class:g2o::SparseBlockMatrixCCS
colBaseOfBlock	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      int colBaseOfBlock(int c) const { return c ? _colBlockIndices[c-1] : 0 ; }$/;"	f	class:g2o::SparseBlockMatrixHashMap
colBlockIndices	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.h	/^    const std::vector<int>& colBlockIndices() const { return _colBlockIndices;}$/;"	f	class:g2o::SparseBlockMatrix
colBlockIndices	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.h	/^    std::vector<int>& colBlockIndices() { return _colBlockIndices;}$/;"	f	class:g2o::SparseBlockMatrix
colBlockIndices	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      const std::vector<int>& colBlockIndices() const { return _colBlockIndices;}$/;"	f	class:g2o::SparseBlockMatrixCCS
colBlockIndices	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      const std::vector<int>& colBlockIndices() const { return _colBlockIndices;}$/;"	f	class:g2o::SparseBlockMatrixHashMap
colInHessian	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        int colInHessian() const {return _colInHessian;}$/;"	f	class:g2o::OptimizableGraph::Vertex
cols	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.h	/^    inline int cols() const {return _colBlockIndices.size() ? _colBlockIndices.back() : 0;}$/;"	f	class:g2o::SparseBlockMatrix
cols	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      int cols() const {return _colBlockIndices.size() ? _colBlockIndices.back() : 0;}$/;"	f	class:g2o::SparseBlockMatrixCCS
cols	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      int cols() const {return _colBlockIndices.size() ? _colBlockIndices.back() : 0;}$/;"	f	class:g2o::SparseBlockMatrixHashMap
cols	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_diagonal.h	/^      int cols() const {return _blockIndices.size() ? _blockIndices.back() : 0;}$/;"	f	class:g2o::SparseBlockMatrixDiagonal
colsOfBlock	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.h	/^    inline int colsOfBlock(int c) const { return c ? _colBlockIndices[c] - _colBlockIndices[c-1] : _colBlockIndices[0]; }$/;"	f	class:g2o::SparseBlockMatrix
colsOfBlock	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      int colsOfBlock(int c) const { return c ? _colBlockIndices[c] - _colBlockIndices[c-1] : _colBlockIndices[0]; }$/;"	f	class:g2o::SparseBlockMatrixCCS
colsOfBlock	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      int colsOfBlock(int c) const { return c ? _colBlockIndices[c] - _colBlockIndices[c-1] : _colBlockIndices[0]; }$/;"	f	class:g2o::SparseBlockMatrixHashMap
computeActiveErrors	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::computeActiveErrors()$/;"	f	class:g2o::SparseOptimizer
computeBatchStatistics	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	/^    bool computeBatchStatistics() const { return _computeBatchStatistics;}$/;"	f	class:g2o::SparseOptimizer
computeCovariance	orb_slam2/Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.cpp	/^void MarginalCovarianceCholesky::computeCovariance(SparseBlockMatrix<MatrixXd>& spinv, const std::vector<int>& rowBlockIndices, const std::vector< std::pair<int, int> >& blockIndices)$/;"	f	class:g2o::MarginalCovarianceCholesky
computeCovariance	orb_slam2/Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.cpp	/^void MarginalCovarianceCholesky::computeCovariance(double** covBlocks, const std::vector<int>& blockIndices)$/;"	f	class:g2o::MarginalCovarianceCholesky
computeDescriptors	orb_slam2/src/ORBextractor.cc	/^static void computeDescriptors(const Mat& image, vector<KeyPoint>& keypoints, Mat& descriptors,$/;"	f	namespace:ORB_SLAM2
computeEntry	orb_slam2/Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.cpp	/^double MarginalCovarianceCholesky::computeEntry(int r, int c)$/;"	f	class:g2o::MarginalCovarianceCholesky
computeError	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.h	/^    void computeError()$/;"	f	class:g2o::EdgeInverseSim3ProjectXYZ
computeError	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.h	/^    void computeError()$/;"	f	class:g2o::EdgeSim3
computeError	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.h	/^    void computeError()$/;"	f	class:g2o::EdgeSim3ProjectXYZ
computeError	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  void computeError()  {$/;"	f	class:g2o::EdgeSE3ProjectXYZ
computeError	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  void computeError()  {$/;"	f	class:g2o::EdgeSE3ProjectXYZOnlyPose
computeError	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  void computeError()  {$/;"	f	class:g2o::EdgeStereoSE3ProjectXYZ
computeError	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  void computeError()  {$/;"	f	class:g2o::EdgeStereoSE3ProjectXYZOnlyPose
computeIndex	orb_slam2/Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.h	/^      int computeIndex(int r, int c) const { \/*assert(r <= c);*\/ return r*_n + c;}$/;"	f	class:g2o::MarginalCovarianceCholesky
computeInitialGuess	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::computeInitialGuess()$/;"	f	class:g2o::SparseOptimizer
computeInitialGuess	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::computeInitialGuess(EstimatePropagatorCost& costFunction)$/;"	f	class:g2o::SparseOptimizer
computeLambdaInit	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.cpp	/^  double OptimizationAlgorithmLevenberg::computeLambdaInit() const$/;"	f	class:g2o::OptimizationAlgorithmLevenberg
computeMarginals	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.hpp	/^bool BlockSolver<Traits>::computeMarginals(SparseBlockMatrix<MatrixXd>& spinv, const std::vector<std::pair<int, int> >& blockIndices)$/;"	f	class:g2o::BlockSolver
computeMarginals	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_with_hessian.cpp	/^  bool OptimizationAlgorithmWithHessian::computeMarginals(SparseBlockMatrix<MatrixXd>& spinv, const std::vector<std::pair<int, int> >& blockIndices)$/;"	f	class:g2o::OptimizationAlgorithmWithHessian
computeMarginals	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  bool SparseOptimizer::computeMarginals(SparseBlockMatrix<MatrixXd>& spinv, const std::vector<std::pair<int, int> >& blockIndices){$/;"	f	class:g2o::SparseOptimizer
computeMarginals	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	/^    bool computeMarginals(SparseBlockMatrix<MatrixXd>& spinv, const Vertex* vertex) {$/;"	f	class:g2o::SparseOptimizer
computeMarginals	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	/^    bool computeMarginals(SparseBlockMatrix<MatrixXd>& spinv, const VertexContainer& vertices) {$/;"	f	class:g2o::SparseOptimizer
computeOrbDescriptor	orb_slam2/src/ORBextractor.cc	/^static void computeOrbDescriptor(const KeyPoint& kpt,$/;"	f	namespace:ORB_SLAM2
computeOrientation	orb_slam2/src/ORBextractor.cc	/^static void computeOrientation(const Mat& image, vector<KeyPoint>& keypoints, const vector<int>& umax)$/;"	f	namespace:ORB_SLAM2
computeQuadraticForm	orb_slam2/Thirdparty/g2o/g2o/core/base_multi_edge.hpp	/^void BaseMultiEdge<D, E>::computeQuadraticForm(const InformationType& omega, const ErrorVector& weightedError)$/;"	f	class:BaseMultiEdge
computeScale	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.cpp	/^  double OptimizationAlgorithmLevenberg::computeScale() const$/;"	f	class:g2o::OptimizationAlgorithmLevenberg
computeSymbolicDecomposition	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_eigen.h	/^    void computeSymbolicDecomposition(const SparseBlockMatrix<MatrixType>& A)$/;"	f	class:g2o::LinearSolverEigen
computeTree	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.cpp	/^  void HyperDijkstra::computeTree(AdjacencyMap& amap)$/;"	f	class:g2o::HyperDijkstra
computeUpperTriangleIndex	orb_slam2/Thirdparty/g2o/g2o/core/base_multi_edge.hpp	/^  inline int computeUpperTriangleIndex(int i, int j)$/;"	f	namespace:internal
compute_A_and_b_gauss_newton	orb_slam2/src/PnPsolver.cc	/^void PnPsolver::compute_A_and_b_gauss_newton(const double * l_6x10, const double * rho,$/;"	f	class:ORB_SLAM2::PnPsolver
compute_L_6x10	orb_slam2/src/PnPsolver.cc	/^void PnPsolver::compute_L_6x10(const double * ut, double * l_6x10)$/;"	f	class:ORB_SLAM2::PnPsolver
compute_R_and_t	orb_slam2/src/PnPsolver.cc	/^double PnPsolver::compute_R_and_t(const double * ut, const double * betas,$/;"	f	class:ORB_SLAM2::PnPsolver
compute_barycentric_coordinates	orb_slam2/src/PnPsolver.cc	/^void PnPsolver::compute_barycentric_coordinates(void)$/;"	f	class:ORB_SLAM2::PnPsolver
compute_ccs	orb_slam2/src/PnPsolver.cc	/^void PnPsolver::compute_ccs(const double * betas, const double * ut)$/;"	f	class:ORB_SLAM2::PnPsolver
compute_pcs	orb_slam2/src/PnPsolver.cc	/^void PnPsolver::compute_pcs(void)$/;"	f	class:ORB_SLAM2::PnPsolver
compute_pose	orb_slam2/src/PnPsolver.cc	/^double PnPsolver::compute_pose(double R[3][3], double t[3])$/;"	f	class:ORB_SLAM2::PnPsolver
compute_rho	orb_slam2/src/PnPsolver.cc	/^void PnPsolver::compute_rho(double * rho)$/;"	f	class:ORB_SLAM2::PnPsolver
connectedSubset	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.cpp	/^  void HyperDijkstra::connectedSubset(HyperGraph::VertexSet& connected, HyperGraph::VertexSet& visited, $/;"	f	class:g2o::HyperDijkstra
construct	orb_slam2/Thirdparty/g2o/g2o/core/creators.h	/^      HyperGraph::HyperGraphElement* construct() { return new T;}$/;"	f	class:g2o::HyperGraphElementCreator
construct	orb_slam2/Thirdparty/g2o/g2o/core/factory.cpp	/^HyperGraph::HyperGraphElement* Factory::construct(const std::string& tag) const$/;"	f	class:g2o::Factory
construct	orb_slam2/Thirdparty/g2o/g2o/core/factory.cpp	/^HyperGraph::HyperGraphElement* Factory::construct(const std::string& tag, const HyperGraph::GraphElemBitset& elemsToConstruct) const$/;"	f	class:g2o::Factory
construct	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.cpp	/^  OptimizationAlgorithm* OptimizationAlgorithmFactory::construct(const std::string& name, OptimizationAlgorithmProperty& solverProperty) const$/;"	f	class:g2o::OptimizationAlgorithmFactory
construct	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.cpp	/^RobustKernel* RobustKernelFactory::construct(const std::string& tag) const$/;"	f	class:g2o::RobustKernelFactory
construct	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.h	/^      RobustKernel* construct() { return new T;}$/;"	f	class:g2o::RobustKernelCreator
constructQuadraticForm	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.hpp	/^void BaseBinaryEdge<D, E, VertexXiType, VertexXjType>::constructQuadraticForm()$/;"	f	class:BaseBinaryEdge
constructQuadraticForm	orb_slam2/Thirdparty/g2o/g2o/core/base_multi_edge.hpp	/^void BaseMultiEdge<D, E>::constructQuadraticForm()$/;"	f	class:BaseMultiEdge
constructQuadraticForm	orb_slam2/Thirdparty/g2o/g2o/core/base_unary_edge.hpp	/^void BaseUnaryEdge<D, E, VertexXiType>::constructQuadraticForm()$/;"	f	class:BaseUnaryEdge
container	orb_slam2/Thirdparty/g2o/g2o/core/cache.cpp	/^  CacheContainer* Cache::container() {$/;"	f	class:g2o::Cache
convertString	orb_slam2/Thirdparty/g2o/g2o/stuff/string_tools.h	/^bool convertString(const std::string& s, T& x, bool failIfLeftoverChars = true)$/;"	f	namespace:g2o
copyB	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^    virtual int copyB(double* b_) const {$/;"	f	class:g2o::BaseVertex
copy_R_and_t	orb_slam2/src/PnPsolver.cc	/^void PnPsolver::copy_R_and_t(const double R_src[3][3], const double t_src[3],$/;"	f	class:ORB_SLAM2::PnPsolver
create	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::create($/;"	f	class:DBoW2::TemplatedVocabulary
createCache	orb_slam2/Thirdparty/g2o/g2o/core/cache.cpp	/^  Cache* CacheContainer::createCache(const Cache::CacheKey& key){$/;"	f	class:g2o::CacheContainer
createFrom	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.hpp	/^OptimizableGraph::Vertex* BaseBinaryEdge<D, E, VertexXiType, VertexXjType>::createFrom(){$/;"	f	class:BaseBinaryEdge
createFrom	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        virtual Vertex* createFrom() {return 0;}$/;"	f	class:g2o::OptimizableGraph::Edge
createScoringObject	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::createScoringObject()$/;"	f	class:DBoW2::TemplatedVocabulary
createTo	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.hpp	/^OptimizableGraph::Vertex* BaseBinaryEdge<D, E, VertexXiType, VertexXjType>::createTo(){$/;"	f	class:BaseBinaryEdge
createTo	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        virtual Vertex* createTo()   {return 0;}$/;"	f	class:g2o::OptimizableGraph::Edge
createValues	orb_slam2/Thirdparty/DBoW2/DUtils/Random.cpp	/^void DUtils::Random::UnrepeatedRandomizer::createValues()$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
createWords	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::createWords()$/;"	f	class:DBoW2::TemplatedVocabulary
creator	orb_slam2/Thirdparty/g2o/g2o/core/factory.h	/^          AbstractHyperGraphElementCreator* creator;$/;"	m	class:g2o::Factory::CreatorInformation
creator	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.cpp	/^AbstractRobustKernelCreator* RobustKernelFactory::creator(const std::string& tag) const$/;"	f	class:g2o::RobustKernelFactory
creatorList	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.h	/^      const CreatorList& creatorList() const { return _creator;}$/;"	f	class:g2o::OptimizationAlgorithmFactory
currentLambda	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.h	/^      double currentLambda() const { return _currentLambda;}$/;"	f	class:g2o::OptimizationAlgorithmLevenberg
current_frame_time_	ros/include/Node.h	/^    ros::Time current_frame_time_;$/;"	m	class:Node
current_position_	orb_slam2/include/System.h	/^    cv::Mat current_position_;$/;"	m	class:ORB_SLAM2::System
currently_localizing_only_	orb_slam2/include/System.h	/^    bool currently_localizing_only_;$/;"	m	class:ORB_SLAM2::System
cws	orb_slam2/include/PnPsolver.h	/^  double cws[4][3], ccs[4][3];$/;"	m	class:ORB_SLAM2::PnPsolver
cws_determinant	orb_slam2/include/PnPsolver.h	/^  double cws_determinant;$/;"	m	class:ORB_SLAM2::PnPsolver
cx	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  double fx, fy, cx, cy, bf;$/;"	m	class:g2o::EdgeStereoSE3ProjectXYZ
cx	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  double fx, fy, cx, cy, bf;$/;"	m	class:g2o::EdgeStereoSE3ProjectXYZOnlyPose
cx	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  double fx, fy, cx, cy;$/;"	m	class:g2o::EdgeSE3ProjectXYZ
cx	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  double fx, fy, cx, cy;$/;"	m	class:g2o::EdgeSE3ProjectXYZOnlyPose
cx	orb_slam2/include/Frame.h	/^    static float cx;$/;"	m	class:ORB_SLAM2::Frame
cx	orb_slam2/include/KeyFrame.h	/^    const float fx, fy, cx, cy, invfx, invfy, mbf, mb, mThDepth;$/;"	m	class:ORB_SLAM2::KeyFrame
cx	orb_slam2/include/Tracking.h	/^    float fx, fy, cx, cy, baseline;$/;"	m	struct:ORB_SLAM2::ORBParameters
cx	orb_slam2/src/Frame.cc	/^float Frame::cx, Frame::cy, Frame::fx, Frame::fy, Frame::invfx, Frame::invfy;$/;"	m	class:ORB_SLAM2::Frame	file:
cy	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  double fx, fy, cx, cy, bf;$/;"	m	class:g2o::EdgeStereoSE3ProjectXYZ
cy	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  double fx, fy, cx, cy, bf;$/;"	m	class:g2o::EdgeStereoSE3ProjectXYZOnlyPose
cy	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  double fx, fy, cx, cy;$/;"	m	class:g2o::EdgeSE3ProjectXYZ
cy	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  double fx, fy, cx, cy;$/;"	m	class:g2o::EdgeSE3ProjectXYZOnlyPose
cy	orb_slam2/include/Frame.h	/^    static float cy;$/;"	m	class:ORB_SLAM2::Frame
cy	orb_slam2/include/KeyFrame.h	/^    const float fx, fy, cx, cy, invfx, invfy, mbf, mb, mThDepth;$/;"	m	class:ORB_SLAM2::KeyFrame
cy	orb_slam2/include/Tracking.h	/^    float fx, fy, cx, cy, baseline;$/;"	m	struct:ORB_SLAM2::ORBParameters
cy	orb_slam2/src/Frame.cc	/^float Frame::cx, Frame::cy, Frame::fx, Frame::fy, Frame::invfx, Frame::invfy;$/;"	m	class:ORB_SLAM2::Frame	file:
deallocate	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.hpp	/^void BlockSolver<Traits>::deallocate()$/;"	f	class:g2o::BlockSolver
deg2rad	orb_slam2/Thirdparty/g2o/g2o/stuff/misc.h	/^inline double deg2rad(double degree)$/;"	f	namespace:g2o
delta	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel.h	/^      double delta() const { return _delta;}$/;"	f	class:g2o::RobustKernel
deltaR	orb_slam2/Thirdparty/g2o/g2o/types/se3_ops.hpp	/^  Vector3d deltaR(const Matrix3d& R)$/;"	f
depthMapFactor	orb_slam2/include/Tracking.h	/^    float scaleFactor, depthMapFactor, thDepth;$/;"	m	struct:ORB_SLAM2::ORBParameters
depth_subscriber_	ros/include/RGBDNode.h	/^    message_filters::Subscriber<sensor_msgs::Image> *depth_subscriber_;$/;"	m	class:RGBDNode
desc	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_property.h	/^  std::string desc;           \/\/\/< short description of the solver$/;"	m	struct:g2o::OptimizationAlgorithmProperty
descriptor	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^    TDescriptor descriptor;$/;"	m	struct:DBoW2::TemplatedVocabulary::Node
destroy	orb_slam2/Thirdparty/g2o/g2o/core/factory.cpp	/^void Factory::destroy()$/;"	f	class:g2o::Factory
destroy	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  void HyperGraphActionLibrary::destroy()$/;"	f	class:g2o::HyperGraphActionLibrary
destroy	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.cpp	/^  void OptimizationAlgorithmFactory::destroy()$/;"	f	class:g2o::OptimizationAlgorithmFactory
destroy	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.cpp	/^void RobustKernelFactory::destroy()$/;"	f	class:g2o::RobustKernelFactory
detachParameter	orb_slam2/Thirdparty/g2o/g2o/core/parameter_container.cpp	/^  Parameter* ParameterContainer::detachParameter(int id){$/;"	f	class:g2o::ParameterContainer
diagonal	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_diagonal.h	/^      DiagonalVector& diagonal() { return _diagonal;}$/;"	f	class:g2o::SparseBlockMatrixDiagonal
diagonal	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_diagonal.h	/^      const DiagonalVector& diagonal() const { return _diagonal;}$/;"	f	class:g2o::SparseBlockMatrixDiagonal
dimOfBlock	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_diagonal.h	/^      inline int dimOfBlock(int r) const { return r ? _blockIndices[r] - _blockIndices[r-1] : _blockIndices[0] ; }$/;"	f	class:g2o::SparseBlockMatrixDiagonal
dimension	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        int dimension() const { return _dimension;}$/;"	f	class:g2o::OptimizableGraph::Edge
dimension	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        int dimension() const { return _dimension;}$/;"	f	class:g2o::OptimizableGraph::Vertex
dimensions	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^std::set<int> OptimizableGraph::dimensions() const$/;"	f	class:g2o::OptimizableGraph
discardTop	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^    virtual void discardTop() { assert(!_backup.empty()); _backup.pop();}$/;"	f	class:g2o::BaseVertex
discardTop	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::discardTop()$/;"	f	class:g2o::OptimizableGraph
discardTop	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::discardTop(HyperGraph::VertexSet& vset)$/;"	f	class:g2o::OptimizableGraph
discardTop	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::discardTop()$/;"	f	class:g2o::SparseOptimizer
discardTop	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::discardTop(SparseOptimizer::VertexContainer& vlist)$/;"	f	class:g2o::SparseOptimizer
dist2	orb_slam2/src/PnPsolver.cc	/^double PnPsolver::dist2(const double * p1, const double * p2)$/;"	f	class:ORB_SLAM2::PnPsolver
distance	orb_slam2/Thirdparty/DBoW2/DBoW2/FORB.cpp	/^int FORB::distance(const FORB::TDescriptor &a,$/;"	f	class:DBoW2::FORB
distance	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^          double distance() const {return _distance;}$/;"	f	class:g2o::EstimatePropagator::AdjacencyMapEntry
distance	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.h	/^      double distance() const {return _distance;}$/;"	f	struct:g2o::HyperDijkstra::AdjacencyMapEntry
dot	orb_slam2/src/PnPsolver.cc	/^double PnPsolver::dot(const double * v1, const double * v2)$/;"	f	class:ORB_SLAM2::PnPsolver
drand48	orb_slam2/Thirdparty/g2o/g2o/stuff/os_specific.h	37;"	d
dsqr	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.h	/^      float dsqr;$/;"	m	class:g2o::RobustKernelHuber
dynamic_param_server_	ros/include/Node.h	/^    dynamic_reconfigure::Server<orb_slam2_ros::dynamic_reconfigureConfig> dynamic_param_server_;$/;"	m	class:Node
eSensor	orb_slam2/include/System.h	/^    enum eSensor{$/;"	g	class:ORB_SLAM2::System
eTrackingState	orb_slam2/include/Tracking.h	/^    enum eTrackingState{$/;"	g	class:ORB_SLAM2::Tracking
edge	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^          OptimizableGraph::Edge* edge() const {return _edge;}$/;"	f	class:g2o::EstimatePropagator::AdjacencyMapEntry
edge	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.h	/^      HyperGraph::Edge* edge() const {return _edge;}$/;"	f	struct:g2o::HyperDijkstra::AdjacencyMapEntry
edges	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^          EdgeSet& edges() {return _edges;}$/;"	f	class:g2o::HyperGraph::Vertex
edges	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^          const EdgeSet& edges() const {return _edges;}$/;"	f	class:g2o::HyperGraph::Vertex
edges	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^      EdgeSet& edges() {return _edges;}$/;"	f	class:g2o::HyperGraph
edges	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^      const EdgeSet& edges() const {return _edges;}$/;"	f	class:g2o::HyperGraph
elementType	orb_slam2/Thirdparty/g2o/g2o/core/cache.h	/^      virtual HyperGraph::HyperGraphElementType elementType() const { return HyperGraph::HGET_CACHE;}$/;"	f	class:g2o::Cache
elementType	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^          virtual HyperGraphElementType elementType() const { return HGET_EDGE;}$/;"	f	class:g2o::HyperGraph::Edge
elementType	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^          virtual HyperGraphElementType elementType() const { return HGET_VERTEX;}$/;"	f	class:g2o::HyperGraph::Vertex
elementType	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        virtual HyperGraph::HyperGraphElementType elementType() const { return HyperGraph::HGET_DATA;}$/;"	f	class:g2o::OptimizableGraph::Data
elementType	orb_slam2/Thirdparty/g2o/g2o/core/parameter.h	/^        virtual HyperGraph::HyperGraphElementType elementType() const { return HyperGraph::HGET_PARAMETER;}$/;"	f	class:g2o::Parameter
elementTypeBit	orb_slam2/Thirdparty/g2o/g2o/core/factory.h	/^          int elementTypeBit;$/;"	m	class:g2o::Factory::CreatorInformation
empty	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^inline bool TemplatedVocabulary<TDescriptor,F>::empty() const$/;"	f	class:DBoW2::TemplatedVocabulary
empty	orb_slam2/Thirdparty/DBoW2/DUtils/Random.h	/^  inline bool empty() const { return m_values.empty(); }$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
empty	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.cpp	/^bool Timestamp::empty() const$/;"	f	class:Timestamp
erase	orb_slam2/src/KeyFrameDatabase.cc	/^void KeyFrameDatabase::erase(KeyFrame* pKF)$/;"	f	class:ORB_SLAM2::KeyFrameDatabase
eraseProperty	orb_slam2/Thirdparty/g2o/g2o/stuff/property.cpp	/^  bool PropertyMap::eraseProperty(const std::string& name) {$/;"	f	class:g2o::PropertyMap
error	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	/^      ErrorVector& error() { return _error;}$/;"	f	class:g2o::BaseEdge
error	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	/^      const ErrorVector& error() const { return _error;}$/;"	f	class:g2o::BaseEdge
errorData	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	/^      virtual const double* errorData() const { return _error.data();}$/;"	f	class:g2o::BaseEdge
errorData	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	/^      virtual double* errorData() { return _error.data();}$/;"	f	class:g2o::BaseEdge
estimate	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^    const EstimateType& estimate() const { return _estimate;}$/;"	f	class:g2o::BaseVertex
estimateDimension	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  int OptimizableGraph::Vertex::estimateDimension() const$/;"	f	class:g2o::OptimizableGraph::Vertex
estimate_R_and_t	orb_slam2/src/PnPsolver.cc	/^void PnPsolver::estimate_R_and_t(double R[3][3], double t[3])$/;"	f	class:ORB_SLAM2::PnPsolver
exp	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^      static SE3Quat exp(const Vector6d & update)$/;"	f	class:g2o::SE3Quat
fIniThFAST	orb_slam2/include/Tracking.h	/^    int fIniThFAST;$/;"	m	class:ORB_SLAM2::Tracking
fMinThFAST	orb_slam2/include/Tracking.h	/^    int fMinThFAST;$/;"	m	class:ORB_SLAM2::Tracking
fScaleFactor	orb_slam2/include/Tracking.h	/^    float fScaleFactor;$/;"	m	class:ORB_SLAM2::Tracking
factorPI	orb_slam2/src/ORBextractor.cc	/^const float factorPI = (float)(CV_PI\/180.f);$/;"	m	namespace:ORB_SLAM2	file:
factoryInstance	orb_slam2/Thirdparty/g2o/g2o/core/factory.cpp	/^Factory* Factory::factoryInstance = 0;$/;"	m	class:g2o::Factory	file:
factoryInstance	orb_slam2/Thirdparty/g2o/g2o/core/factory.h	/^      static Factory* factoryInstance;$/;"	m	class:g2o::Factory
factoryInstance	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.cpp	/^  OptimizationAlgorithmFactory* OptimizationAlgorithmFactory::factoryInstance = 0;$/;"	m	class:g2o::OptimizationAlgorithmFactory	file:
factoryInstance	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.h	/^      static OptimizationAlgorithmFactory* factoryInstance;$/;"	m	class:g2o::OptimizationAlgorithmFactory
factoryInstance	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.cpp	/^RobustKernelFactory* RobustKernelFactory::factoryInstance = 0;$/;"	m	class:g2o::RobustKernelFactory	file:
factoryInstance	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.h	/^      static RobustKernelFactory* factoryInstance;$/;"	m	class:g2o::RobustKernelFactory
fillBlockStructure	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^  void SparseBlockMatrix<MatrixType>::fillBlockStructure(MatrixStructure& ms) const$/;"	f	class:g2o::SparseBlockMatrix
fillCCS	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^  int SparseBlockMatrix<MatrixType>::fillCCS(double* Cx, bool upperTriangle) const$/;"	f	class:g2o::SparseBlockMatrix
fillCCS	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^  int SparseBlockMatrix<MatrixType>::fillCCS(int* Cp, int* Ci, double* Cx, bool upperTriangle) const$/;"	f	class:g2o::SparseBlockMatrix
fillCCS	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      int fillCCS(double* Cx, bool upperTriangle = false) const$/;"	f	class:g2o::SparseBlockMatrixCCS
fillCCS	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      int fillCCS(int* Cp, int* Ci, double* Cx, bool upperTriangle = false) const$/;"	f	class:g2o::SparseBlockMatrixCCS
fillKnownKernels	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.cpp	/^void RobustKernelFactory::fillKnownKernels(std::vector<std::string>& types) const$/;"	f	class:g2o::RobustKernelFactory
fillKnownTypes	orb_slam2/Thirdparty/g2o/g2o/core/factory.cpp	/^void Factory::fillKnownTypes(std::vector<std::string>& types) const$/;"	f	class:g2o::Factory
fillSparseBlockMatrixCCS	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^  int SparseBlockMatrix<MatrixType>::fillSparseBlockMatrixCCS(SparseBlockMatrixCCS<MatrixType>& blockCCS) const$/;"	f	class:g2o::SparseBlockMatrix
fillSparseBlockMatrixCCSTransposed	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^  int SparseBlockMatrix<MatrixType>::fillSparseBlockMatrixCCSTransposed(SparseBlockMatrixCCS<MatrixType>& blockCCS) const$/;"	f	class:g2o::SparseBlockMatrix
fillSparseMatrix	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_eigen.h	/^    void fillSparseMatrix(const SparseBlockMatrix<MatrixType>& A, bool onlyValues)$/;"	f	class:g2o::LinearSolverEigen
fill_M	orb_slam2/src/PnPsolver.cc	/^void PnPsolver::fill_M(CvMat * M,$/;"	f	class:ORB_SLAM2::PnPsolver
find	orb_slam2/src/PnPsolver.cc	/^cv::Mat PnPsolver::find(vector<bool> &vbInliers, int &nInliers)$/;"	f	class:ORB_SLAM2::PnPsolver
find	orb_slam2/src/Sim3Solver.cc	/^cv::Mat Sim3Solver::find(vector<bool> &vbInliers12, int &nInliers)$/;"	f	class:ORB_SLAM2::Sim3Solver
findActiveEdge	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  SparseOptimizer::EdgeContainer::const_iterator SparseOptimizer::findActiveEdge(const OptimizableGraph::Edge* e) const$/;"	f	class:g2o::SparseOptimizer
findActiveVertex	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  SparseOptimizer::VertexContainer::const_iterator SparseOptimizer::findActiveVertex(const OptimizableGraph::Vertex* v) const$/;"	f	class:g2o::SparseOptimizer
findCache	orb_slam2/Thirdparty/g2o/g2o/core/cache.cpp	/^  Cache* CacheContainer::findCache(const Cache::CacheKey& key) {$/;"	f	class:g2o::CacheContainer
findGauge	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  OptimizableGraph::Vertex* SparseOptimizer::findGauge(){$/;"	f	class:g2o::SparseOptimizer
findSolver	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.cpp	/^  OptimizationAlgorithmFactory::CreatorList::const_iterator OptimizationAlgorithmFactory::findSolver(const std::string& name) const$/;"	f	class:g2o::OptimizationAlgorithmFactory
findSolver	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.cpp	/^  OptimizationAlgorithmFactory::CreatorList::iterator OptimizationAlgorithmFactory::findSolver(const std::string& name)$/;"	f	class:g2o::OptimizationAlgorithmFactory
find_betas_approx_1	orb_slam2/src/PnPsolver.cc	/^void PnPsolver::find_betas_approx_1(const CvMat * L_6x10, const CvMat * Rho,$/;"	f	class:ORB_SLAM2::PnPsolver
find_betas_approx_2	orb_slam2/src/PnPsolver.cc	/^void PnPsolver::find_betas_approx_2(const CvMat * L_6x10, const CvMat * Rho,$/;"	f	class:ORB_SLAM2::PnPsolver
find_betas_approx_3	orb_slam2/src/PnPsolver.cc	/^void PnPsolver::find_betas_approx_3(const CvMat * L_6x10, const CvMat * Rho,$/;"	f	class:ORB_SLAM2::PnPsolver
fixed	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        bool fixed() const {return _fixed;}$/;"	f	class:g2o::OptimizableGraph::Vertex
forceStopFlag	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	/^    bool* forceStopFlag() const { return _forceStopFlag;};$/;"	f	class:g2o::SparseOptimizer
formatString	orb_slam2/Thirdparty/g2o/g2o/stuff/string_tools.cpp	/^std::string formatString(const char* fmt, ...)$/;"	f	namespace:g2o
free	orb_slam2/Thirdparty/g2o/g2o/core/matrix_structure.cpp	/^void MatrixStructure::free()$/;"	f	class:g2o::MatrixStructure
fromArray8U	orb_slam2/Thirdparty/DBoW2/DBoW2/FORB.cpp	/^void FORB::fromArray8U(TDescriptor &descriptors, unsigned char * array)$/;"	f	class:DBoW2::FORB
fromMinimalVector	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^      inline void fromMinimalVector(const Vector6d& v){$/;"	f	class:g2o::SE3Quat
fromString	orb_slam2/Thirdparty/DBoW2/DBoW2/FORB.cpp	/^void FORB::fromString(FORB::TDescriptor &a, const std::string &s)$/;"	f	class:DBoW2::FORB
fromString	orb_slam2/Thirdparty/g2o/g2o/stuff/property.h	/^      virtual bool fromString(const std::string& s)$/;"	f	class:g2o::Property
fromVector	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^      inline void fromVector(const Vector7d& v){$/;"	f	class:g2o::SE3Quat
frontierLevel	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^          int frontierLevel() const { return _frontierLevel;}$/;"	f	class:g2o::EstimatePropagator::AdjacencyMapEntry
fu	orb_slam2/include/PnPsolver.h	/^  double uc, vc, fu, fv;$/;"	m	class:ORB_SLAM2::PnPsolver
fv	orb_slam2/include/PnPsolver.h	/^  double uc, vc, fu, fv;$/;"	m	class:ORB_SLAM2::PnPsolver
fx	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  double fx, fy, cx, cy, bf;$/;"	m	class:g2o::EdgeStereoSE3ProjectXYZ
fx	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  double fx, fy, cx, cy, bf;$/;"	m	class:g2o::EdgeStereoSE3ProjectXYZOnlyPose
fx	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  double fx, fy, cx, cy;$/;"	m	class:g2o::EdgeSE3ProjectXYZ
fx	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  double fx, fy, cx, cy;$/;"	m	class:g2o::EdgeSE3ProjectXYZOnlyPose
fx	orb_slam2/include/Frame.h	/^    static float fx;$/;"	m	class:ORB_SLAM2::Frame
fx	orb_slam2/include/KeyFrame.h	/^    const float fx, fy, cx, cy, invfx, invfy, mbf, mb, mThDepth;$/;"	m	class:ORB_SLAM2::KeyFrame
fx	orb_slam2/include/Tracking.h	/^    float fx, fy, cx, cy, baseline;$/;"	m	struct:ORB_SLAM2::ORBParameters
fx	orb_slam2/src/Frame.cc	/^float Frame::cx, Frame::cy, Frame::fx, Frame::fy, Frame::invfx, Frame::invfy;$/;"	m	class:ORB_SLAM2::Frame	file:
fy	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  double fx, fy, cx, cy, bf;$/;"	m	class:g2o::EdgeStereoSE3ProjectXYZ
fy	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  double fx, fy, cx, cy, bf;$/;"	m	class:g2o::EdgeStereoSE3ProjectXYZOnlyPose
fy	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  double fx, fy, cx, cy;$/;"	m	class:g2o::EdgeSE3ProjectXYZ
fy	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  double fx, fy, cx, cy;$/;"	m	class:g2o::EdgeSE3ProjectXYZOnlyPose
fy	orb_slam2/include/Frame.h	/^    static float fy;$/;"	m	class:ORB_SLAM2::Frame
fy	orb_slam2/include/KeyFrame.h	/^    const float fx, fy, cx, cy, invfx, invfy, mbf, mb, mThDepth;$/;"	m	class:ORB_SLAM2::KeyFrame
fy	orb_slam2/include/Tracking.h	/^    float fx, fy, cx, cy, baseline;$/;"	m	struct:ORB_SLAM2::ORBParameters
fy	orb_slam2/src/Frame.cc	/^float Frame::cx, Frame::cy, Frame::fx, Frame::fy, Frame::invfx, Frame::invfy;$/;"	m	class:ORB_SLAM2::Frame	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/base_multi_edge.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/base_unary_edge.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.hpp	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/cache.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/core/cache.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/creators.h	/^namespace g2o$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/eigen_types.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/factory.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/core/factory.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.cpp	/^namespace g2o{$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.h	/^namespace g2o{$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/jacobian_workspace.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/core/jacobian_workspace.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/linear_solver.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/matrix_operations.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/matrix_structure.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/core/matrix_structure.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/openmp_mutex.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_gauss_newton.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_gauss_newton.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_property.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_with_hessian.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_with_hessian.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/parameter.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/core/parameter.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/parameter_container.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/core/parameter_container.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/solver.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/core/solver.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_diagonal.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^namespace g2o{$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_dense.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_eigen.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/stuff/misc.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/stuff/property.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/stuff/property.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/stuff/string_tools.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/stuff/string_tools.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/stuff/timeutil.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/stuff/timeutil.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/types/se3_ops.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/types/sim3.h	/^namespace g2o$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/types/types_sba.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/types/types_sba.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.h	/^namespace g2o {$/;"	n
g2o	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.cpp	/^namespace g2o {$/;"	n	file:
g2o	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^namespace g2o {$/;"	n
g2o_isfinite	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	107;"	d
g2o_isfinite	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	53;"	d
g2o_isfinite	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	57;"	d
g2o_isfinite	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	90;"	d
g2o_isinf	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	106;"	d
g2o_isinf	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	52;"	d
g2o_isinf	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	56;"	d
g2o_isinf	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	89;"	d
g2o_isnan	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	105;"	d
g2o_isnan	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	51;"	d
g2o_isnan	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	55;"	d
g2o_isnan	orb_slam2/Thirdparty/g2o/g2o/stuff/macros.h	88;"	d
gaugeFreedom	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  bool SparseOptimizer::gaugeFreedom()$/;"	f	class:g2o::SparseOptimizer
gauss_newton	orb_slam2/src/PnPsolver.cc	/^void PnPsolver::gauss_newton(const CvMat * L_6x10, const CvMat * Rho,$/;"	f	class:ORB_SLAM2::PnPsolver
gen	ros/config/dynamic_reconfigure.cfg	/^gen = ParameterGenerator()$/;"	v
get	orb_slam2/Thirdparty/DBoW2/DUtils/Random.cpp	/^int DUtils::Random::UnrepeatedRandomizer::get()$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
getBranchingFactor	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^  inline int getBranchingFactor() const { return m_k; }$/;"	f	class:DBoW2::TemplatedVocabulary
getDepthLevels	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^  inline int getDepthLevels() const { return m_L; }$/;"	f	class:DBoW2::TemplatedVocabulary
getEffectiveLevels	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^float TemplatedVocabulary<TDescriptor,F>::getEffectiveLevels() const$/;"	f	class:DBoW2::TemplatedVocabulary
getEstimateData	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Vertex::getEstimateData(double *) const$/;"	f	class:g2o::OptimizableGraph::Vertex
getEstimateData	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        virtual bool getEstimateData(std::vector<double>& estimate) const {$/;"	f	class:g2o::OptimizableGraph::Vertex
getFeatures	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::getFeatures($/;"	f	class:DBoW2::TemplatedVocabulary
getFloatTime	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.cpp	/^double Timestamp::getFloatTime() const {$/;"	f	class:Timestamp
getMeasurementData	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Edge::getMeasurementData(double *) const$/;"	f	class:g2o::OptimizableGraph::Edge
getMinimalEstimateData	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Vertex::getMinimalEstimateData(double *) const$/;"	f	class:g2o::OptimizableGraph::Vertex
getMinimalEstimateData	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        virtual bool getMinimalEstimateData(std::vector<double>& estimate) const {$/;"	f	class:g2o::OptimizableGraph::Vertex
getParameter	orb_slam2/Thirdparty/g2o/g2o/core/parameter_container.cpp	/^  Parameter* ParameterContainer::getParameter(int id) {$/;"	f	class:g2o::ParameterContainer
getParentNode	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^NodeId TemplatedVocabulary<TDescriptor,F>::getParentNode$/;"	f	class:DBoW2::TemplatedVocabulary
getProperty	orb_slam2/Thirdparty/g2o/g2o/stuff/property.h	/^      P* getProperty(const std::string& name_)$/;"	f	class:g2o::PropertyMap
getProperty	orb_slam2/Thirdparty/g2o/g2o/stuff/property.h	/^      const P* getProperty(const std::string& name_) const$/;"	f	class:g2o::PropertyMap
getScoringType	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^  inline ScoringType getScoringType() const { return m_scoring; }$/;"	f	class:DBoW2::TemplatedVocabulary
getStringTime	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.cpp	/^string Timestamp::getStringTime() const {$/;"	f	class:Timestamp
getTime	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.h	/^	inline void getTime(unsigned long &secs, unsigned long &usecs) const$/;"	f	class:DUtils::Timestamp
getWeightingType	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^  inline WeightingType getWeightingType() const { return m_weighting; }$/;"	f	class:DBoW2::TemplatedVocabulary
getWord	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^TDescriptor TemplatedVocabulary<TDescriptor,F>::getWord(WordId wid) const$/;"	f	class:DBoW2::TemplatedVocabulary
getWordWeight	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^WordValue TemplatedVocabulary<TDescriptor, F>::getWordWeight(WordId wid) const$/;"	f	class:DBoW2::TemplatedVocabulary
getWordsFromNode	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::getWordsFromNode$/;"	f	class:DBoW2::TemplatedVocabulary
get_monotonic_time	orb_slam2/Thirdparty/g2o/g2o/stuff/timeutil.cpp	/^double get_monotonic_time()$/;"	f	namespace:g2o
get_time	orb_slam2/Thirdparty/g2o/g2o/stuff/timeutil.h	/^inline double get_time() $/;"	f	namespace:g2o
gettimeofday	orb_slam2/Thirdparty/g2o/g2o/stuff/timeutil.cpp	/^int gettimeofday(struct timeval *tv, struct timezone *tz)$/;"	f	namespace:g2o
globalStats	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	/^    static G2OBatchStatistics* globalStats() {return _globalStats;}$/;"	f	struct:g2o::G2OBatchStatistics
graph	orb_slam2/Thirdparty/g2o/g2o/core/cache.cpp	/^  OptimizableGraph* Cache::graph() {$/;"	f	class:g2o::Cache
graph	orb_slam2/Thirdparty/g2o/g2o/core/cache.cpp	/^  OptimizableGraph* CacheContainer::graph(){$/;"	f	class:g2o::CacheContainer
graph	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^      OptimizableGraph* graph() {return _graph;} $/;"	f	class:g2o::EstimatePropagator
graph	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.h	/^    HyperGraph* graph() {return _graph;} $/;"	f	struct:g2o::HyperDijkstra
graph	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph* OptimizableGraph::Edge::graph(){$/;"	f	class:g2o::OptimizableGraph::Edge
graph	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  const OptimizableGraph* OptimizableGraph::Edge::graph() const{$/;"	f	class:g2o::OptimizableGraph::Edge
graph	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        OptimizableGraph* graph() {return _graph;}$/;"	f	class:g2o::OptimizableGraph::Vertex
graph	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        const OptimizableGraph* graph() const {return _graph;}$/;"	f	class:g2o::OptimizableGraph::Vertex
hasChild	orb_slam2/src/KeyFrame.cc	/^bool KeyFrame::hasChild(KeyFrame *pKF)$/;"	f	class:ORB_SLAM2::KeyFrame
hessian	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^    virtual const double& hessian(int i, int j) const { assert(i<D && j<D); return _hessian(i,j);}$/;"	f	class:g2o::BaseVertex
hessian	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^    virtual double& hessian(int i, int j)  { assert(i<D && j<D); return _hessian(i,j);}$/;"	f	class:g2o::BaseVertex
hessianData	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^    virtual double* hessianData() { return const_cast<double*>(_hessian.data());}$/;"	f	class:g2o::BaseVertex
hessianDeterminant	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^    virtual double hessianDeterminant() const {return _hessian.determinant();}$/;"	f	class:g2o::BaseVertex
hessianDimension	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	/^    size_t hessianDimension;          \/\/\/< rows \/ cols of the Hessian$/;"	m	struct:g2o::G2OBatchStatistics
hessianIndex	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        int hessianIndex() const { return _hessianIndex;}$/;"	f	class:g2o::OptimizableGraph::Vertex
hessianLandmarkDimension	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	/^    size_t hessianLandmarkDimension;  \/\/\/< dimension of the landmark matrix in Schur$/;"	m	struct:g2o::G2OBatchStatistics
hessianPoseDimension	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	/^    size_t hessianPoseDimension;      \/\/\/< dimension of the pose matrix in Schur$/;"	m	struct:g2o::G2OBatchStatistics
hypot	orb_slam2/Thirdparty/g2o/g2o/stuff/misc.h	/^inline T hypot(T x, T y)$/;"	f	namespace:g2o
hypot_sqr	orb_slam2/Thirdparty/g2o/g2o/stuff/misc.h	/^inline T hypot_sqr(T x, T y)$/;"	f	namespace:g2o
id	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^    NodeId id;$/;"	m	struct:DBoW2::TemplatedVocabulary::Node
id	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^          int id() const {return _id;}$/;"	f	class:g2o::HyperGraph::Edge
id	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^          int id() const {return _id;}$/;"	f	class:g2o::HyperGraph::Vertex
id	orb_slam2/Thirdparty/g2o/g2o/core/parameter.h	/^        int id() const {return _id;}$/;"	f	class:g2o::Parameter
image_subscriber	ros/include/MonoNode.h	/^    image_transport::Subscriber image_subscriber;$/;"	m	class:MonoNode
image_transport_	ros/include/Node.h	/^    image_transport::ImageTransport image_transport_;$/;"	m	class:Node
inQueue	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^          bool inQueue;$/;"	m	class:g2o::EstimatePropagator::AdjacencyMapEntry
indexMapping	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	/^    const VertexContainer& indexMapping() const {return _ivMap;}$/;"	f	class:g2o::SparseOptimizer
information	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	/^      InformationType& information() { return _information;}$/;"	f	class:g2o::BaseEdge
information	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	/^      const InformationType& information() const { return _information;}$/;"	f	class:g2o::BaseEdge
informationData	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	/^      virtual const double* informationData() const { return _information.data();}$/;"	f	class:g2o::BaseEdge
informationData	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	/^      virtual double* informationData() { return _information.data();}$/;"	f	class:g2o::BaseEdge
iniThFAST	orb_slam2/include/ORBextractor.h	/^    int iniThFAST;$/;"	m	class:ORB_SLAM2::ORBextractor
iniThFAST	orb_slam2/include/Tracking.h	/^    int maxFrames, nFeatures, nLevels, iniThFAST, minThFAST;$/;"	m	struct:ORB_SLAM2::ORBParameters
init	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.hpp	/^bool BlockSolver<Traits>::init(SparseOptimizer* optimizer, bool online)$/;"	f	class:g2o::BlockSolver
init	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_with_hessian.cpp	/^  bool OptimizationAlgorithmWithHessian::init(bool online)$/;"	f	class:g2o::OptimizationAlgorithmWithHessian
init	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_dense.h	/^      virtual bool init()$/;"	f	class:g2o::LinearSolverDense
init	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_eigen.h	/^    virtual bool init()$/;"	f	class:g2o::LinearSolverEigen
initMatrixStructure	orb_slam2/Thirdparty/g2o/g2o/core/linear_solver.h	/^    void initMatrixStructure(const SparseBlockMatrix<MatrixType>& A)$/;"	f	class:g2o::LinearSolverCCS
initMultiThreading	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::initMultiThreading()$/;"	f	class:g2o::OptimizableGraph
initialEstimate	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	/^      virtual void initialEstimate(const OptimizableGraph::VertexSet&, OptimizableGraph::Vertex*)$/;"	f	class:g2o::BaseEdge
initialEstimate	orb_slam2/Thirdparty/g2o/g2o/core/base_unary_edge.hpp	/^void BaseUnaryEdge<D, E, VertexXiType>::initialEstimate(const OptimizableGraph::VertexSet&, OptimizableGraph::Vertex*)$/;"	f	class:BaseUnaryEdge
initialEstimate	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.h	/^    virtual void initialEstimate(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* \/*to*\/)$/;"	f	class:g2o::EdgeSim3
initialEstimatePossible	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* to) { (void) from; (void) to; return -1.;}$/;"	f	class:g2o::OptimizableGraph::Edge
initialEstimatePossible	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.h	/^    virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& , OptimizableGraph::Vertex* ) { return 1.;}$/;"	f	class:g2o::EdgeSim3
initializeOptimization	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  bool SparseOptimizer::initializeOptimization(HyperGraph::EdgeSet& eset){$/;"	f	class:g2o::SparseOptimizer
initializeOptimization	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  bool SparseOptimizer::initializeOptimization(HyperGraph::VertexSet& vset, int level){$/;"	f	class:g2o::SparseOptimizer
initializeOptimization	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  bool SparseOptimizer::initializeOptimization(int level){$/;"	f	class:g2o::SparseOptimizer
initiateClusters	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor, F>::initiateClusters$/;"	f	class:DBoW2::TemplatedVocabulary
initiateClustersKMpp	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::initiateClustersKMpp($/;"	f	class:DBoW2::TemplatedVocabulary
installDependency	orb_slam2/Thirdparty/g2o/g2o/core/cache.cpp	/^  Cache* Cache::installDependency(const std::string& type_, const std::vector<int>& parameterIndices){$/;"	f	class:g2o::Cache
installParameter	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^          bool installParameter(ParameterType*& p, size_t argNo, int paramId=-1){$/;"	f	class:g2o::OptimizableGraph::Edge
instance	orb_slam2/Thirdparty/g2o/g2o/core/factory.cpp	/^Factory* Factory::instance()$/;"	f	class:g2o::Factory
instance	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  HyperGraphActionLibrary* HyperGraphActionLibrary::instance()$/;"	f	class:g2o::HyperGraphActionLibrary
instance	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.cpp	/^  OptimizationAlgorithmFactory* OptimizationAlgorithmFactory::instance()$/;"	f	class:g2o::OptimizationAlgorithmFactory
instance	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.cpp	/^RobustKernelFactory* RobustKernelFactory::instance()$/;"	f	class:g2o::RobustKernelFactory
internal	orb_slam2/Thirdparty/g2o/g2o/core/base_multi_edge.hpp	/^namespace internal {$/;"	n
internal	orb_slam2/Thirdparty/g2o/g2o/core/matrix_operations.h	/^  namespace internal {$/;"	n	namespace:g2o
internalId	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        long long internalId() const { return _internalId;}$/;"	f	class:g2o::OptimizableGraph::Edge
inverse	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^      inline SE3Quat inverse() const{$/;"	f	class:g2o::SE3Quat
inverse	orb_slam2/Thirdparty/g2o/g2o/types/sim3.h	/^    Sim3 inverse() const$/;"	f	struct:g2o::Sim3
inverse_theta	orb_slam2/Thirdparty/g2o/g2o/stuff/misc.h	/^inline double inverse_theta(double th)$/;"	f	namespace:g2o
invfx	orb_slam2/include/Frame.h	/^    static float invfx;$/;"	m	class:ORB_SLAM2::Frame
invfx	orb_slam2/include/KeyFrame.h	/^    const float fx, fy, cx, cy, invfx, invfy, mbf, mb, mThDepth;$/;"	m	class:ORB_SLAM2::KeyFrame
invfx	orb_slam2/src/Frame.cc	/^float Frame::cx, Frame::cy, Frame::fx, Frame::fy, Frame::invfx, Frame::invfy;$/;"	m	class:ORB_SLAM2::Frame	file:
invfy	orb_slam2/include/Frame.h	/^    static float invfy;$/;"	m	class:ORB_SLAM2::Frame
invfy	orb_slam2/include/KeyFrame.h	/^    const float fx, fy, cx, cy, invfx, invfy, mbf, mb, mThDepth;$/;"	m	class:ORB_SLAM2::KeyFrame
invfy	orb_slam2/src/Frame.cc	/^float Frame::cx, Frame::cy, Frame::fx, Frame::fy, Frame::invfx, Frame::invfy;$/;"	m	class:ORB_SLAM2::Frame	file:
isBad	orb_slam2/src/KeyFrame.cc	/^bool KeyFrame::isBad()$/;"	f	class:ORB_SLAM2::KeyFrame
isBad	orb_slam2/src/MapPoint.cc	/^bool MapPoint::isBad()$/;"	f	class:ORB_SLAM2::MapPoint
isDepthPositive	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  bool isDepthPositive() {$/;"	f	class:g2o::EdgeSE3ProjectXYZ
isDepthPositive	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  bool isDepthPositive() {$/;"	f	class:g2o::EdgeSE3ProjectXYZOnlyPose
isDepthPositive	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  bool isDepthPositive() {$/;"	f	class:g2o::EdgeStereoSE3ProjectXYZ
isDepthPositive	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  bool isDepthPositive() {$/;"	f	class:g2o::EdgeStereoSE3ProjectXYZOnlyPose
isFinished	orb_slam2/src/LocalMapping.cc	/^bool LocalMapping::isFinished()$/;"	f	class:ORB_SLAM2::LocalMapping
isFinished	orb_slam2/src/LoopClosing.cc	/^bool LoopClosing::isFinished()$/;"	f	class:ORB_SLAM2::LoopClosing
isFinishedGBA	orb_slam2/include/LoopClosing.h	/^    bool isFinishedGBA(){$/;"	f	class:ORB_SLAM2::LoopClosing
isInFrustum	orb_slam2/src/Frame.cc	/^bool Frame::isInFrustum(MapPoint *pMP, float viewingCosLimit)$/;"	f	class:ORB_SLAM2::Frame
isLeaf	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^    inline bool isLeaf() const { return children.empty(); }$/;"	f	struct:DBoW2::TemplatedVocabulary::Node
isMainStorage	orb_slam2/Thirdparty/g2o/g2o/core/parameter_container.h	/^      bool isMainStorage() const {return _isMainStorage;}$/;"	f	class:g2o::ParameterContainer
isRunningGBA	orb_slam2/include/LoopClosing.h	/^    bool isRunningGBA(){$/;"	f	class:ORB_SLAM2::LoopClosing
isRunningGBA	orb_slam2/src/System.cc	/^bool System::isRunningGBA()$/;"	f	class:ORB_SLAM2::System
isSolverSuitable	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::isSolverSuitable(const OptimizationAlgorithmProperty& solverProperty, const std::set<int>& vertDims_) const$/;"	f	class:g2o::OptimizableGraph
isStopped	orb_slam2/src/LocalMapping.cc	/^bool LocalMapping::isStopped()$/;"	f	class:ORB_SLAM2::LocalMapping
iterate	orb_slam2/src/PnPsolver.cc	/^cv::Mat PnPsolver::iterate(int nIterations, bool &bNoMore, vector<bool> &vbInliers, int &nInliers)$/;"	f	class:ORB_SLAM2::PnPsolver
iterate	orb_slam2/src/Sim3Solver.cc	/^cv::Mat Sim3Solver::iterate(int nIterations, bool &bNoMore, vector<bool> &vbInliers, int &nInliers)$/;"	f	class:ORB_SLAM2::Sim3Solver
iteration	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	/^    int iteration;                    \/\/\/< which iteration$/;"	m	struct:g2o::G2OBatchStatistics
iteration	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^          int iteration;$/;"	m	class:g2o::HyperGraphAction::ParametersIteration
iterationsLinearSolver	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	/^    int    iterationsLinearSolver;    \/\/\/< iterations of PCG, (0 if not used, i.e., Cholesky)$/;"	m	struct:g2o::G2OBatchStatistics
jacobianOplusXi	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.h	/^      const JacobianXiOplusType& jacobianOplusXi() const { return _jacobianOplusXi;}$/;"	f	class:g2o::BaseBinaryEdge
jacobianOplusXi	orb_slam2/Thirdparty/g2o/g2o/core/base_unary_edge.h	/^      const JacobianXiOplusType& jacobianOplusXi() const { return _jacobianOplusXi;}$/;"	f	class:g2o::BaseUnaryEdge
jacobianOplusXj	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.h	/^      const JacobianXjOplusType& jacobianOplusXj() const { return _jacobianOplusXj;}$/;"	f	class:g2o::BaseBinaryEdge
jacobianWorkspace	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^    JacobianWorkspace& jacobianWorkspace() { return _jacobianWorkspace;}$/;"	f	struct:g2o::OptimizableGraph
jacobianWorkspace	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^    const JacobianWorkspace& jacobianWorkspace() const { return _jacobianWorkspace;}$/;"	f	struct:g2o::OptimizableGraph
k1	orb_slam2/include/Tracking.h	/^    float k1, k2, p1, p2, k3;$/;"	m	struct:ORB_SLAM2::ORBParameters
k2	orb_slam2/include/Tracking.h	/^    float k1, k2, p1, p2, k3;$/;"	m	struct:ORB_SLAM2::ORBParameters
k3	orb_slam2/include/Tracking.h	/^    float k1, k2, p1, p2, k3;$/;"	m	struct:ORB_SLAM2::ORBParameters
kernel	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.h	/^      const RobustKernelPtr kernel() const { return _kernel;}$/;"	f	class:g2o::RobustKernelScaleDelta
key	orb_slam2/Thirdparty/g2o/g2o/core/cache.cpp	/^  Cache::CacheKey Cache::key() const {$/;"	f	class:g2o::Cache
knowsTag	orb_slam2/Thirdparty/g2o/g2o/core/factory.cpp	/^bool Factory::knowsTag(const std::string& tag, int* elementType) const$/;"	f	class:g2o::Factory
lId	orb_slam2/include/KeyFrame.h	/^    static bool lId(KeyFrame* pKF1, KeyFrame* pKF2){$/;"	f	class:ORB_SLAM2::KeyFrame
landmarkDim	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_property.h	/^  int landmarkDim;            \/\/\/< dimension of the landmar vertices (-1 if variable)$/;"	m	struct:g2o::OptimizationAlgorithmProperty
lastStep	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.h	/^      int lastStep() const { return _lastStep;}$/;"	f	class:g2o::OptimizationAlgorithmDogleg
left	orb_slam2/Thirdparty/DBoW2/DUtils/Random.h	/^  inline unsigned int left() const { return m_values.size(); }$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
left_sub_	ros/include/StereoNode.h	/^    message_filters::Subscriber<sensor_msgs::Image> *left_sub_;$/;"	m	class:StereoNode
level	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        int level() const { return _level;}$/;"	f	class:g2o::OptimizableGraph::Edge
levenberg	orb_slam2/Thirdparty/g2o/g2o/core/solver.h	/^      bool levenberg() const { return _isLevenberg;}$/;"	f	class:g2o::Solver
levenbergIteration	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.h	/^      int levenbergIteration() { return _levenbergIterations;}$/;"	f	class:g2o::OptimizationAlgorithmLevenberg
levenbergIterations	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	/^    int levenbergIterations;          \/\/\/< number of iterations performed by LM$/;"	m	struct:g2o::G2OBatchStatistics
linearSolver	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      LinearSolver<PoseMatrixType>* linearSolver() const { return _linearSolver;}$/;"	f	class:g2o::BlockSolver
linearizeOplus	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.hpp	/^void BaseBinaryEdge<D, E, VertexXiType, VertexXjType>::linearizeOplus()$/;"	f	class:BaseBinaryEdge
linearizeOplus	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.hpp	/^void BaseBinaryEdge<D, E, VertexXiType, VertexXjType>::linearizeOplus(JacobianWorkspace& jacobianWorkspace)$/;"	f	class:BaseBinaryEdge
linearizeOplus	orb_slam2/Thirdparty/g2o/g2o/core/base_multi_edge.hpp	/^void BaseMultiEdge<D, E>::linearizeOplus()$/;"	f	class:BaseMultiEdge
linearizeOplus	orb_slam2/Thirdparty/g2o/g2o/core/base_multi_edge.hpp	/^void BaseMultiEdge<D, E>::linearizeOplus(JacobianWorkspace& jacobianWorkspace)$/;"	f	class:BaseMultiEdge
linearizeOplus	orb_slam2/Thirdparty/g2o/g2o/core/base_unary_edge.hpp	/^void BaseUnaryEdge<D, E, VertexXiType>::linearizeOplus()$/;"	f	class:BaseUnaryEdge
linearizeOplus	orb_slam2/Thirdparty/g2o/g2o/core/base_unary_edge.hpp	/^void BaseUnaryEdge<D, E, VertexXiType>::linearizeOplus(JacobianWorkspace& jacobianWorkspace)$/;"	f	class:BaseUnaryEdge
linearizeOplus	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.cpp	/^void EdgeSE3ProjectXYZ::linearizeOplus() {$/;"	f	class:g2o::EdgeSE3ProjectXYZ
linearizeOplus	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.cpp	/^void EdgeSE3ProjectXYZOnlyPose::linearizeOplus() {$/;"	f	class:g2o::EdgeSE3ProjectXYZOnlyPose
linearizeOplus	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.cpp	/^void EdgeStereoSE3ProjectXYZ::linearizeOplus() {$/;"	f	class:g2o::EdgeStereoSE3ProjectXYZ
linearizeOplus	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.cpp	/^void EdgeStereoSE3ProjectXYZOnlyPose::linearizeOplus() {$/;"	f	class:g2o::EdgeStereoSE3ProjectXYZOnlyPose
listSolvers	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.cpp	/^  void OptimizationAlgorithmFactory::listSolvers(std::ostream& os) const$/;"	f	class:g2o::OptimizationAlgorithmFactory
lit	orb_slam2/include/ORBextractor.h	/^    std::list<ExtractorNode>::iterator lit;$/;"	m	class:ORB_SLAM2::ExtractorNode
load	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::load(const cv::FileStorage &fs,$/;"	f	class:DBoW2::TemplatedVocabulary
load	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::load(const std::string &filename)$/;"	f	class:DBoW2::TemplatedVocabulary
load	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::load(const char* filename, bool createEdges)$/;"	f	class:g2o::OptimizableGraph
load	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::load(istream& is, bool createEdges)$/;"	f	class:g2o::OptimizableGraph
load	orb_slam2/include/BoostArchiver.h	/^    void load(Archive & ar, ::cv::Mat& m, const unsigned int version)$/;"	f	namespace:boost::serialization
loadFromBinFile	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^bool TemplatedVocabulary<TDescriptor,F>::loadFromBinFile(const std::string &filename)$/;"	f	class:DBoW2::TemplatedVocabulary
loadFromTextFile	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^bool TemplatedVocabulary<TDescriptor,F>::loadFromTextFile(const std::string &filename)$/;"	f	class:DBoW2::TemplatedVocabulary
load_map	orb_slam2/include/System.h	/^    bool load_map;$/;"	m	class:ORB_SLAM2::System
load_map_param_	ros/include/Node.h	/^    bool load_map_param_;$/;"	m	class:Node
lock	orb_slam2/Thirdparty/g2o/g2o/core/openmp_mutex.h	/^      void lock() { omp_set_lock(&_lock); }$/;"	f	class:g2o::OpenMPMutex
lockQuadraticForm	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        void lockQuadraticForm() { _quadraticFormMutex.lock();}$/;"	f	class:g2o::OptimizableGraph::Vertex
log	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^      Vector6d log() const {$/;"	f	class:g2o::SE3Quat
log	orb_slam2/Thirdparty/g2o/g2o/types/sim3.h	/^    Vector7d log() const$/;"	f	struct:g2o::Sim3
m	orb_slam2/Thirdparty/g2o/g2o/core/matrix_structure.h	/^    int m;    \/\/\/< A is m-by-n.  m must be >= 0.$/;"	m	class:g2o::MatrixStructure
mBestRotation	orb_slam2/include/Sim3Solver.h	/^    cv::Mat mBestRotation;$/;"	m	class:ORB_SLAM2::Sim3Solver
mBestScale	orb_slam2/include/Sim3Solver.h	/^    float mBestScale;$/;"	m	class:ORB_SLAM2::Sim3Solver
mBestT12	orb_slam2/include/Sim3Solver.h	/^    cv::Mat mBestT12;$/;"	m	class:ORB_SLAM2::Sim3Solver
mBestTcw	orb_slam2/include/PnPsolver.h	/^  cv::Mat mBestTcw;$/;"	m	class:ORB_SLAM2::PnPsolver
mBestTranslation	orb_slam2/include/Sim3Solver.h	/^    cv::Mat mBestTranslation;$/;"	m	class:ORB_SLAM2::Sim3Solver
mBowVec	orb_slam2/include/Frame.h	/^    DBoW2::BowVector mBowVec;$/;"	m	class:ORB_SLAM2::Frame
mBowVec	orb_slam2/include/KeyFrame.h	/^    DBoW2::BowVector mBowVec;$/;"	m	class:ORB_SLAM2::KeyFrame
mConnectedKeyFrameWeights	orb_slam2/include/KeyFrame.h	/^    std::map<KeyFrame*,int> mConnectedKeyFrameWeights;$/;"	m	class:ORB_SLAM2::KeyFrame
mCurrentFrame	orb_slam2/include/Tracking.h	/^    Frame mCurrentFrame;$/;"	m	class:ORB_SLAM2::Tracking
mDepthMapFactor	orb_slam2/include/Tracking.h	/^    float mDepthMapFactor;$/;"	m	class:ORB_SLAM2::Tracking
mDescriptor	orb_slam2/include/MapPoint.h	/^     cv::Mat mDescriptor;$/;"	m	class:ORB_SLAM2::MapPoint
mDescriptors	orb_slam2/include/Frame.h	/^    cv::Mat mDescriptors, mDescriptorsRight;$/;"	m	class:ORB_SLAM2::Frame
mDescriptors	orb_slam2/include/KeyFrame.h	/^    const cv::Mat mDescriptors;$/;"	m	class:ORB_SLAM2::KeyFrame
mDescriptorsRight	orb_slam2/include/Frame.h	/^    cv::Mat mDescriptors, mDescriptorsRight;$/;"	m	class:ORB_SLAM2::Frame
mDistCoef	orb_slam2/include/Frame.h	/^    cv::Mat mDistCoef;$/;"	m	class:ORB_SLAM2::Frame
mDistCoef	orb_slam2/include/Tracking.h	/^    cv::Mat mDistCoef;$/;"	m	class:ORB_SLAM2::Tracking
mFeatVec	orb_slam2/include/Frame.h	/^    DBoW2::FeatureVector mFeatVec;$/;"	m	class:ORB_SLAM2::Frame
mFeatVec	orb_slam2/include/KeyFrame.h	/^    DBoW2::FeatureVector mFeatVec;$/;"	m	class:ORB_SLAM2::KeyFrame
mGlobalMutex	orb_slam2/include/MapPoint.h	/^    static std::mutex mGlobalMutex;$/;"	m	class:ORB_SLAM2::MapPoint
mGlobalMutex	orb_slam2/src/MapPoint.cc	/^mutex MapPoint::mGlobalMutex;$/;"	m	class:ORB_SLAM2::MapPoint	file:
mGrid	orb_slam2/include/Frame.h	/^    std::vector<std::size_t> mGrid[FRAME_GRID_COLS][FRAME_GRID_ROWS];$/;"	m	class:ORB_SLAM2::Frame
mGrid	orb_slam2/include/KeyFrame.h	/^    std::vector< std::vector <std::vector<size_t> > > mGrid;$/;"	m	class:ORB_SLAM2::KeyFrame
mHalfBaseline	orb_slam2/include/KeyFrame.h	/^    float mHalfBaseline; \/\/ Only for visualization$/;"	m	class:ORB_SLAM2::KeyFrame
mIm	orb_slam2/include/FrameDrawer.h	/^    cv::Mat mIm;$/;"	m	class:ORB_SLAM2::FrameDrawer
mImGray	orb_slam2/include/Tracking.h	/^    cv::Mat mImGray;$/;"	m	class:ORB_SLAM2::Tracking
mInitialFrame	orb_slam2/include/Tracking.h	/^    Frame mInitialFrame;$/;"	m	class:ORB_SLAM2::Tracking
mK	orb_slam2/include/Frame.h	/^    cv::Mat mK;$/;"	m	class:ORB_SLAM2::Frame
mK	orb_slam2/include/Initializer.h	/^    cv::Mat mK;$/;"	m	class:ORB_SLAM2::Initializer
mK	orb_slam2/include/KeyFrame.h	/^    const cv::Mat mK;$/;"	m	class:ORB_SLAM2::KeyFrame
mK	orb_slam2/include/Tracking.h	/^    cv::Mat mK;$/;"	m	class:ORB_SLAM2::Tracking
mK1	orb_slam2/include/Sim3Solver.h	/^    cv::Mat mK1;$/;"	m	class:ORB_SLAM2::Sim3Solver
mK2	orb_slam2/include/Sim3Solver.h	/^    cv::Mat mK2;$/;"	m	class:ORB_SLAM2::Sim3Solver
mLastFrame	orb_slam2/include/Tracking.h	/^    Frame mLastFrame;$/;"	m	class:ORB_SLAM2::Tracking
mLastLoopKFid	orb_slam2/include/LoopClosing.h	/^    long unsigned int mLastLoopKFid;$/;"	m	class:ORB_SLAM2::LoopClosing
mLastProcessedState	orb_slam2/include/Tracking.h	/^    eTrackingState mLastProcessedState;$/;"	m	class:ORB_SLAM2::Tracking
mLoopScore	orb_slam2/include/KeyFrame.h	/^    float mLoopScore;$/;"	m	class:ORB_SLAM2::KeyFrame
mMaxFrames	orb_slam2/include/Tracking.h	/^    int mMaxFrames;$/;"	m	class:ORB_SLAM2::Tracking
mMaxIterations	orb_slam2/include/Initializer.h	/^    int mMaxIterations;$/;"	m	class:ORB_SLAM2::Initializer
mMinFrames	orb_slam2/include/Tracking.h	/^    int mMinFrames;$/;"	m	class:ORB_SLAM2::Tracking
mMutex	orb_slam2/include/FrameDrawer.h	/^    std::mutex mMutex;$/;"	m	class:ORB_SLAM2::FrameDrawer
mMutex	orb_slam2/include/KeyFrameDatabase.h	/^  std::mutex mMutex;$/;"	m	class:ORB_SLAM2::KeyFrameDatabase
mMutexAccept	orb_slam2/include/LocalMapping.h	/^    std::mutex mMutexAccept;$/;"	m	class:ORB_SLAM2::LocalMapping
mMutexConnections	orb_slam2/include/KeyFrame.h	/^    std::mutex mMutexConnections;$/;"	m	class:ORB_SLAM2::KeyFrame
mMutexFeatures	orb_slam2/include/KeyFrame.h	/^    std::mutex mMutexFeatures;$/;"	m	class:ORB_SLAM2::KeyFrame
mMutexFeatures	orb_slam2/include/MapPoint.h	/^     std::mutex mMutexFeatures;$/;"	m	class:ORB_SLAM2::MapPoint
mMutexFinish	orb_slam2/include/LocalMapping.h	/^    std::mutex mMutexFinish;$/;"	m	class:ORB_SLAM2::LocalMapping
mMutexFinish	orb_slam2/include/LoopClosing.h	/^    std::mutex mMutexFinish;$/;"	m	class:ORB_SLAM2::LoopClosing
mMutexGBA	orb_slam2/include/LoopClosing.h	/^    std::mutex mMutexGBA;$/;"	m	class:ORB_SLAM2::LoopClosing
mMutexLoopQueue	orb_slam2/include/LoopClosing.h	/^    std::mutex mMutexLoopQueue;$/;"	m	class:ORB_SLAM2::LoopClosing
mMutexMap	orb_slam2/include/Map.h	/^    std::mutex mMutexMap;$/;"	m	class:ORB_SLAM2::Map
mMutexMapUpdate	orb_slam2/include/Map.h	/^    std::mutex mMutexMapUpdate;$/;"	m	class:ORB_SLAM2::Map
mMutexMode	orb_slam2/include/System.h	/^    std::mutex mMutexMode;$/;"	m	class:ORB_SLAM2::System
mMutexNewKFs	orb_slam2/include/LocalMapping.h	/^    std::mutex mMutexNewKFs;$/;"	m	class:ORB_SLAM2::LocalMapping
mMutexPointCreation	orb_slam2/include/Map.h	/^    std::mutex mMutexPointCreation;$/;"	m	class:ORB_SLAM2::Map
mMutexPos	orb_slam2/include/MapPoint.h	/^     std::mutex mMutexPos;$/;"	m	class:ORB_SLAM2::MapPoint
mMutexPose	orb_slam2/include/KeyFrame.h	/^    std::mutex mMutexPose;$/;"	m	class:ORB_SLAM2::KeyFrame
mMutexReset	orb_slam2/include/LocalMapping.h	/^    std::mutex mMutexReset;$/;"	m	class:ORB_SLAM2::LocalMapping
mMutexReset	orb_slam2/include/LoopClosing.h	/^    std::mutex mMutexReset;$/;"	m	class:ORB_SLAM2::LoopClosing
mMutexReset	orb_slam2/include/System.h	/^    std::mutex mMutexReset;$/;"	m	class:ORB_SLAM2::System
mMutexState	orb_slam2/include/System.h	/^    std::mutex mMutexState;$/;"	m	class:ORB_SLAM2::System
mMutexStop	orb_slam2/include/LocalMapping.h	/^    std::mutex mMutexStop;$/;"	m	class:ORB_SLAM2::LocalMapping
mN1	orb_slam2/include/Sim3Solver.h	/^    int mN1;$/;"	m	class:ORB_SLAM2::Sim3Solver
mNormalVector	orb_slam2/include/MapPoint.h	/^     cv::Mat mNormalVector;$/;"	m	class:ORB_SLAM2::MapPoint
mObservations	orb_slam2/include/MapPoint.h	/^     std::map<KeyFrame*,size_t> mObservations;$/;"	m	class:ORB_SLAM2::MapPoint
mOw	orb_slam2/include/Frame.h	/^    cv::Mat mOw; \/\/==mtwc$/;"	m	class:ORB_SLAM2::Frame
mPosGBA	orb_slam2/include/MapPoint.h	/^    cv::Mat mPosGBA;$/;"	m	class:ORB_SLAM2::MapPoint
mR12i	orb_slam2/include/Sim3Solver.h	/^    cv::Mat mR12i;$/;"	m	class:ORB_SLAM2::Sim3Solver
mRansacEpsilon	orb_slam2/include/PnPsolver.h	/^  float mRansacEpsilon;$/;"	m	class:ORB_SLAM2::PnPsolver
mRansacMaxIts	orb_slam2/include/PnPsolver.h	/^  int mRansacMaxIts;$/;"	m	class:ORB_SLAM2::PnPsolver
mRansacMaxIts	orb_slam2/include/Sim3Solver.h	/^    int mRansacMaxIts;$/;"	m	class:ORB_SLAM2::Sim3Solver
mRansacMinInliers	orb_slam2/include/PnPsolver.h	/^  int mRansacMinInliers;$/;"	m	class:ORB_SLAM2::PnPsolver
mRansacMinInliers	orb_slam2/include/Sim3Solver.h	/^    int mRansacMinInliers;$/;"	m	class:ORB_SLAM2::Sim3Solver
mRansacMinSet	orb_slam2/include/PnPsolver.h	/^  int mRansacMinSet;$/;"	m	class:ORB_SLAM2::PnPsolver
mRansacProb	orb_slam2/include/PnPsolver.h	/^  double mRansacProb;$/;"	m	class:ORB_SLAM2::PnPsolver
mRansacProb	orb_slam2/include/Sim3Solver.h	/^    double mRansacProb;$/;"	m	class:ORB_SLAM2::Sim3Solver
mRansacTh	orb_slam2/include/PnPsolver.h	/^  float mRansacTh;$/;"	m	class:ORB_SLAM2::PnPsolver
mRcw	orb_slam2/include/Frame.h	/^    cv::Mat mRcw;$/;"	m	class:ORB_SLAM2::Frame
mRefinedTcw	orb_slam2/include/PnPsolver.h	/^  cv::Mat mRefinedTcw;$/;"	m	class:ORB_SLAM2::PnPsolver
mRelocScore	orb_slam2/include/KeyFrame.h	/^    float mRelocScore;$/;"	m	class:ORB_SLAM2::KeyFrame
mRi	orb_slam2/include/PnPsolver.h	/^  double mRi[3][3];$/;"	m	class:ORB_SLAM2::PnPsolver
mRwc	orb_slam2/include/Frame.h	/^    cv::Mat mRwc;$/;"	m	class:ORB_SLAM2::Frame
mScw	orb_slam2/include/LoopClosing.h	/^    cv::Mat mScw;$/;"	m	class:ORB_SLAM2::LoopClosing
mSensor	orb_slam2/include/System.h	/^    eSensor mSensor;$/;"	m	class:ORB_SLAM2::System
mSensor	orb_slam2/include/Tracking.h	/^    int mSensor;$/;"	m	class:ORB_SLAM2::Tracking
mSigma	orb_slam2/include/Initializer.h	/^    float mSigma, mSigma2;$/;"	m	class:ORB_SLAM2::Initializer
mSigma2	orb_slam2/include/Initializer.h	/^    float mSigma, mSigma2;$/;"	m	class:ORB_SLAM2::Initializer
mSigma2	orb_slam2/include/Sim3Solver.h	/^    float mSigma2;$/;"	m	class:ORB_SLAM2::Sim3Solver
mState	orb_slam2/include/FrameDrawer.h	/^    int mState;$/;"	m	class:ORB_SLAM2::FrameDrawer
mState	orb_slam2/include/Tracking.h	/^    eTrackingState mState;$/;"	m	class:ORB_SLAM2::Tracking
mT12i	orb_slam2/include/Sim3Solver.h	/^    cv::Mat mT12i;$/;"	m	class:ORB_SLAM2::Sim3Solver
mT21i	orb_slam2/include/Sim3Solver.h	/^    cv::Mat mT21i;$/;"	m	class:ORB_SLAM2::Sim3Solver
mTcp	orb_slam2/include/KeyFrame.h	/^    cv::Mat mTcp;$/;"	m	class:ORB_SLAM2::KeyFrame
mTcw	orb_slam2/include/Frame.h	/^    cv::Mat mTcw;$/;"	m	class:ORB_SLAM2::Frame
mTcwBefGBA	orb_slam2/include/KeyFrame.h	/^    cv::Mat mTcwBefGBA;$/;"	m	class:ORB_SLAM2::KeyFrame
mTcwGBA	orb_slam2/include/KeyFrame.h	/^    cv::Mat mTcwGBA;$/;"	m	class:ORB_SLAM2::KeyFrame
mTcwi	orb_slam2/include/PnPsolver.h	/^  cv::Mat mTcwi;$/;"	m	class:ORB_SLAM2::PnPsolver
mTh	orb_slam2/include/Sim3Solver.h	/^    float mTh;$/;"	m	class:ORB_SLAM2::Sim3Solver
mThDepth	orb_slam2/include/Frame.h	/^    float mThDepth;$/;"	m	class:ORB_SLAM2::Frame
mThDepth	orb_slam2/include/KeyFrame.h	/^    const float fx, fy, cx, cy, invfx, invfy, mbf, mb, mThDepth;$/;"	m	class:ORB_SLAM2::KeyFrame
mThDepth	orb_slam2/include/Tracking.h	/^    float mThDepth;$/;"	m	class:ORB_SLAM2::Tracking
mTimeStamp	orb_slam2/include/Frame.h	/^    double mTimeStamp;$/;"	m	class:ORB_SLAM2::Frame
mTimeStamp	orb_slam2/include/KeyFrame.h	/^    const double mTimeStamp;$/;"	m	class:ORB_SLAM2::KeyFrame
mTrackProjX	orb_slam2/include/MapPoint.h	/^    float mTrackProjX;$/;"	m	class:ORB_SLAM2::MapPoint
mTrackProjXR	orb_slam2/include/MapPoint.h	/^    float mTrackProjXR;$/;"	m	class:ORB_SLAM2::MapPoint
mTrackProjY	orb_slam2/include/MapPoint.h	/^    float mTrackProjY;$/;"	m	class:ORB_SLAM2::MapPoint
mTrackViewCos	orb_slam2/include/MapPoint.h	/^    float mTrackViewCos;$/;"	m	class:ORB_SLAM2::MapPoint
mTrackedKeyPointsUn	orb_slam2/include/System.h	/^    std::vector<cv::KeyPoint> mTrackedKeyPointsUn;$/;"	m	class:ORB_SLAM2::System
mTrackedMapPoints	orb_slam2/include/System.h	/^    std::vector<MapPoint*> mTrackedMapPoints;$/;"	m	class:ORB_SLAM2::System
mTrackingState	orb_slam2/include/System.h	/^    int mTrackingState;$/;"	m	class:ORB_SLAM2::System
mVelocity	orb_slam2/include/Tracking.h	/^    cv::Mat mVelocity;$/;"	m	class:ORB_SLAM2::Tracking
mWorldPos	orb_slam2/include/MapPoint.h	/^     cv::Mat mWorldPos;$/;"	m	class:ORB_SLAM2::MapPoint
m_L	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^  int m_L;$/;"	m	class:DBoW2::TemplatedVocabulary
m_already_seeded	orb_slam2/Thirdparty/DBoW2/DUtils/Random.h	/^  static bool m_already_seeded;$/;"	m	class:DUtils::Random
m_k	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^  int m_k;$/;"	m	class:DBoW2::TemplatedVocabulary
m_max	orb_slam2/Thirdparty/DBoW2/DUtils/Random.h	/^  int m_max;$/;"	m	class:DUtils::Random::UnrepeatedRandomizer
m_min	orb_slam2/Thirdparty/DBoW2/DUtils/Random.h	/^  int m_min;$/;"	m	class:DUtils::Random::UnrepeatedRandomizer
m_nodes	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^  std::vector<Node> m_nodes;$/;"	m	class:DBoW2::TemplatedVocabulary
m_scoring	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^  ScoringType m_scoring;$/;"	m	class:DBoW2::TemplatedVocabulary
m_scoring_object	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^  GeneralScoring* m_scoring_object;$/;"	m	class:DBoW2::TemplatedVocabulary
m_secs	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.h	/^	unsigned long m_secs;	\/\/ seconds$/;"	m	class:DUtils::Timestamp
m_usecs	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.h	/^	unsigned long m_usecs;	\/\/ microseconds$/;"	m	class:DUtils::Timestamp
m_values	orb_slam2/Thirdparty/DBoW2/DUtils/Random.h	/^  std::vector<int> m_values;$/;"	m	class:DUtils::Random::UnrepeatedRandomizer
m_weighting	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^  WeightingType m_weighting;$/;"	m	class:DBoW2::TemplatedVocabulary
m_words	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^  std::vector<Node*> m_words;$/;"	m	class:DBoW2::TemplatedVocabulary
main	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_test.cpp	/^int main (int argc, char** argv){$/;"	f
main	ros/src/MonoNode.cc	/^int main(int argc, char **argv)$/;"	f
main	ros/src/RGBDNode.cc	/^int main(int argc, char **argv)$/;"	f
main	ros/src/StereoNode.cc	/^int main(int argc, char **argv)$/;"	f
makeProperty	orb_slam2/Thirdparty/g2o/g2o/stuff/property.h	/^      P* makeProperty(const std::string& name_, const typename P::ValueType& v)$/;"	f	class:g2o::PropertyMap
map	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^      Vector3d map(const Vector3d & xyz) const$/;"	f	class:g2o::SE3Quat
map	orb_slam2/Thirdparty/g2o/g2o/types/sim3.h	/^     Vector3d map (const Vector3d& xyz) const {$/;"	f	struct:g2o::Sim3
mapHessianMemory	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.hpp	/^void BaseBinaryEdge<D, E, VertexXiType, VertexXjType>::mapHessianMemory(double* d, int i, int j, bool rowMajor)$/;"	f	class:BaseBinaryEdge
mapHessianMemory	orb_slam2/Thirdparty/g2o/g2o/core/base_multi_edge.hpp	/^void BaseMultiEdge<D, E>::mapHessianMemory(double* d, int i, int j, bool rowMajor)$/;"	f	class:BaseMultiEdge
mapHessianMemory	orb_slam2/Thirdparty/g2o/g2o/core/base_unary_edge.h	/^      virtual void mapHessianMemory(double*, int, int, bool) {assert(0 && "BaseUnaryEdge does not map memory of the Hessian");}$/;"	f	class:g2o::BaseUnaryEdge
mapHessianMemory	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.hpp	/^void BaseVertex<D, T>::mapHessianMemory(double* d)$/;"	f	class:BaseVertex
map_file	orb_slam2/include/System.h	/^    std::string map_file;$/;"	m	class:ORB_SLAM2::System
map_file_name_param_	ros/include/Node.h	/^    std::string map_file_name_param_;$/;"	m	class:Node
map_frame_id_param_	ros/include/Node.h	/^    std::string map_frame_id_param_;$/;"	m	class:Node
map_points_publisher_	ros/include/Node.h	/^    ros::Publisher map_points_publisher_;$/;"	m	class:Node
marginalized	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        bool marginalized() const {return _marginalized;}$/;"	f	class:g2o::OptimizableGraph::Vertex
mat_to_quat	orb_slam2/src/PnPsolver.cc	/^void PnPsolver::mat_to_quat(const double R[3][3], double q[4])$/;"	f	class:ORB_SLAM2::PnPsolver
matrix	orb_slam2/Thirdparty/g2o/g2o/core/base_multi_edge.h	/^        Eigen::Map<MatrixXd> matrix;     \/\/\/< the mapped memory$/;"	m	struct:g2o::BaseMultiEdge::HessianHelper
maxDimension	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^int OptimizableGraph::maxDimension() const{$/;"	f	class:g2o::OptimizableGraph
maxFrames	orb_slam2/include/Tracking.h	/^    int maxFrames, nFeatures, nLevels, iniThFAST, minThFAST;$/;"	m	struct:ORB_SLAM2::ORBParameters
maxN	orb_slam2/Thirdparty/g2o/g2o/core/matrix_structure.h	/^    int maxN;     \/\/\/< size of the allocated memory$/;"	m	class:g2o::MatrixStructure
maxNz	orb_slam2/Thirdparty/g2o/g2o/core/matrix_structure.h	/^    int maxNz;    \/\/\/< size of the allocated memory$/;"	m	class:g2o::MatrixStructure
maxTrialsAfterFailure	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.h	/^      int maxTrialsAfterFailure() const { return _maxTrialsAfterFailure->value();}$/;"	f	class:g2o::OptimizationAlgorithmLevenberg
maximum_number_of_correspondences	orb_slam2/include/PnPsolver.h	/^  int maximum_number_of_correspondences;$/;"	m	class:ORB_SLAM2::PnPsolver
mb	orb_slam2/include/Frame.h	/^    float mb;$/;"	m	class:ORB_SLAM2::Frame
mb	orb_slam2/include/KeyFrame.h	/^    const float fx, fy, cx, cy, invfx, invfy, mbf, mb, mThDepth;$/;"	m	class:ORB_SLAM2::KeyFrame
mbAbortBA	orb_slam2/include/LocalMapping.h	/^    bool mbAbortBA;$/;"	m	class:ORB_SLAM2::LocalMapping
mbAcceptKeyFrames	orb_slam2/include/LocalMapping.h	/^    bool mbAcceptKeyFrames;$/;"	m	class:ORB_SLAM2::LocalMapping
mbActivateLocalizationMode	orb_slam2/include/System.h	/^    bool mbActivateLocalizationMode;$/;"	m	class:ORB_SLAM2::System
mbBad	orb_slam2/include/KeyFrame.h	/^    bool mbBad;    $/;"	m	class:ORB_SLAM2::KeyFrame
mbBad	orb_slam2/include/MapPoint.h	/^     bool mbBad;$/;"	m	class:ORB_SLAM2::MapPoint
mbCheckOrientation	orb_slam2/include/ORBmatcher.h	/^    bool mbCheckOrientation;$/;"	m	class:ORB_SLAM2::ORBmatcher
mbDeactivateLocalizationMode	orb_slam2/include/System.h	/^    bool mbDeactivateLocalizationMode;$/;"	m	class:ORB_SLAM2::System
mbFinishRequested	orb_slam2/include/LocalMapping.h	/^    bool mbFinishRequested;$/;"	m	class:ORB_SLAM2::LocalMapping
mbFinishRequested	orb_slam2/include/LoopClosing.h	/^    bool mbFinishRequested;$/;"	m	class:ORB_SLAM2::LoopClosing
mbFinished	orb_slam2/include/LocalMapping.h	/^    bool mbFinished;$/;"	m	class:ORB_SLAM2::LocalMapping
mbFinished	orb_slam2/include/LoopClosing.h	/^    bool mbFinished;$/;"	m	class:ORB_SLAM2::LoopClosing
mbFinishedGBA	orb_slam2/include/LoopClosing.h	/^    bool mbFinishedGBA;$/;"	m	class:ORB_SLAM2::LoopClosing
mbFirstConnection	orb_slam2/include/KeyFrame.h	/^    bool mbFirstConnection;$/;"	m	class:ORB_SLAM2::KeyFrame
mbFixScale	orb_slam2/include/LoopClosing.h	/^    bool mbFixScale;$/;"	m	class:ORB_SLAM2::LoopClosing
mbFixScale	orb_slam2/include/Sim3Solver.h	/^    bool mbFixScale;$/;"	m	class:ORB_SLAM2::Sim3Solver
mbInitialComputations	orb_slam2/include/Frame.h	/^    static bool mbInitialComputations;$/;"	m	class:ORB_SLAM2::Frame
mbInitialComputations	orb_slam2/src/Frame.cc	/^bool Frame::mbInitialComputations=true;$/;"	m	class:ORB_SLAM2::Frame	file:
mbMonocular	orb_slam2/include/LocalMapping.h	/^    bool mbMonocular;$/;"	m	class:ORB_SLAM2::LocalMapping
mbNotErase	orb_slam2/include/KeyFrame.h	/^    bool mbNotErase;$/;"	m	class:ORB_SLAM2::KeyFrame
mbNotStop	orb_slam2/include/LocalMapping.h	/^    bool mbNotStop;$/;"	m	class:ORB_SLAM2::LocalMapping
mbOnlyTracking	orb_slam2/include/FrameDrawer.h	/^    bool mbOnlyTracking;$/;"	m	class:ORB_SLAM2::FrameDrawer
mbOnlyTracking	orb_slam2/include/Tracking.h	/^    bool mbOnlyTracking;$/;"	m	class:ORB_SLAM2::Tracking
mbRGB	orb_slam2/include/Tracking.h	/^    bool mbRGB;$/;"	m	class:ORB_SLAM2::Tracking
mbReset	orb_slam2/include/System.h	/^    bool mbReset;$/;"	m	class:ORB_SLAM2::System
mbResetRequested	orb_slam2/include/LocalMapping.h	/^    bool mbResetRequested;$/;"	m	class:ORB_SLAM2::LocalMapping
mbResetRequested	orb_slam2/include/LoopClosing.h	/^    bool mbResetRequested;$/;"	m	class:ORB_SLAM2::LoopClosing
mbRunningGBA	orb_slam2/include/LoopClosing.h	/^    bool mbRunningGBA;$/;"	m	class:ORB_SLAM2::LoopClosing
mbStopGBA	orb_slam2/include/LoopClosing.h	/^    bool mbStopGBA;$/;"	m	class:ORB_SLAM2::LoopClosing
mbStopRequested	orb_slam2/include/LocalMapping.h	/^    bool mbStopRequested;$/;"	m	class:ORB_SLAM2::LocalMapping
mbStopped	orb_slam2/include/LocalMapping.h	/^    bool mbStopped;$/;"	m	class:ORB_SLAM2::LocalMapping
mbToBeErased	orb_slam2/include/KeyFrame.h	/^    bool mbToBeErased;$/;"	m	class:ORB_SLAM2::KeyFrame
mbTrackInView	orb_slam2/include/MapPoint.h	/^    bool mbTrackInView;$/;"	m	class:ORB_SLAM2::MapPoint
mbVO	orb_slam2/include/Tracking.h	/^    bool mbVO;$/;"	m	class:ORB_SLAM2::Tracking
mbf	orb_slam2/include/Frame.h	/^    float mbf;$/;"	m	class:ORB_SLAM2::Frame
mbf	orb_slam2/include/KeyFrame.h	/^    const float fx, fy, cx, cy, invfx, invfy, mbf, mb, mThDepth;$/;"	m	class:ORB_SLAM2::KeyFrame
mbf	orb_slam2/include/Tracking.h	/^    float mbf;$/;"	m	class:ORB_SLAM2::Tracking
meanValue	orb_slam2/Thirdparty/DBoW2/DBoW2/FORB.cpp	/^void FORB::meanValue(const std::vector<FORB::pDescriptor> &descriptors,$/;"	f	class:DBoW2::FORB
measurement	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	/^      const Measurement& measurement() const { return _measurement;}$/;"	f	class:g2o::BaseEdge
measurementDimension	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  int OptimizableGraph::Edge::measurementDimension() const$/;"	f	class:g2o::OptimizableGraph::Edge
mfGridElementHeightInv	orb_slam2/include/Frame.h	/^    static float mfGridElementHeightInv;$/;"	m	class:ORB_SLAM2::Frame
mfGridElementHeightInv	orb_slam2/include/KeyFrame.h	/^    const float mfGridElementHeightInv;$/;"	m	class:ORB_SLAM2::KeyFrame
mfGridElementHeightInv	orb_slam2/src/Frame.cc	/^float Frame::mfGridElementWidthInv, Frame::mfGridElementHeightInv;$/;"	m	class:ORB_SLAM2::Frame	file:
mfGridElementWidthInv	orb_slam2/include/Frame.h	/^    static float mfGridElementWidthInv;$/;"	m	class:ORB_SLAM2::Frame
mfGridElementWidthInv	orb_slam2/include/KeyFrame.h	/^    const float mfGridElementWidthInv;$/;"	m	class:ORB_SLAM2::KeyFrame
mfGridElementWidthInv	orb_slam2/src/Frame.cc	/^float Frame::mfGridElementWidthInv, Frame::mfGridElementHeightInv;$/;"	m	class:ORB_SLAM2::Frame	file:
mfLogScaleFactor	orb_slam2/include/Frame.h	/^    float mfLogScaleFactor;$/;"	m	class:ORB_SLAM2::Frame
mfLogScaleFactor	orb_slam2/include/KeyFrame.h	/^    const float mfLogScaleFactor;$/;"	m	class:ORB_SLAM2::KeyFrame
mfMaxDistance	orb_slam2/include/MapPoint.h	/^     float mfMaxDistance;$/;"	m	class:ORB_SLAM2::MapPoint
mfMinDistance	orb_slam2/include/MapPoint.h	/^     float mfMinDistance;$/;"	m	class:ORB_SLAM2::MapPoint
mfNNratio	orb_slam2/include/ORBmatcher.h	/^    float mfNNratio;$/;"	m	class:ORB_SLAM2::ORBmatcher
mfScaleFactor	orb_slam2/include/Frame.h	/^    float mfScaleFactor;$/;"	m	class:ORB_SLAM2::Frame
mfScaleFactor	orb_slam2/include/KeyFrame.h	/^    const float mfScaleFactor;$/;"	m	class:ORB_SLAM2::KeyFrame
mg2oScw	orb_slam2/include/LoopClosing.h	/^    g2o::Sim3 mg2oScw;$/;"	m	class:ORB_SLAM2::LoopClosing
minThFAST	orb_slam2/include/ORBextractor.h	/^    int minThFAST;$/;"	m	class:ORB_SLAM2::ORBextractor
minThFAST	orb_slam2/include/Tracking.h	/^    int maxFrames, nFeatures, nLevels, iniThFAST, minThFAST;$/;"	m	struct:ORB_SLAM2::ORBParameters
min_observations_per_point_	ros/include/Node.h	/^    int min_observations_per_point_;$/;"	m	class:Node
minimalEstimateDimension	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  int OptimizableGraph::Vertex::minimalEstimateDimension() const$/;"	f	class:g2o::OptimizableGraph::Vertex
minus	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.cpp	/^Timestamp Timestamp::minus(unsigned long secs, unsigned long usecs) const$/;"	f	class:Timestamp
mlFrameTimes	orb_slam2/include/Tracking.h	/^    list<double> mlFrameTimes;$/;"	m	class:ORB_SLAM2::Tracking
mlNewKeyFrames	orb_slam2/include/LocalMapping.h	/^    std::list<KeyFrame*> mlNewKeyFrames;$/;"	m	class:ORB_SLAM2::LocalMapping
mlRelativeFramePoses	orb_slam2/include/Tracking.h	/^    list<cv::Mat> mlRelativeFramePoses;$/;"	m	class:ORB_SLAM2::Tracking
mlbLost	orb_slam2/include/Tracking.h	/^    list<bool> mlbLost;$/;"	m	class:ORB_SLAM2::Tracking
mlpLoopKeyFrameQueue	orb_slam2/include/LoopClosing.h	/^    std::list<KeyFrame*> mlpLoopKeyFrameQueue;$/;"	m	class:ORB_SLAM2::LoopClosing
mlpRecentAddedMapPoints	orb_slam2/include/LocalMapping.h	/^    std::list<MapPoint*> mlpRecentAddedMapPoints;$/;"	m	class:ORB_SLAM2::LocalMapping
mlpReferences	orb_slam2/include/Tracking.h	/^    list<KeyFrame*> mlpReferences;$/;"	m	class:ORB_SLAM2::Tracking
mlpTemporalPoints	orb_slam2/include/Tracking.h	/^    list<MapPoint*> mlpTemporalPoints;$/;"	m	class:ORB_SLAM2::Tracking
mnBAFixedForKF	orb_slam2/include/KeyFrame.h	/^    long unsigned int mnBAFixedForKF;$/;"	m	class:ORB_SLAM2::KeyFrame
mnBAGlobalForKF	orb_slam2/include/KeyFrame.h	/^    long unsigned int mnBAGlobalForKF;$/;"	m	class:ORB_SLAM2::KeyFrame
mnBAGlobalForKF	orb_slam2/include/MapPoint.h	/^    long unsigned int mnBAGlobalForKF;$/;"	m	class:ORB_SLAM2::MapPoint
mnBALocalForKF	orb_slam2/include/KeyFrame.h	/^    long unsigned int mnBALocalForKF;$/;"	m	class:ORB_SLAM2::KeyFrame
mnBALocalForKF	orb_slam2/include/MapPoint.h	/^    long unsigned int mnBALocalForKF;$/;"	m	class:ORB_SLAM2::MapPoint
mnBestInliers	orb_slam2/include/PnPsolver.h	/^  int mnBestInliers;$/;"	m	class:ORB_SLAM2::PnPsolver
mnBestInliers	orb_slam2/include/Sim3Solver.h	/^    int mnBestInliers;$/;"	m	class:ORB_SLAM2::Sim3Solver
mnBigChangeIdx	orb_slam2/include/Map.h	/^    int mnBigChangeIdx;$/;"	m	class:ORB_SLAM2::Map
mnCorrectedByKF	orb_slam2/include/MapPoint.h	/^    long unsigned int mnCorrectedByKF;$/;"	m	class:ORB_SLAM2::MapPoint
mnCorrectedReference	orb_slam2/include/MapPoint.h	/^    long unsigned int mnCorrectedReference;    $/;"	m	class:ORB_SLAM2::MapPoint
mnCovisibilityConsistencyTh	orb_slam2/include/LoopClosing.h	/^    float mnCovisibilityConsistencyTh;$/;"	m	class:ORB_SLAM2::LoopClosing
mnFeaturesPerLevel	orb_slam2/include/ORBextractor.h	/^    std::vector<int> mnFeaturesPerLevel;$/;"	m	class:ORB_SLAM2::ORBextractor
mnFirstFrame	orb_slam2/include/MapPoint.h	/^    long int mnFirstFrame;$/;"	m	class:ORB_SLAM2::MapPoint
mnFirstKFid	orb_slam2/include/MapPoint.h	/^    long int mnFirstKFid;$/;"	m	class:ORB_SLAM2::MapPoint
mnFound	orb_slam2/include/MapPoint.h	/^     int mnFound;$/;"	m	class:ORB_SLAM2::MapPoint
mnFrameId	orb_slam2/include/KeyFrame.h	/^    const long unsigned int mnFrameId;$/;"	m	class:ORB_SLAM2::KeyFrame
mnFullBAIdx	orb_slam2/include/LoopClosing.h	/^    bool mnFullBAIdx;$/;"	m	class:ORB_SLAM2::LoopClosing
mnFuseCandidateForKF	orb_slam2/include/MapPoint.h	/^    long unsigned int mnFuseCandidateForKF;$/;"	m	class:ORB_SLAM2::MapPoint
mnFuseTargetForKF	orb_slam2/include/KeyFrame.h	/^    long unsigned int mnFuseTargetForKF;$/;"	m	class:ORB_SLAM2::KeyFrame
mnGridCols	orb_slam2/include/KeyFrame.h	/^    const int mnGridCols;$/;"	m	class:ORB_SLAM2::KeyFrame
mnGridRows	orb_slam2/include/KeyFrame.h	/^    const int mnGridRows;$/;"	m	class:ORB_SLAM2::KeyFrame
mnId	orb_slam2/include/Frame.h	/^    long unsigned int mnId;$/;"	m	class:ORB_SLAM2::Frame
mnId	orb_slam2/include/KeyFrame.h	/^    long unsigned int mnId;$/;"	m	class:ORB_SLAM2::KeyFrame
mnId	orb_slam2/include/MapPoint.h	/^    long unsigned int mnId;$/;"	m	class:ORB_SLAM2::MapPoint
mnInliersi	orb_slam2/include/PnPsolver.h	/^  int mnInliersi;$/;"	m	class:ORB_SLAM2::PnPsolver
mnInliersi	orb_slam2/include/Sim3Solver.h	/^    int mnInliersi;$/;"	m	class:ORB_SLAM2::Sim3Solver
mnIterations	orb_slam2/include/PnPsolver.h	/^  int mnIterations;$/;"	m	class:ORB_SLAM2::PnPsolver
mnIterations	orb_slam2/include/Sim3Solver.h	/^    int mnIterations;$/;"	m	class:ORB_SLAM2::Sim3Solver
mnLastFrameSeen	orb_slam2/include/MapPoint.h	/^    long unsigned int mnLastFrameSeen;$/;"	m	class:ORB_SLAM2::MapPoint
mnLastKeyFrameId	orb_slam2/include/Tracking.h	/^    unsigned int mnLastKeyFrameId;$/;"	m	class:ORB_SLAM2::Tracking
mnLastRelocFrameId	orb_slam2/include/Tracking.h	/^    unsigned int mnLastRelocFrameId;$/;"	m	class:ORB_SLAM2::Tracking
mnLoopPointForKF	orb_slam2/include/MapPoint.h	/^    long unsigned int mnLoopPointForKF;$/;"	m	class:ORB_SLAM2::MapPoint
mnLoopQuery	orb_slam2/include/KeyFrame.h	/^    long unsigned int mnLoopQuery;$/;"	m	class:ORB_SLAM2::KeyFrame
mnLoopWords	orb_slam2/include/KeyFrame.h	/^    int mnLoopWords;$/;"	m	class:ORB_SLAM2::KeyFrame
mnMatchesInliers	orb_slam2/include/Tracking.h	/^    int mnMatchesInliers;$/;"	m	class:ORB_SLAM2::Tracking
mnMaxKFid	orb_slam2/include/Map.h	/^    long unsigned int mnMaxKFid;$/;"	m	class:ORB_SLAM2::Map
mnMaxX	orb_slam2/include/Frame.h	/^    static float mnMaxX;$/;"	m	class:ORB_SLAM2::Frame
mnMaxX	orb_slam2/include/KeyFrame.h	/^    const int mnMaxX;$/;"	m	class:ORB_SLAM2::KeyFrame
mnMaxX	orb_slam2/src/Frame.cc	/^float Frame::mnMinX, Frame::mnMinY, Frame::mnMaxX, Frame::mnMaxY;$/;"	m	class:ORB_SLAM2::Frame	file:
mnMaxY	orb_slam2/include/Frame.h	/^    static float mnMaxY;$/;"	m	class:ORB_SLAM2::Frame
mnMaxY	orb_slam2/include/KeyFrame.h	/^    const int mnMaxY;$/;"	m	class:ORB_SLAM2::KeyFrame
mnMaxY	orb_slam2/src/Frame.cc	/^float Frame::mnMinX, Frame::mnMinY, Frame::mnMaxX, Frame::mnMaxY;$/;"	m	class:ORB_SLAM2::Frame	file:
mnMinX	orb_slam2/include/Frame.h	/^    static float mnMinX;$/;"	m	class:ORB_SLAM2::Frame
mnMinX	orb_slam2/include/KeyFrame.h	/^    const int mnMinX;$/;"	m	class:ORB_SLAM2::KeyFrame
mnMinX	orb_slam2/src/Frame.cc	/^float Frame::mnMinX, Frame::mnMinY, Frame::mnMaxX, Frame::mnMaxY;$/;"	m	class:ORB_SLAM2::Frame	file:
mnMinY	orb_slam2/include/Frame.h	/^    static float mnMinY;$/;"	m	class:ORB_SLAM2::Frame
mnMinY	orb_slam2/include/KeyFrame.h	/^    const int mnMinY;$/;"	m	class:ORB_SLAM2::KeyFrame
mnMinY	orb_slam2/src/Frame.cc	/^float Frame::mnMinX, Frame::mnMinY, Frame::mnMaxX, Frame::mnMaxY;$/;"	m	class:ORB_SLAM2::Frame	file:
mnMinimumKeyFrames	orb_slam2/include/Tracking.h	/^    int mnMinimumKeyFrames;$/;"	m	class:ORB_SLAM2::Tracking
mnRefinedInliers	orb_slam2/include/PnPsolver.h	/^  int mnRefinedInliers;$/;"	m	class:ORB_SLAM2::PnPsolver
mnRelocQuery	orb_slam2/include/KeyFrame.h	/^    long unsigned int mnRelocQuery;$/;"	m	class:ORB_SLAM2::KeyFrame
mnRelocWords	orb_slam2/include/KeyFrame.h	/^    int mnRelocWords;$/;"	m	class:ORB_SLAM2::KeyFrame
mnScaleLevels	orb_slam2/include/Frame.h	/^    int mnScaleLevels;$/;"	m	class:ORB_SLAM2::Frame
mnScaleLevels	orb_slam2/include/KeyFrame.h	/^    const int mnScaleLevels;$/;"	m	class:ORB_SLAM2::KeyFrame
mnTrackReferenceForFrame	orb_slam2/include/KeyFrame.h	/^    long unsigned int mnTrackReferenceForFrame;$/;"	m	class:ORB_SLAM2::KeyFrame
mnTrackReferenceForFrame	orb_slam2/include/MapPoint.h	/^    long unsigned int mnTrackReferenceForFrame;$/;"	m	class:ORB_SLAM2::MapPoint
mnTrackScaleLevel	orb_slam2/include/MapPoint.h	/^    int mnTrackScaleLevel;$/;"	m	class:ORB_SLAM2::MapPoint
mnTracked	orb_slam2/include/FrameDrawer.h	/^    int mnTracked, mnTrackedVO;$/;"	m	class:ORB_SLAM2::FrameDrawer
mnTrackedVO	orb_slam2/include/FrameDrawer.h	/^    int mnTracked, mnTrackedVO;$/;"	m	class:ORB_SLAM2::FrameDrawer
mnVisible	orb_slam2/include/MapPoint.h	/^     int mnVisible;$/;"	m	class:ORB_SLAM2::MapPoint
mpCurrentKF	orb_slam2/include/LoopClosing.h	/^    KeyFrame* mpCurrentKF;$/;"	m	class:ORB_SLAM2::LoopClosing
mpCurrentKeyFrame	orb_slam2/include/LocalMapping.h	/^    KeyFrame* mpCurrentKeyFrame;$/;"	m	class:ORB_SLAM2::LocalMapping
mpFrameDrawer	orb_slam2/include/System.h	/^    FrameDrawer* mpFrameDrawer;$/;"	m	class:ORB_SLAM2::System
mpFrameDrawer	orb_slam2/include/Tracking.h	/^    FrameDrawer* mpFrameDrawer;$/;"	m	class:ORB_SLAM2::Tracking
mpIniORBextractor	orb_slam2/include/Tracking.h	/^    ORBextractor* mpIniORBextractor;$/;"	m	class:ORB_SLAM2::Tracking
mpInitializer	orb_slam2/include/Tracking.h	/^    Initializer* mpInitializer;$/;"	m	class:ORB_SLAM2::Tracking
mpKF1	orb_slam2/include/Sim3Solver.h	/^    KeyFrame* mpKF1;$/;"	m	class:ORB_SLAM2::Sim3Solver
mpKF2	orb_slam2/include/Sim3Solver.h	/^    KeyFrame* mpKF2;$/;"	m	class:ORB_SLAM2::Sim3Solver
mpKeyFrameDB	orb_slam2/include/KeyFrame.h	/^    KeyFrameDatabase* mpKeyFrameDB;$/;"	m	class:ORB_SLAM2::KeyFrame
mpKeyFrameDB	orb_slam2/include/LoopClosing.h	/^    KeyFrameDatabase* mpKeyFrameDB;$/;"	m	class:ORB_SLAM2::LoopClosing
mpKeyFrameDB	orb_slam2/include/Tracking.h	/^    KeyFrameDatabase* mpKeyFrameDB;$/;"	m	class:ORB_SLAM2::Tracking
mpKeyFrameDatabase	orb_slam2/include/System.h	/^    KeyFrameDatabase* mpKeyFrameDatabase;$/;"	m	class:ORB_SLAM2::System
mpLastKeyFrame	orb_slam2/include/Tracking.h	/^    KeyFrame* mpLastKeyFrame;$/;"	m	class:ORB_SLAM2::Tracking
mpLocalMapper	orb_slam2/include/LoopClosing.h	/^    LocalMapping *mpLocalMapper;$/;"	m	class:ORB_SLAM2::LoopClosing
mpLocalMapper	orb_slam2/include/System.h	/^    LocalMapping* mpLocalMapper;$/;"	m	class:ORB_SLAM2::System
mpLocalMapper	orb_slam2/include/Tracking.h	/^    LocalMapping* mpLocalMapper;$/;"	m	class:ORB_SLAM2::Tracking
mpLoopCloser	orb_slam2/include/LocalMapping.h	/^    LoopClosing* mpLoopCloser;$/;"	m	class:ORB_SLAM2::LocalMapping
mpLoopCloser	orb_slam2/include/System.h	/^    LoopClosing* mpLoopCloser;$/;"	m	class:ORB_SLAM2::System
mpLoopClosing	orb_slam2/include/Tracking.h	/^    LoopClosing* mpLoopClosing;$/;"	m	class:ORB_SLAM2::Tracking
mpMap	orb_slam2/include/FrameDrawer.h	/^    Map* mpMap;$/;"	m	class:ORB_SLAM2::FrameDrawer
mpMap	orb_slam2/include/KeyFrame.h	/^    Map* mpMap;$/;"	m	class:ORB_SLAM2::KeyFrame
mpMap	orb_slam2/include/LocalMapping.h	/^    Map* mpMap;$/;"	m	class:ORB_SLAM2::LocalMapping
mpMap	orb_slam2/include/LoopClosing.h	/^    Map* mpMap;$/;"	m	class:ORB_SLAM2::LoopClosing
mpMap	orb_slam2/include/MapPoint.h	/^     Map* mpMap;$/;"	m	class:ORB_SLAM2::MapPoint
mpMap	orb_slam2/include/System.h	/^    Map* mpMap;$/;"	m	class:ORB_SLAM2::System
mpMap	orb_slam2/include/Tracking.h	/^    Map* mpMap;$/;"	m	class:ORB_SLAM2::Tracking
mpMatchedKF	orb_slam2/include/LoopClosing.h	/^    KeyFrame* mpMatchedKF;$/;"	m	class:ORB_SLAM2::LoopClosing
mpORBVocabulary	orb_slam2/include/LoopClosing.h	/^    ORBVocabulary* mpORBVocabulary;$/;"	m	class:ORB_SLAM2::LoopClosing
mpORBVocabulary	orb_slam2/include/Tracking.h	/^    ORBVocabulary* mpORBVocabulary;$/;"	m	class:ORB_SLAM2::Tracking
mpORBextractorLeft	orb_slam2/include/Frame.h	/^    ORBextractor* mpORBextractorLeft, *mpORBextractorRight;$/;"	m	class:ORB_SLAM2::Frame
mpORBextractorLeft	orb_slam2/include/Tracking.h	/^    ORBextractor* mpORBextractorLeft, *mpORBextractorRight;$/;"	m	class:ORB_SLAM2::Tracking
mpORBextractorRight	orb_slam2/include/Frame.h	/^    ORBextractor* mpORBextractorLeft, *mpORBextractorRight;$/;"	m	class:ORB_SLAM2::Frame
mpORBextractorRight	orb_slam2/include/Tracking.h	/^    ORBextractor* mpORBextractorLeft, *mpORBextractorRight;$/;"	m	class:ORB_SLAM2::Tracking
mpORBvocabulary	orb_slam2/include/Frame.h	/^    ORBVocabulary* mpORBvocabulary;$/;"	m	class:ORB_SLAM2::Frame
mpORBvocabulary	orb_slam2/include/KeyFrame.h	/^    ORBVocabulary* mpORBvocabulary;$/;"	m	class:ORB_SLAM2::KeyFrame
mpParent	orb_slam2/include/KeyFrame.h	/^    KeyFrame* mpParent;$/;"	m	class:ORB_SLAM2::KeyFrame
mpRefKF	orb_slam2/include/MapPoint.h	/^     KeyFrame* mpRefKF;$/;"	m	class:ORB_SLAM2::MapPoint
mpReferenceKF	orb_slam2/include/Frame.h	/^    KeyFrame* mpReferenceKF;$/;"	m	class:ORB_SLAM2::Frame
mpReferenceKF	orb_slam2/include/Tracking.h	/^    KeyFrame* mpReferenceKF;$/;"	m	class:ORB_SLAM2::Tracking
mpReplaced	orb_slam2/include/MapPoint.h	/^     MapPoint* mpReplaced;$/;"	m	class:ORB_SLAM2::MapPoint
mpSystem	orb_slam2/include/Tracking.h	/^    System* mpSystem;$/;"	m	class:ORB_SLAM2::Tracking
mpThreadGBA	orb_slam2/include/LoopClosing.h	/^    std::thread* mpThreadGBA;$/;"	m	class:ORB_SLAM2::LoopClosing
mpTracker	orb_slam2/include/LocalMapping.h	/^    Tracking* mpTracker;$/;"	m	class:ORB_SLAM2::LocalMapping
mpTracker	orb_slam2/include/LoopClosing.h	/^    Tracking* mpTracker;$/;"	m	class:ORB_SLAM2::LoopClosing
mpTracker	orb_slam2/include/System.h	/^    Tracking* mpTracker;$/;"	m	class:ORB_SLAM2::System
mpVoc	orb_slam2/include/KeyFrameDatabase.h	/^  const ORBVocabulary* mpVoc;$/;"	m	class:ORB_SLAM2::KeyFrameDatabase
mpVocabulary	orb_slam2/include/System.h	/^    ORBVocabulary* mpVocabulary;$/;"	m	class:ORB_SLAM2::System
mptLocalMapping	orb_slam2/include/System.h	/^    std::thread* mptLocalMapping;$/;"	m	class:ORB_SLAM2::System
mptLoopClosing	orb_slam2/include/System.h	/^    std::thread* mptLoopClosing;$/;"	m	class:ORB_SLAM2::System
ms12i	orb_slam2/include/Sim3Solver.h	/^    float ms12i;$/;"	m	class:ORB_SLAM2::Sim3Solver
mspChildrens	orb_slam2/include/KeyFrame.h	/^    std::set<KeyFrame*> mspChildrens;$/;"	m	class:ORB_SLAM2::KeyFrame
mspKeyFrames	orb_slam2/include/Map.h	/^    std::set<KeyFrame*> mspKeyFrames;$/;"	m	class:ORB_SLAM2::Map
mspLoopEdges	orb_slam2/include/KeyFrame.h	/^    std::set<KeyFrame*> mspLoopEdges;$/;"	m	class:ORB_SLAM2::KeyFrame
mspMapPoints	orb_slam2/include/Map.h	/^    std::set<MapPoint*> mspMapPoints;$/;"	m	class:ORB_SLAM2::Map
mt12i	orb_slam2/include/Sim3Solver.h	/^    cv::Mat mt12i;$/;"	m	class:ORB_SLAM2::Sim3Solver
mtcw	orb_slam2/include/Frame.h	/^    cv::Mat mtcw;$/;"	m	class:ORB_SLAM2::Frame
mti	orb_slam2/include/PnPsolver.h	/^  double mti[3];$/;"	m	class:ORB_SLAM2::PnPsolver
multiply	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^  bool SparseBlockMatrix<MatrixType>::multiply(SparseBlockMatrix<MatrixResultType>*& dest, const SparseBlockMatrix<MatrixFactorType> * M) const {$/;"	f	class:g2o::SparseBlockMatrix
multiply	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^  void SparseBlockMatrix<MatrixType>::multiply(double*& dest, const double* src) const {$/;"	f	class:g2o::SparseBlockMatrix
multiply	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_diagonal.h	/^      void multiply(double*& dest, const double* src) const$/;"	f	class:g2o::SparseBlockMatrixDiagonal
multiplyHessian	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      virtual void multiplyHessian(double* dest, const double* src) const { _Hpp->multiplySymmetricUpperTriangle(dest, src);}$/;"	f	class:g2o::BlockSolver
multiplySymmetricUpperTriangle	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^  void SparseBlockMatrix<MatrixType>::multiplySymmetricUpperTriangle(double*& dest, const double* src) const$/;"	f	class:g2o::SparseBlockMatrix
mvAllIndices	orb_slam2/include/PnPsolver.h	/^  vector<size_t> mvAllIndices;$/;"	m	class:ORB_SLAM2::PnPsolver
mvAllIndices	orb_slam2/include/Sim3Solver.h	/^    std::vector<size_t> mvAllIndices;$/;"	m	class:ORB_SLAM2::Sim3Solver
mvConsistentGroups	orb_slam2/include/LoopClosing.h	/^    std::vector<ConsistentGroup> mvConsistentGroups;$/;"	m	class:ORB_SLAM2::LoopClosing
mvCurrentKeys	orb_slam2/include/FrameDrawer.h	/^    vector<cv::KeyPoint> mvCurrentKeys;$/;"	m	class:ORB_SLAM2::FrameDrawer
mvDepth	orb_slam2/include/Frame.h	/^    std::vector<float> mvDepth;$/;"	m	class:ORB_SLAM2::Frame
mvDepth	orb_slam2/include/KeyFrame.h	/^    const std::vector<float> mvDepth; \/\/ negative value for monocular points$/;"	m	class:ORB_SLAM2::KeyFrame
mvImagePyramid	orb_slam2/include/ORBextractor.h	/^    std::vector<cv::Mat> mvImagePyramid;$/;"	m	class:ORB_SLAM2::ORBextractor
mvIniKeys	orb_slam2/include/FrameDrawer.h	/^    vector<cv::KeyPoint> mvIniKeys;$/;"	m	class:ORB_SLAM2::FrameDrawer
mvIniLastMatches	orb_slam2/include/Tracking.h	/^    std::vector<int> mvIniLastMatches;$/;"	m	class:ORB_SLAM2::Tracking
mvIniMatches	orb_slam2/include/FrameDrawer.h	/^    vector<int> mvIniMatches;$/;"	m	class:ORB_SLAM2::FrameDrawer
mvIniMatches	orb_slam2/include/Tracking.h	/^    std::vector<int> mvIniMatches;$/;"	m	class:ORB_SLAM2::Tracking
mvIniP3D	orb_slam2/include/Tracking.h	/^    std::vector<cv::Point3f> mvIniP3D;$/;"	m	class:ORB_SLAM2::Tracking
mvInvLevelSigma2	orb_slam2/include/Frame.h	/^    vector<float> mvInvLevelSigma2;$/;"	m	class:ORB_SLAM2::Frame
mvInvLevelSigma2	orb_slam2/include/KeyFrame.h	/^    const std::vector<float> mvInvLevelSigma2;$/;"	m	class:ORB_SLAM2::KeyFrame
mvInvLevelSigma2	orb_slam2/include/ORBextractor.h	/^    std::vector<float> mvInvLevelSigma2;$/;"	m	class:ORB_SLAM2::ORBextractor
mvInvScaleFactor	orb_slam2/include/ORBextractor.h	/^    std::vector<float> mvInvScaleFactor;    $/;"	m	class:ORB_SLAM2::ORBextractor
mvInvScaleFactors	orb_slam2/include/Frame.h	/^    vector<float> mvInvScaleFactors;$/;"	m	class:ORB_SLAM2::Frame
mvInvertedFile	orb_slam2/include/KeyFrameDatabase.h	/^  std::vector<list<KeyFrame*> > mvInvertedFile;$/;"	m	class:ORB_SLAM2::KeyFrameDatabase
mvKeyPointIndices	orb_slam2/include/PnPsolver.h	/^  vector<size_t> mvKeyPointIndices;$/;"	m	class:ORB_SLAM2::PnPsolver
mvKeys	orb_slam2/include/Frame.h	/^    std::vector<cv::KeyPoint> mvKeys, mvKeysRight;$/;"	m	class:ORB_SLAM2::Frame
mvKeys	orb_slam2/include/KeyFrame.h	/^    const std::vector<cv::KeyPoint> mvKeys;$/;"	m	class:ORB_SLAM2::KeyFrame
mvKeys1	orb_slam2/include/Initializer.h	/^    vector<cv::KeyPoint> mvKeys1;$/;"	m	class:ORB_SLAM2::Initializer
mvKeys2	orb_slam2/include/Initializer.h	/^    vector<cv::KeyPoint> mvKeys2;$/;"	m	class:ORB_SLAM2::Initializer
mvKeysRight	orb_slam2/include/Frame.h	/^    std::vector<cv::KeyPoint> mvKeys, mvKeysRight;$/;"	m	class:ORB_SLAM2::Frame
mvKeysUn	orb_slam2/include/Frame.h	/^    std::vector<cv::KeyPoint> mvKeysUn;$/;"	m	class:ORB_SLAM2::Frame
mvKeysUn	orb_slam2/include/KeyFrame.h	/^    const std::vector<cv::KeyPoint> mvKeysUn;$/;"	m	class:ORB_SLAM2::KeyFrame
mvLevelSigma2	orb_slam2/include/Frame.h	/^    vector<float> mvLevelSigma2;$/;"	m	class:ORB_SLAM2::Frame
mvLevelSigma2	orb_slam2/include/KeyFrame.h	/^    const std::vector<float> mvLevelSigma2;$/;"	m	class:ORB_SLAM2::KeyFrame
mvLevelSigma2	orb_slam2/include/ORBextractor.h	/^    std::vector<float> mvLevelSigma2;$/;"	m	class:ORB_SLAM2::ORBextractor
mvMatches12	orb_slam2/include/Initializer.h	/^    vector<Match> mvMatches12;$/;"	m	class:ORB_SLAM2::Initializer
mvMaxError	orb_slam2/include/PnPsolver.h	/^  vector<float> mvMaxError;$/;"	m	class:ORB_SLAM2::PnPsolver
mvOrderedWeights	orb_slam2/include/KeyFrame.h	/^    std::vector<int> mvOrderedWeights;$/;"	m	class:ORB_SLAM2::KeyFrame
mvP1im1	orb_slam2/include/Sim3Solver.h	/^    std::vector<cv::Mat> mvP1im1;$/;"	m	class:ORB_SLAM2::Sim3Solver
mvP2D	orb_slam2/include/PnPsolver.h	/^  vector<cv::Point2f> mvP2D;$/;"	m	class:ORB_SLAM2::PnPsolver
mvP2im2	orb_slam2/include/Sim3Solver.h	/^    std::vector<cv::Mat> mvP2im2;$/;"	m	class:ORB_SLAM2::Sim3Solver
mvP3Dw	orb_slam2/include/PnPsolver.h	/^  vector<cv::Point3f> mvP3Dw;$/;"	m	class:ORB_SLAM2::PnPsolver
mvScaleFactor	orb_slam2/include/ORBextractor.h	/^    std::vector<float> mvScaleFactor;$/;"	m	class:ORB_SLAM2::ORBextractor
mvScaleFactors	orb_slam2/include/Frame.h	/^    vector<float> mvScaleFactors;$/;"	m	class:ORB_SLAM2::Frame
mvScaleFactors	orb_slam2/include/KeyFrame.h	/^    const std::vector<float> mvScaleFactors;$/;"	m	class:ORB_SLAM2::KeyFrame
mvSets	orb_slam2/include/Initializer.h	/^    vector<vector<size_t> > mvSets;   $/;"	m	class:ORB_SLAM2::Initializer
mvSigma2	orb_slam2/include/PnPsolver.h	/^  vector<float> mvSigma2;$/;"	m	class:ORB_SLAM2::PnPsolver
mvSigmaSquare1	orb_slam2/include/Sim3Solver.h	/^    std::vector<size_t> mvSigmaSquare1;$/;"	m	class:ORB_SLAM2::Sim3Solver
mvSigmaSquare2	orb_slam2/include/Sim3Solver.h	/^    std::vector<size_t> mvSigmaSquare2;$/;"	m	class:ORB_SLAM2::Sim3Solver
mvX3Dc1	orb_slam2/include/Sim3Solver.h	/^    std::vector<cv::Mat> mvX3Dc1;$/;"	m	class:ORB_SLAM2::Sim3Solver
mvX3Dc2	orb_slam2/include/Sim3Solver.h	/^    std::vector<cv::Mat> mvX3Dc2;$/;"	m	class:ORB_SLAM2::Sim3Solver
mvbBestInliers	orb_slam2/include/PnPsolver.h	/^  vector<bool> mvbBestInliers;$/;"	m	class:ORB_SLAM2::PnPsolver
mvbBestInliers	orb_slam2/include/Sim3Solver.h	/^    std::vector<bool> mvbBestInliers;$/;"	m	class:ORB_SLAM2::Sim3Solver
mvbInliersi	orb_slam2/include/PnPsolver.h	/^  vector<bool> mvbInliersi;$/;"	m	class:ORB_SLAM2::PnPsolver
mvbInliersi	orb_slam2/include/Sim3Solver.h	/^    std::vector<bool> mvbInliersi;$/;"	m	class:ORB_SLAM2::Sim3Solver
mvbMap	orb_slam2/include/FrameDrawer.h	/^    vector<bool> mvbMap, mvbVO;$/;"	m	class:ORB_SLAM2::FrameDrawer
mvbMatched1	orb_slam2/include/Initializer.h	/^    vector<bool> mvbMatched1;$/;"	m	class:ORB_SLAM2::Initializer
mvbOutlier	orb_slam2/include/Frame.h	/^    std::vector<bool> mvbOutlier;$/;"	m	class:ORB_SLAM2::Frame
mvbPrevMatched	orb_slam2/include/Tracking.h	/^    std::vector<cv::Point2f> mvbPrevMatched;$/;"	m	class:ORB_SLAM2::Tracking
mvbRefinedInliers	orb_slam2/include/PnPsolver.h	/^  vector<bool> mvbRefinedInliers;$/;"	m	class:ORB_SLAM2::PnPsolver
mvbVO	orb_slam2/include/FrameDrawer.h	/^    vector<bool> mvbMap, mvbVO;$/;"	m	class:ORB_SLAM2::FrameDrawer
mvnIndices1	orb_slam2/include/Sim3Solver.h	/^    std::vector<size_t> mvnIndices1;$/;"	m	class:ORB_SLAM2::Sim3Solver
mvnMaxError1	orb_slam2/include/Sim3Solver.h	/^    std::vector<size_t> mvnMaxError1;$/;"	m	class:ORB_SLAM2::Sim3Solver
mvnMaxError2	orb_slam2/include/Sim3Solver.h	/^    std::vector<size_t> mvnMaxError2;$/;"	m	class:ORB_SLAM2::Sim3Solver
mvpCurrentConnectedKFs	orb_slam2/include/LoopClosing.h	/^    std::vector<KeyFrame*> mvpCurrentConnectedKFs;$/;"	m	class:ORB_SLAM2::LoopClosing
mvpCurrentMatchedPoints	orb_slam2/include/LoopClosing.h	/^    std::vector<MapPoint*> mvpCurrentMatchedPoints;$/;"	m	class:ORB_SLAM2::LoopClosing
mvpEnoughConsistentCandidates	orb_slam2/include/LoopClosing.h	/^    std::vector<KeyFrame*> mvpEnoughConsistentCandidates;$/;"	m	class:ORB_SLAM2::LoopClosing
mvpKeyFrameOrigins	orb_slam2/include/Map.h	/^    vector<KeyFrame*> mvpKeyFrameOrigins;$/;"	m	class:ORB_SLAM2::Map
mvpLocalKeyFrames	orb_slam2/include/Tracking.h	/^    std::vector<KeyFrame*> mvpLocalKeyFrames;$/;"	m	class:ORB_SLAM2::Tracking
mvpLocalMapPoints	orb_slam2/include/Tracking.h	/^    std::vector<MapPoint*> mvpLocalMapPoints;$/;"	m	class:ORB_SLAM2::Tracking
mvpLoopMapPoints	orb_slam2/include/LoopClosing.h	/^    std::vector<MapPoint*> mvpLoopMapPoints;$/;"	m	class:ORB_SLAM2::LoopClosing
mvpMapPointMatches	orb_slam2/include/PnPsolver.h	/^  vector<MapPoint*> mvpMapPointMatches;$/;"	m	class:ORB_SLAM2::PnPsolver
mvpMapPoints	orb_slam2/include/Frame.h	/^    std::vector<MapPoint*> mvpMapPoints;$/;"	m	class:ORB_SLAM2::Frame
mvpMapPoints	orb_slam2/include/KeyFrame.h	/^    std::vector<MapPoint*> mvpMapPoints;$/;"	m	class:ORB_SLAM2::KeyFrame
mvpMapPoints1	orb_slam2/include/Sim3Solver.h	/^    std::vector<MapPoint*> mvpMapPoints1;$/;"	m	class:ORB_SLAM2::Sim3Solver
mvpMapPoints2	orb_slam2/include/Sim3Solver.h	/^    std::vector<MapPoint*> mvpMapPoints2;$/;"	m	class:ORB_SLAM2::Sim3Solver
mvpMatches12	orb_slam2/include/Sim3Solver.h	/^    std::vector<MapPoint*> mvpMatches12;$/;"	m	class:ORB_SLAM2::Sim3Solver
mvpOrderedConnectedKeyFrames	orb_slam2/include/KeyFrame.h	/^    std::vector<KeyFrame*> mvpOrderedConnectedKeyFrames;$/;"	m	class:ORB_SLAM2::KeyFrame
mvpReferenceMapPoints	orb_slam2/include/Map.h	/^    std::vector<MapPoint*> mvpReferenceMapPoints;$/;"	m	class:ORB_SLAM2::Map
mvuRight	orb_slam2/include/Frame.h	/^    std::vector<float> mvuRight;$/;"	m	class:ORB_SLAM2::Frame
mvuRight	orb_slam2/include/KeyFrame.h	/^    const std::vector<float> mvuRight; \/\/ negative value for monocular points$/;"	m	class:ORB_SLAM2::KeyFrame
n	orb_slam2/Thirdparty/g2o/g2o/core/matrix_structure.h	/^    int n;    \/\/\/< A is m-by-n.  n must be >= 0.$/;"	m	class:g2o::MatrixStructure
nFeatures	orb_slam2/include/Tracking.h	/^    int maxFrames, nFeatures, nLevels, iniThFAST, minThFAST;$/;"	m	struct:ORB_SLAM2::ORBParameters
nFeatures	orb_slam2/include/Tracking.h	/^    int nFeatures;$/;"	m	class:ORB_SLAM2::Tracking
nLevels	orb_slam2/include/Tracking.h	/^    int maxFrames, nFeatures, nLevels, iniThFAST, minThFAST;$/;"	m	struct:ORB_SLAM2::ORBParameters
nLevels	orb_slam2/include/Tracking.h	/^    int nLevels;$/;"	m	class:ORB_SLAM2::Tracking
nNextId	orb_slam2/include/Frame.h	/^    static long unsigned int nNextId;$/;"	m	class:ORB_SLAM2::Frame
nNextId	orb_slam2/include/KeyFrame.h	/^    static long unsigned int nNextId;$/;"	m	class:ORB_SLAM2::KeyFrame
nNextId	orb_slam2/include/MapPoint.h	/^    static long unsigned int nNextId;$/;"	m	class:ORB_SLAM2::MapPoint
nNextId	orb_slam2/src/Frame.cc	/^long unsigned int Frame::nNextId=0;$/;"	m	class:ORB_SLAM2::Frame	file:
nNextId	orb_slam2/src/KeyFrame.cc	/^long unsigned int KeyFrame::nNextId=0;$/;"	m	class:ORB_SLAM2::KeyFrame	file:
nNextId	orb_slam2/src/MapPoint.cc	/^long unsigned int MapPoint::nNextId=0;$/;"	m	class:ORB_SLAM2::MapPoint	file:
nObs	orb_slam2/include/MapPoint.h	/^    int nObs;$/;"	m	class:ORB_SLAM2::MapPoint
name	orb_slam2/Thirdparty/g2o/g2o/core/creators.h	/^      virtual const std::string& name() const { return _name;}$/;"	f	class:g2o::HyperGraphElementCreator
name	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^      virtual const char* name() const { return "odometry";}$/;"	f	class:g2o::EstimatePropagatorCostOdometry
name	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^      virtual const char* name() const { return "spanning tree";}$/;"	f	class:g2o::EstimatePropagatorCost
name	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^      const std::string& name() const{ return _name;}$/;"	f	class:g2o::HyperGraphElementAction
name	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_property.h	/^  std::string name;           \/\/\/< name of the solver, e.g., var$/;"	m	struct:g2o::OptimizationAlgorithmProperty
name	orb_slam2/Thirdparty/g2o/g2o/stuff/property.h	/^      const std::string& name() {return _name;}$/;"	f	class:g2o::BaseProperty
name_of_node_	ros/include/Node.h	/^    std::string name_of_node_;$/;"	m	class:Node
next	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        Data* next() {return _next;}$/;"	f	class:g2o::OptimizableGraph::Data
next	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        const Data* next() const {return _next;}$/;"	f	class:g2o::OptimizableGraph::Data
nfeatures	orb_slam2/include/ORBextractor.h	/^    int nfeatures;$/;"	m	class:ORB_SLAM2::ORBextractor
nlevels	orb_slam2/include/ORBextractor.h	/^    int nlevels;$/;"	m	class:ORB_SLAM2::ORBextractor
node_handle_	ros/include/Node.h	/^    ros::NodeHandle node_handle_;$/;"	m	class:Node
nonZeroBlocks	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^  size_t SparseBlockMatrix<MatrixType>::nonZeroBlocks() const {$/;"	f	class:g2o::SparseBlockMatrix
nonZeros	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^  size_t SparseBlockMatrix<MatrixType>::nonZeros() const{$/;"	f	class:g2o::SparseBlockMatrix
normalize	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.cpp	/^void BowVector::normalize(LNorm norm_type)$/;"	f	class:DBoW2::BowVector
normalizeRotation	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^      void normalizeRotation(){$/;"	f	class:g2o::SE3Quat
normalize_theta	orb_slam2/Thirdparty/g2o/g2o/stuff/misc.h	/^inline double normalize_theta(double theta)$/;"	f	namespace:g2o
numEdges	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	/^    int numEdges;                     \/\/\/< how many edges$/;"	m	struct:g2o::G2OBatchStatistics
numParameters	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        inline size_t numParameters() const {return _parameters.size();}$/;"	f	class:g2o::OptimizableGraph::Edge
numVertices	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	/^    int numVertices;                  \/\/\/< how many vertices are involved$/;"	m	struct:g2o::G2OBatchStatistics
number_of_correspondences	orb_slam2/include/PnPsolver.h	/^  int number_of_correspondences;$/;"	m	class:ORB_SLAM2::PnPsolver
nzMax	orb_slam2/Thirdparty/g2o/g2o/core/matrix_structure.h	/^    int nzMax() const { return maxNz;}$/;"	f	class:g2o::MatrixStructure
operator ()	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.cpp	/^    bool operator()(EstimatePropagator::AdjacencyMapEntry* e1, EstimatePropagator::AdjacencyMapEntry* e2) const$/;"	f	struct:g2o::FrontierLevelCmp
operator ()	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.cpp	/^  double EstimatePropagatorCost::operator()(OptimizableGraph::Edge* edge, const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* to_) const$/;"	f	class:g2o::EstimatePropagatorCost
operator ()	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.cpp	/^  double EstimatePropagatorCostOdometry::operator()(OptimizableGraph::Edge* edge, const OptimizableGraph::VertexSet& from_, OptimizableGraph::Vertex* to_) const$/;"	f	class:g2o::EstimatePropagatorCostOdometry
operator ()	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^          size_t operator ()(const OptimizableGraph::Vertex* v) const { return v->id();}$/;"	f	class:g2o::EstimatePropagator::VertexIDHashFunction
operator ()	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^        virtual void operator()(OptimizableGraph::Edge* e, const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* to) const$/;"	f	struct:g2o::EstimatePropagator::PropagateAction
operator ()	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.cpp	/^  double UniformCostFunction::operator () (HyperGraph::Edge* \/*edge*\/, HyperGraph::Vertex* \/*from*\/, HyperGraph::Vertex* \/*to*\/)$/;"	f	class:g2o::UniformCostFunction
operator ()	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  HyperGraphAction* HyperGraphAction::operator()(const HyperGraph*, Parameters*)$/;"	f	class:g2o::HyperGraphAction
operator ()	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementAction* HyperGraphElementAction::operator()(HyperGraph::HyperGraphElement* , HyperGraphElementAction::Parameters* )$/;"	f	class:g2o::HyperGraphElementAction
operator ()	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementAction* HyperGraphElementAction::operator()(const HyperGraph::HyperGraphElement* , HyperGraphElementAction::Parameters* )$/;"	f	class:g2o::HyperGraphElementAction
operator ()	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementAction* HyperGraphElementActionCollection::operator()(HyperGraph::HyperGraphElement* element, HyperGraphElementAction::Parameters* params)$/;"	f	class:g2o::HyperGraphElementActionCollection
operator ()	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementAction* HyperGraphElementActionCollection::operator()(const HyperGraph::HyperGraphElement* element, HyperGraphElementAction::Parameters* params)$/;"	f	class:g2o::HyperGraphElementActionCollection
operator ()	orb_slam2/Thirdparty/g2o/g2o/core/matrix_structure.cpp	/^  bool operator()(const pair<int, int>& e1, const pair<int, int>& e2) const$/;"	f	struct:g2o::ColSort
operator ()	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^      bool operator() (const Edge* e1, const Edge* e2) const$/;"	f	struct:g2o::OptimizableGraph::EdgeIDCompare
operator ()	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^      bool operator() (const Vertex* v1, const Vertex* v2) const$/;"	f	struct:g2o::OptimizableGraph::VertexIDCompare
operator ()	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^      bool operator()(const TripletEntry& e1, const TripletEntry& e2) const$/;"	f	struct:g2o::__anon3::TripletColSort
operator ()	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^      bool operator()(const std::pair<T1,T2>& left, const std::pair<T1,T2>& right) {$/;"	f	struct:g2o::__anon3::CmpPairFirst
operator ()	orb_slam2/src/ORBextractor.cc	/^void ORBextractor::operator()( InputArray _image, InputArray _mask, vector<KeyPoint>& _keypoints,$/;"	f	class:ORB_SLAM2::ORBextractor
operator *	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^      inline SE3Quat operator* (const SE3Quat& tr2) const{$/;"	f	class:g2o::SE3Quat
operator *	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^      inline Vector3d operator* (const Vector3d& v) const {$/;"	f	class:g2o::SE3Quat
operator *	orb_slam2/Thirdparty/g2o/g2o/types/sim3.h	/^    Sim3 operator *(const Sim3& other) const {$/;"	f	struct:g2o::Sim3
operator *=	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^      inline SE3Quat& operator*= (const SE3Quat& tr2){$/;"	f	class:g2o::SE3Quat
operator *=	orb_slam2/Thirdparty/g2o/g2o/types/sim3.h	/^    Sim3& operator *=(const Sim3& other){$/;"	f	struct:g2o::Sim3
operator +	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.cpp	/^Timestamp Timestamp::operator+ (double s) const$/;"	f	class:Timestamp
operator +=	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.cpp	/^Timestamp& Timestamp::operator+= (double s)$/;"	f	class:Timestamp
operator -	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.cpp	/^Timestamp Timestamp::operator- (double s) const$/;"	f	class:Timestamp
operator -	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.cpp	/^double Timestamp::operator- (const Timestamp &t) const {$/;"	f	class:Timestamp
operator -=	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.cpp	/^Timestamp& Timestamp::operator-= (double s)$/;"	f	class:Timestamp
operator <	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.cpp	/^bool Timestamp::operator< (const Timestamp &t) const$/;"	f	class:Timestamp
operator <	orb_slam2/Thirdparty/g2o/g2o/core/cache.cpp	/^  bool Cache::CacheKey::operator<(const Cache::CacheKey& c) const{$/;"	f	class:g2o::Cache::CacheKey
operator <	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.cpp	/^  bool operator<(const HyperDijkstra::AdjacencyMapEntry& a, const HyperDijkstra::AdjacencyMapEntry& b)$/;"	f	namespace:g2o
operator <	orb_slam2/Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.cpp	/^  bool operator<(const MatrixElem& other) const$/;"	f	struct:g2o::MatrixElem
operator <	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^        bool operator<(const RowBlock& other) const { return row < other.row;}$/;"	f	struct:g2o::SparseBlockMatrixCCS::RowBlock
operator <<	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.cpp	/^std::ostream& operator<< (std::ostream &out, const BowVector &v)$/;"	f	namespace:DBoW2
operator <<	orb_slam2/Thirdparty/DBoW2/DBoW2/FeatureVector.cpp	/^std::ostream& operator<<(std::ostream &out, $/;"	f	namespace:DBoW2
operator <<	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^std::ostream& operator<<(std::ostream &os,$/;"	f	namespace:DBoW2
operator <<	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.cpp	/^  std::ostream& operator << (std::ostream& os , const G2OBatchStatistics& st)$/;"	f	namespace:g2o
operator <<	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^  std::ostream& operator << (std::ostream& os, const SparseBlockMatrix<MatrixType>& m){$/;"	f	namespace:g2o
operator <<	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_test.cpp	/^std::ostream& operator << (std::ostream& os, const SparseBlockMatrixX::SparseMatrixBlock& m) {$/;"	f
operator <<	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^  inline std::ostream& operator <<(std::ostream& out_str, const SE3Quat& se3)$/;"	f	namespace:g2o
operator <<	orb_slam2/Thirdparty/g2o/g2o/types/sim3.h	/^  inline std::ostream& operator <<(std::ostream& out_str,$/;"	f	namespace:g2o
operator <=	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.cpp	/^bool Timestamp::operator<= (const Timestamp &t) const$/;"	f	class:Timestamp
operator =	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^TemplatedVocabulary<TDescriptor,F>::operator=$/;"	f	class:DBoW2::TemplatedVocabulary
operator =	orb_slam2/Thirdparty/DBoW2/DUtils/Random.cpp	/^DUtils::Random::UnrepeatedRandomizer::operator=$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
operator =	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^      HyperGraph& operator= (const HyperGraph&) { return *this; }$/;"	f	class:g2o::HyperGraph
operator =	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm.h	/^      OptimizationAlgorithm& operator= (const OptimizationAlgorithm&) { return *this; }$/;"	f	class:g2o::OptimizationAlgorithm
operator =	orb_slam2/Thirdparty/g2o/g2o/core/solver.h	/^      Solver& operator= (const Solver&) { return *this; }$/;"	f	class:g2o::Solver
operator ==	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.cpp	/^bool Timestamp::operator== (const Timestamp &t) const$/;"	f	class:Timestamp
operator >	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.cpp	/^bool Timestamp::operator> (const Timestamp &t) const$/;"	f	class:Timestamp
operator >=	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.cpp	/^bool Timestamp::operator>= (const Timestamp &t) const$/;"	f	class:Timestamp
operator Eigen::Isometry3d	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^      operator Eigen::Isometry3d() const$/;"	f	class:g2o::SE3Quat
operator []	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^      inline double operator [](int i) const {$/;"	f	class:g2o::SE3Quat
operator []	orb_slam2/Thirdparty/g2o/g2o/types/sim3.h	/^    double operator[](int i) const$/;"	f	struct:g2o::Sim3
operator []	orb_slam2/Thirdparty/g2o/g2o/types/sim3.h	/^    double& operator[](int i)$/;"	f	struct:g2o::Sim3
oplus	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        void oplus(const double* v)$/;"	f	class:g2o::OptimizableGraph::Vertex
oplusImpl	orb_slam2/Thirdparty/g2o/g2o/types/types_sba.h	/^    virtual void oplusImpl(const double* update)$/;"	f	class:g2o::VertexSBAPointXYZ
oplusImpl	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.h	/^    virtual void oplusImpl(const double* update_)$/;"	f	class:g2o::VertexSim3Expmap
oplusImpl	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  virtual void oplusImpl(const double* update_)  {$/;"	f	class:g2o::VertexSE3Expmap
optimize	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  int OptimizableGraph::optimize(int \/*iterations*\/, bool \/*online*\/) {return 0;}$/;"	f	class:g2o::OptimizableGraph
optimize	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  int SparseOptimizer::optimize(int iterations, bool online)$/;"	f	class:g2o::SparseOptimizer
optimizer	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm.h	/^      SparseOptimizer* optimizer() { return _optimizer;}$/;"	f	class:g2o::OptimizationAlgorithm
optimizer	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm.h	/^      const SparseOptimizer* optimizer() const { return _optimizer;}$/;"	f	class:g2o::OptimizationAlgorithm
optimizer	orb_slam2/Thirdparty/g2o/g2o/core/solver.h	/^      SparseOptimizer* optimizer() const { return _optimizer;}$/;"	f	class:g2o::Solver
orb_slam_	ros/include/Node.h	/^    ORB_SLAM2::System* orb_slam_;$/;"	m	class:Node
os	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^        std::ostream* os;$/;"	m	struct:g2o::WriteGnuplotAction::Parameters
p1	orb_slam2/include/Tracking.h	/^    float k1, k2, p1, p2, k3;$/;"	m	struct:ORB_SLAM2::ORBParameters
p2	orb_slam2/include/Tracking.h	/^    float k1, k2, p1, p2, k3;$/;"	m	struct:ORB_SLAM2::ORBParameters
pDescriptor	orb_slam2/Thirdparty/DBoW2/DBoW2/FClass.h	/^  typedef const TDescriptor *pDescriptor;$/;"	t	class:DBoW2::FClass
pDescriptor	orb_slam2/Thirdparty/DBoW2/DBoW2/FORB.h	/^  typedef const TDescriptor *pDescriptor;$/;"	t	class:DBoW2::FORB
pDescriptor	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^  typedef const TDescriptor *pDescriptor;$/;"	t	class:DBoW2::TemplatedVocabulary
parameter	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        inline const Parameter* parameter(int argNo) const {return *_parameters.at(argNo);}$/;"	f	class:g2o::OptimizableGraph::Edge
parameter	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^    Parameter* parameter(int id) {$/;"	f	struct:g2o::OptimizableGraph
parameters	orb_slam2/Thirdparty/g2o/g2o/core/cache.cpp	/^  ParameterVector& Cache::parameters() {$/;"	f	class:g2o::Cache
parameters	orb_slam2/Thirdparty/g2o/g2o/core/cache.h	/^          const ParameterVector& parameters() const { return _parameters;}$/;"	f	class:g2o::Cache::CacheKey
parent	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^    NodeId parent;$/;"	m	struct:DBoW2::TemplatedVocabulary::Node
parent	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^          const OptimizableGraph::VertexSet& parent() const {return _parent;}$/;"	f	class:g2o::EstimatePropagator::AdjacencyMapEntry
parent	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.h	/^      HyperGraph::Vertex* parent() const {return _parent;}$/;"	f	struct:g2o::HyperDijkstra::AdjacencyMapEntry
pattern	orb_slam2/include/ORBextractor.h	/^    std::vector<cv::Point> pattern;$/;"	m	class:ORB_SLAM2::ORBextractor
pcs	orb_slam2/include/PnPsolver.h	/^  double * pws, * us, * alphas, * pcs;$/;"	m	class:ORB_SLAM2::PnPsolver
perform	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.cpp	/^  double HyperDijkstra::TreeAction::perform(HyperGraph::Vertex* v, HyperGraph::Vertex* vParent, HyperGraph::Edge* e){$/;"	f	class:g2o::HyperDijkstra::TreeAction
perform	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.cpp	/^  double HyperDijkstra::TreeAction::perform(HyperGraph::Vertex* v, HyperGraph::Vertex* vParent, HyperGraph::Edge* e, double distance){$/;"	f	class:g2o::HyperDijkstra::TreeAction
plus	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.cpp	/^Timestamp Timestamp::plus(unsigned long secs, unsigned long usecs) const$/;"	f	class:Timestamp
pop	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^    virtual void pop() { assert(!_backup.empty()); _estimate = _backup.top(); _backup.pop(); updateCache();}$/;"	f	class:g2o::BaseVertex
pop	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.cpp	/^  EstimatePropagator::AdjacencyMapEntry* EstimatePropagator::PriorityQueue::pop()$/;"	f	class:g2o::EstimatePropagator::PriorityQueue
pop	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::pop()$/;"	f	class:g2o::OptimizableGraph
pop	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::pop(HyperGraph::VertexSet& vset)$/;"	f	class:g2o::OptimizableGraph
pop	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::pop()$/;"	f	class:g2o::SparseOptimizer
pop	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::pop(HyperGraph::VertexSet& vlist)$/;"	f	class:g2o::SparseOptimizer
pop	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::pop(SparseOptimizer::VertexContainer& vlist)$/;"	f	class:g2o::SparseOptimizer
poseDim	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_property.h	/^  int poseDim;                \/\/\/< dimension of the pose vertices (-1 if variable)$/;"	m	struct:g2o::OptimizationAlgorithmProperty
pose_publisher_	ros/include/Node.h	/^    ros::Publisher pose_publisher_;$/;"	m	class:Node
postIteration	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::postIteration(int iter)$/;"	f	class:g2o::OptimizableGraph
preIteration	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::preIteration(int iter)$/;"	f	class:g2o::OptimizableGraph
printProperties	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm.cpp	/^void OptimizationAlgorithm::printProperties(std::ostream& os) const$/;"	f	class:g2o::OptimizationAlgorithm
printRegisteredTypes	orb_slam2/Thirdparty/g2o/g2o/core/factory.cpp	/^void Factory::printRegisteredTypes(std::ostream& os, bool comment) const$/;"	f	class:g2o::Factory
printVerbose	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm.h	/^      virtual void printVerbose(std::ostream& os) const {(void) os;};$/;"	f	class:g2o::OptimizationAlgorithm
printVerbose	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.cpp	/^  void OptimizationAlgorithmDogleg::printVerbose(std::ostream& os) const$/;"	f	class:g2o::OptimizationAlgorithmDogleg
printVerbose	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_gauss_newton.cpp	/^  void OptimizationAlgorithmGaussNewton::printVerbose(std::ostream& os) const$/;"	f	class:g2o::OptimizationAlgorithmGaussNewton
printVerbose	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.cpp	/^  void OptimizationAlgorithmLevenberg::printVerbose(std::ostream& os) const$/;"	f	class:g2o::OptimizationAlgorithmLevenberg
print_pose	orb_slam2/src/PnPsolver.cc	/^void PnPsolver::print_pose(const double R[3][3], const double t[3])$/;"	f	class:ORB_SLAM2::PnPsolver
project	orb_slam2/Thirdparty/g2o/g2o/types/se3_ops.hpp	/^  Vector2d project(const Vector3d& v)$/;"	f
project	orb_slam2/Thirdparty/g2o/g2o/types/se3_ops.hpp	/^  Vector3d project(const Vector4d& v)$/;"	f
project2d	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.cpp	/^Vector2d project2d(const Vector3d& v)  {$/;"	f	namespace:g2o
propagate	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.cpp	/^  void EstimatePropagator::propagate(OptimizableGraph::Vertex* v, $/;"	f	class:g2o::EstimatePropagator
propagate	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.cpp	/^  void EstimatePropagator::propagate(OptimizableGraph::VertexSet& vset, $/;"	f	class:g2o::EstimatePropagator
properties	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm.h	/^      const PropertyMap& properties() const { return _properties;}$/;"	f	class:g2o::OptimizationAlgorithm
property	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.h	/^      const OptimizationAlgorithmProperty& property() const { return _property;}$/;"	f	class:g2o::AbstractOptimizationAlgorithmCreator
publish_pointcloud_param_	ros/include/Node.h	/^    bool publish_pointcloud_param_;$/;"	m	class:Node
publish_pose_param_	ros/include/Node.h	/^    bool publish_pose_param_;$/;"	m	class:Node
publish_tf_param_	ros/include/Node.h	/^    bool publish_tf_param_;$/;"	m	class:Node
push	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^    virtual void push() { _backup.push(_estimate);}$/;"	f	class:g2o::BaseVertex
push	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.cpp	/^  void EstimatePropagator::PriorityQueue::push(AdjacencyMapEntry* entry)$/;"	f	class:g2o::EstimatePropagator::PriorityQueue
push	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::push()$/;"	f	class:g2o::OptimizableGraph
push	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::push(HyperGraph::VertexSet& vset)$/;"	f	class:g2o::OptimizableGraph
push	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::push()$/;"	f	class:g2o::SparseOptimizer
push	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::push(HyperGraph::VertexSet& vlist)$/;"	f	class:g2o::SparseOptimizer
push	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::push(SparseOptimizer::VertexContainer& vlist)$/;"	f	class:g2o::SparseOptimizer
pws	orb_slam2/include/PnPsolver.h	/^  double * pws, * us, * alphas, * pcs;$/;"	m	class:ORB_SLAM2::PnPsolver
qr_solve	orb_slam2/src/PnPsolver.cc	/^void PnPsolver::qr_solve(CvMat * A, CvMat * b, CvMat * X)$/;"	f	class:ORB_SLAM2::PnPsolver
queueIt	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^          PriorityQueue::iterator queueIt;$/;"	m	class:g2o::EstimatePropagator::AdjacencyMapEntry
r	orb_slam2/Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.cpp	/^  int r, c;$/;"	m	struct:g2o::MatrixElem	file:
r	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^      int r, c;$/;"	m	struct:g2o::__anon3::TripletEntry
r	orb_slam2/Thirdparty/g2o/g2o/types/sim3.h	/^    Quaterniond r;$/;"	m	struct:g2o::Sim3
rad2deg	orb_slam2/Thirdparty/g2o/g2o/stuff/misc.h	/^inline double rad2deg(double rad)$/;"	f	namespace:g2o
rank	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	/^      virtual int rank() const {return _dimension;}$/;"	f	class:g2o::BaseEdge
read	orb_slam2/Thirdparty/g2o/g2o/core/parameter_container.cpp	/^  bool ParameterContainer::read(std::istream& is, const std::map<std::string, std::string>* _renamedTypesLookup){$/;"	f	class:g2o::ParameterContainer
read	orb_slam2/Thirdparty/g2o/g2o/types/types_sba.cpp	/^  bool VertexSBAPointXYZ::read(std::istream& is)$/;"	f	class:g2o::VertexSBAPointXYZ
read	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.cpp	/^  bool EdgeInverseSim3ProjectXYZ::read(std::istream& is)$/;"	f	class:g2o::EdgeInverseSim3ProjectXYZ
read	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.cpp	/^  bool EdgeSim3::read(std::istream& is)$/;"	f	class:g2o::EdgeSim3
read	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.cpp	/^  bool EdgeSim3ProjectXYZ::read(std::istream& is)$/;"	f	class:g2o::EdgeSim3ProjectXYZ
read	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.cpp	/^  bool VertexSim3Expmap::read(std::istream& is)$/;"	f	class:g2o::VertexSim3Expmap
read	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.cpp	/^bool EdgeSE3ProjectXYZ::read(std::istream& is){$/;"	f	class:g2o::EdgeSE3ProjectXYZ
read	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.cpp	/^bool EdgeSE3ProjectXYZOnlyPose::read(std::istream& is){$/;"	f	class:g2o::EdgeSE3ProjectXYZOnlyPose
read	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.cpp	/^bool EdgeStereoSE3ProjectXYZ::read(std::istream& is){$/;"	f	class:g2o::EdgeStereoSE3ProjectXYZ
read	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.cpp	/^bool EdgeStereoSE3ProjectXYZOnlyPose::read(std::istream& is){$/;"	f	class:g2o::EdgeStereoSE3ProjectXYZOnlyPose
read	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.cpp	/^bool VertexSE3Expmap::read(std::istream& is) {$/;"	f	class:g2o::VertexSE3Expmap
readFloats	orb_slam2/Thirdparty/g2o/g2o/stuff/string_tools.h	/^OutputIterator readFloats(const char* str, OutputIterator out)$/;"	f	namespace:g2o
readInts	orb_slam2/Thirdparty/g2o/g2o/stuff/string_tools.h	/^OutputIterator readInts(const char* str, OutputIterator out)$/;"	f	namespace:g2o
readLine	orb_slam2/Thirdparty/g2o/g2o/stuff/string_tools.cpp	/^int readLine(std::istream& is, std::stringstream& currentLine)$/;"	f	namespace:g2o
refreshPropertyPtrs	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  bool DrawAction::refreshPropertyPtrs(HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::DrawAction
registerAction	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  bool HyperGraphActionLibrary::registerAction(HyperGraphElementAction* action)$/;"	f	class:g2o::HyperGraphActionLibrary
registerAction	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  bool HyperGraphElementActionCollection::registerAction(HyperGraphElementAction* action)$/;"	f	class:g2o::HyperGraphElementActionCollection
registerRobustKernel	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.cpp	/^void RobustKernelFactory::registerRobustKernel(const std::string& tag, AbstractRobustKernelCreator* c)$/;"	f	class:g2o::RobustKernelFactory
registerSolver	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.cpp	/^  void OptimizationAlgorithmFactory::registerSolver(AbstractOptimizationAlgorithmCreator* c)$/;"	f	class:g2o::OptimizationAlgorithmFactory
registerType	orb_slam2/Thirdparty/g2o/g2o/core/factory.cpp	/^void Factory::registerType(const std::string& tag, AbstractHyperGraphElementCreator* c)$/;"	f	class:g2o::Factory
relative_error	orb_slam2/src/PnPsolver.cc	/^void PnPsolver::relative_error(double & rot_err, double & transl_err,$/;"	f	class:ORB_SLAM2::PnPsolver
removeComputeErrorAction	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  bool SparseOptimizer::removeComputeErrorAction(HyperGraphAction* action)$/;"	f	class:g2o::SparseOptimizer
removeEdge	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.cpp	/^  bool HyperGraph::removeEdge(Edge* e)$/;"	f	class:g2o::HyperGraph
removePostIterationAction	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::removePostIterationAction(HyperGraphAction* action)$/;"	f	class:g2o::OptimizableGraph
removePreIterationAction	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::removePreIterationAction(HyperGraphAction* action)$/;"	f	class:g2o::OptimizableGraph
removeVertex	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.cpp	/^  bool HyperGraph::removeVertex(Vertex* v)$/;"	f	class:g2o::HyperGraph
removeVertex	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  bool SparseOptimizer::removeVertex(HyperGraph::Vertex* v)$/;"	f	class:g2o::SparseOptimizer
rendered_image_publisher_	ros/include/Node.h	/^    image_transport::Publisher rendered_image_publisher_;$/;"	m	class:Node
reprojection_error	orb_slam2/src/PnPsolver.cc	/^double PnPsolver::reprojection_error(const double R[3][3], const double t[3])$/;"	f	class:ORB_SLAM2::PnPsolver
requiresMarginalize	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_property.h	/^  bool requiresMarginalize;   \/\/\/< whether the solver requires marginalization of landmarks$/;"	m	struct:g2o::OptimizationAlgorithmProperty
reset	orb_slam2/Thirdparty/DBoW2/DUtils/Random.cpp	/^void DUtils::Random::UnrepeatedRandomizer::reset()$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
reset	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.cpp	/^  void EstimatePropagator::AdjacencyMapEntry::reset()$/;"	f	class:g2o::EstimatePropagator::AdjacencyMapEntry
reset	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.cpp	/^  void EstimatePropagator::reset()$/;"	f	class:g2o::EstimatePropagator
reset	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.cpp	/^  void HyperDijkstra::reset()$/;"	f	class:g2o::HyperDijkstra
reset_correspondences	orb_slam2/src/PnPsolver.cc	/^void PnPsolver::reset_correspondences(void)$/;"	f	class:ORB_SLAM2::PnPsolver
resize	orb_slam2/Thirdparty/g2o/g2o/core/base_binary_edge.hpp	/^void BaseBinaryEdge<D, E, VertexXiType, VertexXjType>::resize(size_t size)$/;"	f	class:BaseBinaryEdge
resize	orb_slam2/Thirdparty/g2o/g2o/core/base_multi_edge.hpp	/^void BaseMultiEdge<D, E>::resize(size_t size)$/;"	f	class:BaseMultiEdge
resize	orb_slam2/Thirdparty/g2o/g2o/core/base_unary_edge.hpp	/^void BaseUnaryEdge<D, E, VertexXiType>::resize(size_t size)$/;"	f	class:BaseUnaryEdge
resize	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.hpp	/^void BlockSolver<Traits>::resize(int* blockPoseIndices, int numPoseBlocks, $/;"	f	class:g2o::BlockSolver
resize	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.cpp	/^  void HyperGraph::Edge::resize(size_t size)$/;"	f	class:g2o::HyperGraph::Edge
resizeParameters	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        inline void resizeParameters(size_t newSize) {$/;"	f	class:g2o::OptimizableGraph::Edge
resizeVector	orb_slam2/Thirdparty/g2o/g2o/core/solver.cpp	/^void Solver::resizeVector(size_t sx)$/;"	f	class:g2o::Solver
resize_horizontal	ros/include/StereoNode.h	/^    int resize_horizontal;$/;"	m	class:StereoNode
resize_vertical	ros/include/StereoNode.h	/^    int resize_vertical;$/;"	m	class:StereoNode
resolveCache	orb_slam2/Thirdparty/g2o/g2o/core/cache.h	/^  void OptimizableGraph::Edge::resolveCache(CacheType*& cache, $/;"	f	class:g2o::OptimizableGraph::Edge
resolveCaches	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Edge::resolveCaches() {$/;"	f	class:g2o::OptimizableGraph::Edge
resolveDependancies	orb_slam2/Thirdparty/g2o/g2o/core/cache.cpp	/^  bool Cache::resolveDependancies(){$/;"	f	class:g2o::Cache
resolveParameters	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Edge::resolveParameters() {$/;"	f	class:g2o::OptimizableGraph::Edge
restoreDiagonal	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.hpp	/^void BlockSolver<Traits>::restoreDiagonal()$/;"	f	class:g2o::BlockSolver
rgb_subscriber_	ros/include/RGBDNode.h	/^    message_filters::Subscriber<sensor_msgs::Image> *rgb_subscriber_;$/;"	m	class:RGBDNode
rightMultiply	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^  void SparseBlockMatrix<MatrixType>::rightMultiply(double*& dest, const double* src) const {$/;"	f	class:g2o::SparseBlockMatrix
rightMultiply	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      void rightMultiply(double*& dest, const double* src) const$/;"	f	class:g2o::SparseBlockMatrixCCS
right_sub_	ros/include/StereoNode.h	/^    message_filters::Subscriber<sensor_msgs::Image> *right_sub_;$/;"	m	class:StereoNode
robustInformation	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	/^      InformationType robustInformation(const Eigen::Vector3d& rho)$/;"	f	class:g2o::BaseEdge
robustKernel	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        RobustKernel* robustKernel() const { return _robustKernel;}$/;"	f	class:g2o::OptimizableGraph::Edge
robustify	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.cpp	/^void RobustKernelCauchy::robustify(double e2, Eigen::Vector3d& rho) const$/;"	f	class:g2o::RobustKernelCauchy
robustify	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.cpp	/^void RobustKernelDCS::robustify(double e2, Eigen::Vector3d& rho) const$/;"	f	class:g2o::RobustKernelDCS
robustify	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.cpp	/^void RobustKernelHuber::robustify(double e, Eigen::Vector3d& rho) const$/;"	f	class:g2o::RobustKernelHuber
robustify	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.cpp	/^void RobustKernelPseudoHuber::robustify(double e2, Eigen::Vector3d& rho) const$/;"	f	class:g2o::RobustKernelPseudoHuber
robustify	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.cpp	/^void RobustKernelSaturated::robustify(double e2, Eigen::Vector3d& rho) const$/;"	f	class:g2o::RobustKernelSaturated
robustify	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.cpp	/^void RobustKernelScaleDelta::robustify(double error, Eigen::Vector3d& rho) const$/;"	f	class:g2o::RobustKernelScaleDelta
robustify	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.cpp	/^void RobustKernelTukey::robustify(double e, Eigen::Vector3d& rho) const$/;"	f	class:g2o::RobustKernelTukey
rotation	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^      inline const Quaterniond& rotation() const {return _r;}$/;"	f	class:g2o::SE3Quat
rotation	orb_slam2/Thirdparty/g2o/g2o/types/sim3.h	/^    inline Quaterniond& rotation() {return r;}$/;"	f	struct:g2o::Sim3
rotation	orb_slam2/Thirdparty/g2o/g2o/types/sim3.h	/^    inline const Quaterniond& rotation() const {return r;}$/;"	f	struct:g2o::Sim3
row	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^        int row;              \/\/\/< row of the block$/;"	m	struct:g2o::SparseBlockMatrixCCS::RowBlock
rowBaseOfBlock	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.h	/^    inline int rowBaseOfBlock(int r) const { return r ? _rowBlockIndices[r-1] : 0 ; }$/;"	f	class:g2o::SparseBlockMatrix
rowBaseOfBlock	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      int rowBaseOfBlock(int r) const { return r ? _rowBlockIndices[r-1] : 0 ; }$/;"	f	class:g2o::SparseBlockMatrixCCS
rowBaseOfBlock	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      int rowBaseOfBlock(int r) const { return r ? _rowBlockIndices[r-1] : 0 ; }$/;"	f	class:g2o::SparseBlockMatrixHashMap
rowBlockIndices	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.h	/^    const std::vector<int>& rowBlockIndices() const { return _rowBlockIndices;}$/;"	f	class:g2o::SparseBlockMatrix
rowBlockIndices	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.h	/^    std::vector<int>& rowBlockIndices() { return _rowBlockIndices;}$/;"	f	class:g2o::SparseBlockMatrix
rowBlockIndices	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      const std::vector<int>& rowBlockIndices() const { return _rowBlockIndices;}$/;"	f	class:g2o::SparseBlockMatrixCCS
rowBlockIndices	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      const std::vector<int>& rowBlockIndices() const { return _rowBlockIndices;}$/;"	f	class:g2o::SparseBlockMatrixHashMap
rows	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.h	/^    inline int rows() const {return _rowBlockIndices.size() ? _rowBlockIndices.back() : 0;}$/;"	f	class:g2o::SparseBlockMatrix
rows	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      int rows() const {return _rowBlockIndices.size() ? _rowBlockIndices.back() : 0;}$/;"	f	class:g2o::SparseBlockMatrixCCS
rows	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      int rows() const {return _rowBlockIndices.size() ? _rowBlockIndices.back() : 0;}$/;"	f	class:g2o::SparseBlockMatrixHashMap
rows	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_diagonal.h	/^      int rows() const {return _blockIndices.size() ? _blockIndices.back() : 0;}$/;"	f	class:g2o::SparseBlockMatrixDiagonal
rowsOfBlock	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.h	/^    inline int rowsOfBlock(int r) const { return r ? _rowBlockIndices[r] - _rowBlockIndices[r-1] : _rowBlockIndices[0] ; }$/;"	f	class:g2o::SparseBlockMatrix
rowsOfBlock	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      int rowsOfBlock(int r) const { return r ? _rowBlockIndices[r] - _rowBlockIndices[r-1] : _rowBlockIndices[0] ; }$/;"	f	class:g2o::SparseBlockMatrixCCS
rowsOfBlock	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      int rowsOfBlock(int r) const { return r ? _rowBlockIndices[r] - _rowBlockIndices[r-1] : _rowBlockIndices[0] ; }$/;"	f	class:g2o::SparseBlockMatrixHashMap
s	orb_slam2/Thirdparty/g2o/g2o/types/sim3.h	/^    double s;$/;"	m	struct:g2o::Sim3
save	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::save(const std::string &filename) const$/;"	f	class:DBoW2::TemplatedVocabulary
save	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::save(cv::FileStorage &f,$/;"	f	class:DBoW2::TemplatedVocabulary
save	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::save(const char* filename, int level) const$/;"	f	class:g2o::OptimizableGraph
save	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::save(ostream& os, int level) const$/;"	f	class:g2o::OptimizableGraph
save	orb_slam2/include/BoostArchiver.h	/^    void save(Archive &ar, const ::cv::Mat &m, const unsigned int file_version)$/;"	f	namespace:boost::serialization
saveEdge	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::saveEdge(std::ostream& os, OptimizableGraph::Edge* e) const$/;"	f	class:g2o::OptimizableGraph
saveHessian	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.hpp	/^bool BlockSolver<Traits>::saveHessian(const std::string& fileName) const$/;"	f	class:g2o::BlockSolver
saveM	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.cpp	/^void BowVector::saveM(const std::string &filename, size_t W) const$/;"	f	class:DBoW2::BowVector
saveSubset	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::saveSubset(ostream& os, HyperGraph::EdgeSet& eset)$/;"	f	class:g2o::OptimizableGraph
saveSubset	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::saveSubset(ostream& os, HyperGraph::VertexSet& vset, int level)$/;"	f	class:g2o::OptimizableGraph
saveToBinFile	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::saveToBinFile(const std::string &filename) const$/;"	f	class:DBoW2::TemplatedVocabulary
saveToTextFile	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::saveToTextFile(const std::string &filename) const$/;"	f	class:DBoW2::TemplatedVocabulary
saveVertex	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::saveVertex(std::ostream& os, OptimizableGraph::Vertex* v) const$/;"	f	class:g2o::OptimizableGraph
scale	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^  void SparseBlockMatrix<MatrixType>::scale(double a_) {$/;"	f	class:g2o::SparseBlockMatrix
scale	orb_slam2/Thirdparty/g2o/g2o/types/sim3.h	/^    inline const double& scale() const {return s;}$/;"	f	struct:g2o::Sim3
scale	orb_slam2/Thirdparty/g2o/g2o/types/sim3.h	/^    inline double& scale() {return s;}$/;"	f	struct:g2o::Sim3
scaleFactor	orb_slam2/include/ORBextractor.h	/^    double scaleFactor;$/;"	m	class:ORB_SLAM2::ORBextractor
scaleFactor	orb_slam2/include/Tracking.h	/^    float scaleFactor, depthMapFactor, thDepth;$/;"	m	struct:ORB_SLAM2::ORBParameters
schur	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      virtual bool schur() { return _doSchur;}$/;"	f	class:g2o::BlockSolver
score	orb_slam2/Thirdparty/DBoW2/DBoW2/ScoringObject.cpp	/^double BhattacharyyaScoring::score(const BowVector &v1, $/;"	f	class:BhattacharyyaScoring
score	orb_slam2/Thirdparty/DBoW2/DBoW2/ScoringObject.cpp	/^double ChiSquareScoring::score(const BowVector &v1, const BowVector &v2) $/;"	f	class:ChiSquareScoring
score	orb_slam2/Thirdparty/DBoW2/DBoW2/ScoringObject.cpp	/^double DotProductScoring::score(const BowVector &v1, $/;"	f	class:DotProductScoring
score	orb_slam2/Thirdparty/DBoW2/DBoW2/ScoringObject.cpp	/^double KLScoring::score(const BowVector &v1, const BowVector &v2) const$/;"	f	class:KLScoring
score	orb_slam2/Thirdparty/DBoW2/DBoW2/ScoringObject.cpp	/^double L1Scoring::score(const BowVector &v1, const BowVector &v2) const$/;"	f	class:L1Scoring
score	orb_slam2/Thirdparty/DBoW2/DBoW2/ScoringObject.cpp	/^double L2Scoring::score(const BowVector &v1, const BowVector &v2) const$/;"	f	class:L2Scoring
score	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^inline double TemplatedVocabulary<TDescriptor,F>::score$/;"	f	class:DBoW2::TemplatedVocabulary
sensor_	ros/include/Node.h	/^    ORB_SLAM2::System::eSensor sensor_;$/;"	m	class:Node
serialization	orb_slam2/include/BoostArchiver.h	/^    namespace serialization {$/;"	n	namespace:boost
serialize	orb_slam2/include/BoostArchiver.h	/^    void serialize(Archive &ar, ::cv::KeyPoint &kf, const unsigned int file_version)$/;"	f	namespace:boost::serialization
serialize	orb_slam2/include/BoostArchiver.h	/^    void serialize(Archive &ar, DBoW2::BowVector &BowVec, const unsigned int file_version)$/;"	f	namespace:boost::serialization
serialize	orb_slam2/include/BoostArchiver.h	/^    void serialize(Archive &ar, DBoW2::FeatureVector &FeatVec, const unsigned int file_version)$/;"	f	namespace:boost::serialization
serialize	orb_slam2/src/KeyFrame.cc	/^void KeyFrame::serialize(Archive &ar, const unsigned int version)$/;"	f	class:ORB_SLAM2::KeyFrame
serialize	orb_slam2/src/KeyFrameDatabase.cc	/^void KeyFrameDatabase::serialize(Archive &ar, const unsigned int version)$/;"	f	class:ORB_SLAM2::KeyFrameDatabase
serialize	orb_slam2/src/Map.cc	/^void Map::serialize(Archive &ar, const unsigned int version)$/;"	f	class:ORB_SLAM2::Map
serialize	orb_slam2/src/MapPoint.cc	/^void MapPoint::serialize(Archive &ar, const unsigned int version)$/;"	f	class:ORB_SLAM2::MapPoint
service_server_	ros/include/Node.h	/^    ros::ServiceServer service_server_;$/;"	m	class:Node
setAdditionalVectorSpace	orb_slam2/Thirdparty/g2o/g2o/core/solver.cpp	/^void Solver::setAdditionalVectorSpace(size_t s)$/;"	f	class:g2o::Solver
setAlgorithm	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::setAlgorithm(OptimizationAlgorithm* algorithm)$/;"	f	class:g2o::SparseOptimizer
setBlockOrdering	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_eigen.h	/^    void setBlockOrdering(bool blockOrdering) { _blockOrdering = blockOrdering;}$/;"	f	class:g2o::LinearSolverEigen
setCholeskyFactor	orb_slam2/Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.cpp	/^void MarginalCovarianceCholesky::setCholeskyFactor(int n, int* Lp, int* Li, double* Lx, int* permInv)$/;"	f	class:g2o::MarginalCovarianceCholesky
setColInHessian	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        void setColInHessian(int c) { _colInHessian = c;}$/;"	f	class:g2o::OptimizableGraph::Vertex
setComputeBatchStatistics	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::setComputeBatchStatistics(bool computeBatchStatistics)$/;"	f	class:g2o::SparseOptimizer
setDelta	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel.cpp	/^void RobustKernel::setDelta(double delta)$/;"	f	class:g2o::RobustKernel
setDelta	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.cpp	/^void RobustKernelHuber::setDelta(double delta)$/;"	f	class:g2o::RobustKernelHuber
setDeltaSqr	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.cpp	/^void RobustKernelHuber::setDeltaSqr(const double &delta, const double &deltaSqr)$/;"	f	class:g2o::RobustKernelHuber
setDeltaSqr	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.cpp	/^void RobustKernelTukey::setDeltaSqr(const double &deltaSqr, const double &inv)$/;"	f	class:g2o::RobustKernelTukey
setEstimate	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^    void setEstimate(const EstimateType& et) { _estimate = et; updateCache();}$/;"	f	class:g2o::BaseVertex
setEstimateData	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Vertex::setEstimateData(const double* v)$/;"	f	class:g2o::OptimizableGraph::Vertex
setEstimateData	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        bool setEstimateData(const std::vector<double>& estimate) { $/;"	f	class:g2o::OptimizableGraph::Vertex
setEstimateDataImpl	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        virtual bool setEstimateDataImpl(const double* ) { return false;}$/;"	f	class:g2o::OptimizableGraph::Vertex
setFixed	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  void OptimizableGraph::setFixed(HyperGraph::VertexSet& vset, bool fixed)$/;"	f	class:g2o::OptimizableGraph
setFixed	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        void setFixed(bool fixed) { _fixed = fixed;}$/;"	f	class:g2o::OptimizableGraph::Vertex
setForceStopFlag	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::setForceStopFlag(bool* flag)$/;"	f	class:g2o::SparseOptimizer
setGlobalStats	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.cpp	/^  void G2OBatchStatistics::setGlobalStats(G2OBatchStatistics* b)$/;"	f	class:g2o::G2OBatchStatistics
setHessianIndex	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        void setHessianIndex(int ti) { _hessianIndex = ti;}$/;"	f	class:g2o::OptimizableGraph::Vertex
setId	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.cpp	/^  void HyperGraph::Edge::setId(int id)$/;"	f	class:g2o::HyperGraph::Edge
setId	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^	  virtual void setId( int newId) { _id=newId; }$/;"	f	class:g2o::HyperGraph::Vertex
setId	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        virtual void setId(int id) {_id = id;}$/;"	f	class:g2o::OptimizableGraph::Vertex
setId	orb_slam2/Thirdparty/g2o/g2o/core/parameter.cpp	/^  void Parameter::setId(int id_)$/;"	f	class:g2o::Parameter
setInformation	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	/^      void setInformation(const InformationType& information) { _information = information;}$/;"	f	class:g2o::BaseEdge
setKernel	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_impl.cpp	/^void RobustKernelScaleDelta::setKernel(const RobustKernelPtr& ptr)$/;"	f	class:g2o::RobustKernelScaleDelta
setLambda	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.hpp	/^bool BlockSolver<Traits>::setLambda(double lambda, bool backup)$/;"	f	class:g2o::BlockSolver
setLevel	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        void setLevel(int l) { _level=l;}$/;"	f	class:g2o::OptimizableGraph::Edge
setLevenberg	orb_slam2/Thirdparty/g2o/g2o/core/solver.cpp	/^void Solver::setLevenberg(bool levenberg)$/;"	f	class:g2o::Solver
setMarginalized	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        void setMarginalized(bool marginalized) { _marginalized = marginalized;}$/;"	f	class:g2o::OptimizableGraph::Vertex
setMaxTrialsAfterFailure	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.cpp	/^  void OptimizationAlgorithmLevenberg::setMaxTrialsAfterFailure(int max_trials)$/;"	f	class:g2o::OptimizationAlgorithmLevenberg
setMeasurement	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	/^      virtual void setMeasurement(const Measurement& m) { _measurement = m;}$/;"	f	class:g2o::BaseEdge
setMeasurementData	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Edge::setMeasurementData(const double *)$/;"	f	class:g2o::OptimizableGraph::Edge
setMeasurementFromState	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Edge::setMeasurementFromState(){$/;"	f	class:g2o::OptimizableGraph::Edge
setMinimalEstimateData	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Vertex::setMinimalEstimateData(const double* v)$/;"	f	class:g2o::OptimizableGraph::Vertex
setMinimalEstimateData	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        bool setMinimalEstimateData(const std::vector<double>& estimate) {$/;"	f	class:g2o::OptimizableGraph::Vertex
setMinimalEstimateDataImpl	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        virtual bool setMinimalEstimateDataImpl(const double* ) { return false;}$/;"	f	class:g2o::OptimizableGraph::Vertex
setNext	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        void setNext(Data* next_) { _next = next_; }$/;"	f	class:g2o::OptimizableGraph::Data
setNodeWeights	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::setNodeWeights$/;"	f	class:DBoW2::TemplatedVocabulary
setOptimizer	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm.cpp	/^void OptimizationAlgorithm::setOptimizer(SparseOptimizer* optimizer)$/;"	f	class:g2o::OptimizationAlgorithm
setOptimizer	orb_slam2/Thirdparty/g2o/g2o/core/solver.cpp	/^void Solver::setOptimizer(SparseOptimizer* optimizer)$/;"	f	class:g2o::Solver
setParameterId	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Edge::setParameterId(int argNum, int paramId){$/;"	f	class:g2o::OptimizableGraph::Edge
setRenamedTypesFromString	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::setRenamedTypesFromString(const std::string& types)$/;"	f	class:g2o::OptimizableGraph
setRobustKernel	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  void OptimizableGraph::Edge::setRobustKernel(RobustKernel* ptr)$/;"	f	class:g2o::OptimizableGraph::Edge
setRotation	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^      void setRotation(const Quaterniond& r_) {_r=r_;}$/;"	f	class:g2o::SE3Quat
setSchur	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      virtual void setSchur(bool s) { _doSchur = s;}$/;"	f	class:g2o::BlockSolver
setScoringType	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::setScoringType(ScoringType type)$/;"	f	class:DBoW2::TemplatedVocabulary
setTempIndex	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        void G2O_ATTRIBUTE_DEPRECATED(setTempIndex(int ti)) { setHessianIndex(ti);}$/;"	f	class:g2o::OptimizableGraph::Vertex
setTime	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.cpp	/^void Timestamp::setTime(const string &stime){$/;"	f	class:Timestamp
setTime	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.cpp	/^void Timestamp::setTime(double s)$/;"	f	class:Timestamp
setTime	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.h	/^	inline void setTime(unsigned long secs, unsigned long usecs){$/;"	f	class:DUtils::Timestamp
setToCurrentTime	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.cpp	/^void Timestamp::setToCurrentTime(){$/;"	f	class:Timestamp
setToOrigin	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        void setToOrigin() { setToOriginImpl(); updateCache();}$/;"	f	class:g2o::OptimizableGraph::Vertex
setToOrigin	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::setToOrigin(){$/;"	f	class:g2o::SparseOptimizer
setToOriginImpl	orb_slam2/Thirdparty/g2o/g2o/types/types_sba.h	/^    virtual void setToOriginImpl() {$/;"	f	class:g2o::VertexSBAPointXYZ
setToOriginImpl	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.h	/^    virtual void setToOriginImpl() {$/;"	f	class:g2o::VertexSim3Expmap
setToOriginImpl	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^  virtual void setToOriginImpl() {$/;"	f	class:g2o::VertexSE3Expmap
setTranslation	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^      inline void setTranslation(const Vector3d& t_) {_t = t_;}$/;"	f	class:g2o::SE3Quat
setTypeName	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  void HyperGraphElementAction::setTypeName(const std::string& typeName_)$/;"	f	class:g2o::HyperGraphElementAction
setUpdateNeeded	orb_slam2/Thirdparty/g2o/g2o/core/cache.cpp	/^  void CacheContainer::setUpdateNeeded(bool needUpdate) {$/;"	f	class:g2o::CacheContainer
setUserData	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        void setUserData(Data* obs) { _userData = obs;}$/;"	f	class:g2o::OptimizableGraph::Vertex
setUserLambdaInit	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.cpp	/^  void OptimizationAlgorithmLevenberg::setUserLambdaInit(double lambda)$/;"	f	class:g2o::OptimizationAlgorithmLevenberg
setValue	orb_slam2/Thirdparty/g2o/g2o/stuff/property.h	/^      void setValue(const T& v) {_value = v; }$/;"	f	class:g2o::Property
setVerbose	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::setVerbose(bool verbose)$/;"	f	class:g2o::SparseOptimizer
setVertex	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^          void setVertex(size_t i, Vertex* v) { assert(i < _vertices.size() && "index out of bounds"); _vertices[i]=v;}$/;"	f	class:g2o::HyperGraph::Edge
setWeightingType	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::setWeightingType(WeightingType type)$/;"	f	class:DBoW2::TemplatedVocabulary
setWriteDebug	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.hpp	/^void BlockSolver<Traits>::setWriteDebug(bool writeDebug)$/;"	f	class:g2o::BlockSolver
setWriteDebug	orb_slam2/Thirdparty/g2o/g2o/core/linear_solver.h	/^    virtual void setWriteDebug(bool) {}$/;"	f	class:g2o::LinearSolver
setWriteDebug	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_with_hessian.cpp	/^  void OptimizationAlgorithmWithHessian::setWriteDebug(bool writeDebug)$/;"	f	class:g2o::OptimizationAlgorithmWithHessian
setWriteDebug	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_eigen.h	/^    virtual void setWriteDebug(bool b) { _writeDebug = b;}$/;"	f	class:g2o::LinearSolverEigen
set_maximum_number_of_correspondences	orb_slam2/src/PnPsolver.cc	/^void PnPsolver::set_maximum_number_of_correspondences(int n)$/;"	f	class:ORB_SLAM2::PnPsolver
shortestPaths	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.cpp	/^  void HyperDijkstra::shortestPaths(HyperGraph::Vertex* v, HyperDijkstra::CostFunction* cost, double maxDistance, $/;"	f	class:g2o::HyperDijkstra
shortestPaths	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.cpp	/^  void HyperDijkstra::shortestPaths(HyperGraph::VertexSet& vset, HyperDijkstra::CostFunction* cost, $/;"	f	class:g2o::HyperDijkstra
sign	orb_slam2/Thirdparty/g2o/g2o/stuff/misc.h	/^inline int sign(T x)$/;"	f	namespace:g2o
size	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^inline unsigned int TemplatedVocabulary<TDescriptor,F>::size() const$/;"	f	class:DBoW2::TemplatedVocabulary
skew	orb_slam2/Thirdparty/g2o/g2o/types/se3_ops.hpp	/^  Matrix3d skew(const Vector3d&v)$/;"	f
slice	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^  SparseBlockMatrix<MatrixType>*  SparseBlockMatrix<MatrixType>::slice(int rmin, int rmax, int cmin, int cmax, bool alloc) const {$/;"	f	class:g2o::SparseBlockMatrix
solve	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.hpp	/^bool BlockSolver<Traits>::solve(){$/;"	f	class:g2o::BlockSolver
solve	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.cpp	/^  OptimizationAlgorithm::SolverResult OptimizationAlgorithmDogleg::solve(int iteration, bool online)$/;"	f	class:g2o::OptimizationAlgorithmDogleg
solve	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_gauss_newton.cpp	/^  OptimizationAlgorithm::SolverResult OptimizationAlgorithmGaussNewton::solve(int iteration, bool online)$/;"	f	class:g2o::OptimizationAlgorithmGaussNewton
solve	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.cpp	/^  OptimizationAlgorithm::SolverResult OptimizationAlgorithmLevenberg::solve(int iteration, bool online)$/;"	f	class:g2o::OptimizationAlgorithmLevenberg
solve	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_dense.h	/^      bool solve(const SparseBlockMatrix<MatrixType>& A, double* x, double* b)$/;"	f	class:g2o::LinearSolverDense
solve	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_eigen.h	/^    bool solve(const SparseBlockMatrix<MatrixType>& A, double* x, double* b)$/;"	f	class:g2o::LinearSolverEigen
solveBlocks	orb_slam2/Thirdparty/g2o/g2o/core/linear_solver.h	/^    virtual bool solveBlocks(double**&blocks, const SparseBlockMatrix<MatrixType>& A) { (void)blocks; (void) A; return false; }$/;"	f	class:g2o::LinearSolver
solveDirect	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.hpp	/^double BaseVertex<D, T>::solveDirect(double lambda) {$/;"	f	class:BaseVertex
solvePattern	orb_slam2/Thirdparty/g2o/g2o/core/linear_solver.h	/^    virtual bool solvePattern(SparseBlockMatrix<MatrixXd>& spinv, const std::vector<std::pair<int, int> >& blockIndices, const SparseBlockMatrix<MatrixType>& A){$/;"	f	class:g2o::LinearSolver
solve_for_sign	orb_slam2/src/PnPsolver.cc	/^void PnPsolver::solve_for_sign(void)$/;"	f	class:ORB_SLAM2::PnPsolver
solver	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_with_hessian.h	/^      Solver* solver() { return _solver;}$/;"	f	class:g2o::OptimizationAlgorithmWithHessian
solver	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	/^    OptimizationAlgorithm* solver() { return _algorithm;}$/;"	f	class:g2o::SparseOptimizer
sortColumns	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h	/^      void sortColumns()$/;"	f	class:g2o::SparseBlockMatrixCCS
sortVectorContainers	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::sortVectorContainers()$/;"	f	class:g2o::SparseOptimizer
sprintf	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.cpp	28;"	d	file:
square	orb_slam2/Thirdparty/g2o/g2o/stuff/misc.h	/^inline T square(T x)$/;"	f	namespace:g2o
stackSize	orb_slam2/Thirdparty/g2o/g2o/core/base_vertex.h	/^    virtual int stackSize() const {return _backup.size();}$/;"	f	class:g2o::BaseVertex
status_gba_publisher_	ros/include/Node.h	/^    ros::Publisher status_gba_publisher_;$/;"	m	class:Node
stepType2Str	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.cpp	/^  const char* OptimizationAlgorithmDogleg::stepType2Str(int stepType)$/;"	f	class:g2o::OptimizationAlgorithmDogleg
stopRequested	orb_slam2/src/LocalMapping.cc	/^bool LocalMapping::stopRequested()$/;"	f	class:ORB_SLAM2::LocalMapping
stopWords	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^int TemplatedVocabulary<TDescriptor,F>::stopWords(double minWeight)$/;"	f	class:DBoW2::TemplatedVocabulary
strEndsWith	orb_slam2/Thirdparty/g2o/g2o/stuff/string_tools.cpp	/^bool strEndsWith(const std::string& s, const std::string& end)$/;"	f	namespace:g2o
strExpandFilename	orb_slam2/Thirdparty/g2o/g2o/stuff/string_tools.cpp	/^std::string strExpandFilename(const std::string& filename)$/;"	f	namespace:g2o
strPrintf	orb_slam2/Thirdparty/g2o/g2o/stuff/string_tools.cpp	/^int strPrintf(std::string& str, const char* fmt, ...)$/;"	f	namespace:g2o
strSplit	orb_slam2/Thirdparty/g2o/g2o/stuff/string_tools.cpp	/^std::vector<std::string> strSplit(const std::string& str, const std::string& delimiters)$/;"	f	namespace:g2o
strStartsWith	orb_slam2/Thirdparty/g2o/g2o/stuff/string_tools.cpp	/^bool strStartsWith(const std::string& s, const std::string& start)$/;"	f	namespace:g2o
strToLower	orb_slam2/Thirdparty/g2o/g2o/stuff/string_tools.cpp	/^std::string strToLower(const std::string& s)$/;"	f	namespace:g2o
strToUpper	orb_slam2/Thirdparty/g2o/g2o/stuff/string_tools.cpp	/^std::string strToUpper(const std::string& s)$/;"	f	namespace:g2o
stringToType	orb_slam2/Thirdparty/g2o/g2o/stuff/string_tools.h	/^T stringToType(const std::string& s, bool failIfLeftoverChars = true)$/;"	f	namespace:g2o
supportsSchur	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      virtual bool supportsSchur() {return true;}$/;"	f	class:g2o::BlockSolver
supportsSchur	orb_slam2/Thirdparty/g2o/g2o/core/solver.h	/^      virtual bool supportsSchur() {return false;}$/;"	f	class:g2o::Solver
symmPermutation	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^  bool SparseBlockMatrix<MatrixType>::symmPermutation(SparseBlockMatrix<MatrixType>*& dest, const int* pinv, bool  upperTriangle) const{$/;"	f	class:g2o::SparseBlockMatrix
sync_	ros/include/RGBDNode.h	/^    message_filters::Synchronizer<sync_pol> *sync_;$/;"	m	class:RGBDNode
sync_	ros/include/StereoNode.h	/^    message_filters::Synchronizer<sync_pol> *sync_;$/;"	m	class:StereoNode
sync_pol	ros/include/RGBDNode.h	/^    typedef message_filters::sync_policies::ApproximateTime<sensor_msgs::Image, sensor_msgs::Image> sync_pol;$/;"	t	class:RGBDNode
sync_pol	ros/include/StereoNode.h	/^    typedef message_filters::sync_policies::ApproximateTime<sensor_msgs::Image, sensor_msgs::Image> sync_pol;$/;"	t	class:StereoNode
t	orb_slam2/Thirdparty/g2o/g2o/types/sim3.h	/^    Vector3d t;$/;"	m	struct:g2o::Sim3
tOptions	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.h	/^  enum tOptions$/;"	g	class:DUtils::Timestamp
tag	orb_slam2/Thirdparty/g2o/g2o/core/factory.cpp	/^const std::string& Factory::tag(const HyperGraph::HyperGraphElement* e) const$/;"	f	class:g2o::Factory
takePatternFromHash	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^  void SparseBlockMatrix<MatrixType>::takePatternFromHash(SparseBlockMatrixHashMap<MatrixType>& hashMatrix)$/;"	f	class:g2o::SparseBlockMatrix
target_frame_id_param_	ros/include/Node.h	/^    std::string target_frame_id_param_;$/;"	m	class:Node
tempIndex	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        int G2O_ATTRIBUTE_DEPRECATED(tempIndex() const) { return hessianIndex();}$/;"	f	class:g2o::OptimizableGraph::Vertex
terminate	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	/^    bool terminate() {return _forceStopFlag ? (*_forceStopFlag) : false; }$/;"	f	class:g2o::SparseOptimizer
tfBuffer	ros/include/Node.h	/^    boost::shared_ptr<tf2_ros::Buffer> tfBuffer;$/;"	m	class:Node
tfListener	ros/include/Node.h	/^    boost::shared_ptr<tf2_ros::TransformListener> tfListener;$/;"	m	class:Node
thDepth	orb_slam2/include/Tracking.h	/^    float scaleFactor, depthMapFactor, thDepth;$/;"	m	struct:ORB_SLAM2::ORBParameters
timeIteration	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	/^    double timeIteration;             \/\/\/< total time;$/;"	m	struct:g2o::G2OBatchStatistics
timeLinearSolution	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	/^    double timeLinearSolution;        \/\/\/< total time for solving Ax=b (including detup for schur)$/;"	m	struct:g2o::G2OBatchStatistics
timeLinearSolver	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	/^    double timeLinearSolver;          \/\/\/< time for solving, excluding Schur setup$/;"	m	struct:g2o::G2OBatchStatistics
timeLinearize	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	/^    double timeLinearize;             \/\/\/< jacobians$/;"	m	struct:g2o::G2OBatchStatistics
timeMarginals	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	/^    double timeMarginals;             \/\/\/< computing the inverse elements (solve blocks) and thus the marginal covariances$/;"	m	struct:g2o::G2OBatchStatistics
timeNumericDecomposition	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	/^    double timeNumericDecomposition;  \/\/\/< numeric decomposition  (0 if not done)$/;"	m	struct:g2o::G2OBatchStatistics
timeQuadraticForm	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	/^    double timeQuadraticForm;         \/\/\/< construct the quadratic form in the graph$/;"	m	struct:g2o::G2OBatchStatistics
timeResiduals	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	/^    double timeResiduals;             \/\/\/< residuals$/;"	m	struct:g2o::G2OBatchStatistics
timeSchurComplement	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	/^    double timeSchurComplement;      \/\/\/< compute schur complement (0 if not done)$/;"	m	struct:g2o::G2OBatchStatistics
timeSymbolicDecomposition	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	/^    double timeSymbolicDecomposition; \/\/\/< symbolic decomposition (0 if not done)$/;"	m	struct:g2o::G2OBatchStatistics
timeUpdate	orb_slam2/Thirdparty/g2o/g2o/core/batch_stats.h	/^    double timeUpdate;                \/\/\/< time to apply the update$/;"	m	struct:g2o::G2OBatchStatistics
timeval	orb_slam2/Thirdparty/g2o/g2o/stuff/timeutil.h	/^typedef struct timeval {$/;"	s	namespace:g2o
timeval	orb_slam2/Thirdparty/g2o/g2o/stuff/timeutil.h	/^} timeval;$/;"	t	namespace:g2o	typeref:struct:g2o::timeval
timezone	orb_slam2/Thirdparty/g2o/g2o/stuff/timeutil.cpp	/^struct timezone$/;"	s	namespace:g2o	file:
toArray8U	orb_slam2/Thirdparty/DBoW2/DBoW2/FORB.cpp	/^void FORB::toArray8U(const TDescriptor &descriptors, unsigned char * array)$/;"	f	class:DBoW2::FORB
toCvMat	orb_slam2/src/Converter.cc	/^cv::Mat Converter::toCvMat(const Eigen::Matrix3d &m)$/;"	f	class:ORB_SLAM2::Converter
toCvMat	orb_slam2/src/Converter.cc	/^cv::Mat Converter::toCvMat(const Eigen::Matrix<double,3,1> &m)$/;"	f	class:ORB_SLAM2::Converter
toCvMat	orb_slam2/src/Converter.cc	/^cv::Mat Converter::toCvMat(const Eigen::Matrix<double,4,4> &m)$/;"	f	class:ORB_SLAM2::Converter
toCvMat	orb_slam2/src/Converter.cc	/^cv::Mat Converter::toCvMat(const g2o::SE3Quat &SE3)$/;"	f	class:ORB_SLAM2::Converter
toCvMat	orb_slam2/src/Converter.cc	/^cv::Mat Converter::toCvMat(const g2o::Sim3 &Sim3)$/;"	f	class:ORB_SLAM2::Converter
toCvSE3	orb_slam2/src/Converter.cc	/^cv::Mat Converter::toCvSE3(const Eigen::Matrix<double,3,3> &R, const Eigen::Matrix<double,3,1> &t)$/;"	f	class:ORB_SLAM2::Converter
toDescriptorVector	orb_slam2/src/Converter.cc	/^std::vector<cv::Mat> Converter::toDescriptorVector(const cv::Mat &Descriptors)$/;"	f	class:ORB_SLAM2::Converter
toMat32F	orb_slam2/Thirdparty/DBoW2/DBoW2/FORB.cpp	/^void FORB::toMat32F(const std::vector<TDescriptor> &descriptors,$/;"	f	class:DBoW2::FORB
toMat8U	orb_slam2/Thirdparty/DBoW2/DBoW2/FORB.cpp	/^void FORB::toMat8U(const std::vector<TDescriptor> &descriptors,$/;"	f	class:DBoW2::FORB
toMatrix3d	orb_slam2/src/Converter.cc	/^Eigen::Matrix<double,3,3> Converter::toMatrix3d(const cv::Mat &cvMat3)$/;"	f	class:ORB_SLAM2::Converter
toMinimalVector	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^      inline Vector6d toMinimalVector() const{$/;"	f	class:g2o::SE3Quat
toQuaternion	orb_slam2/src/Converter.cc	/^std::vector<float> Converter::toQuaternion(const cv::Mat &M)$/;"	f	class:ORB_SLAM2::Converter
toSE3Quat	orb_slam2/src/Converter.cc	/^g2o::SE3Quat Converter::toSE3Quat(const cv::Mat &cvT)$/;"	f	class:ORB_SLAM2::Converter
toString	orb_slam2/Thirdparty/DBoW2/DBoW2/FORB.cpp	/^std::string FORB::toString(const FORB::TDescriptor &a)$/;"	f	class:DBoW2::FORB
toString	orb_slam2/Thirdparty/g2o/g2o/stuff/property.h	/^      virtual std::string toString() const$/;"	f	class:g2o::Property
toVector	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^      inline Vector7d toVector() const{$/;"	f	class:g2o::SE3Quat
toVector3d	orb_slam2/src/Converter.cc	/^Eigen::Matrix<double,3,1> Converter::toVector3d(const cv::Mat &cvVector)$/;"	f	class:ORB_SLAM2::Converter
toVector3d	orb_slam2/src/Converter.cc	/^Eigen::Matrix<double,3,1> Converter::toVector3d(const cv::Point3f &cvPoint)$/;"	f	class:ORB_SLAM2::Converter
to_homogeneous_matrix	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^      Matrix<double,4,4> to_homogeneous_matrix() const$/;"	f	class:g2o::SE3Quat
transform	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^WordId TemplatedVocabulary<TDescriptor, F>::transform$/;"	f	class:DBoW2::TemplatedVocabulary
transform	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::transform$/;"	f	class:DBoW2::TemplatedVocabulary
transform	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::transform($/;"	f	class:DBoW2::TemplatedVocabulary
transform	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::transform(const TDescriptor &feature,$/;"	f	class:DBoW2::TemplatedVocabulary
translation	orb_slam2/Thirdparty/g2o/g2o/types/se3quat.h	/^      inline const Vector3d& translation() const {return _t;}$/;"	f	class:g2o::SE3Quat
translation	orb_slam2/Thirdparty/g2o/g2o/types/sim3.h	/^    inline Vector3d& translation() {return t;}$/;"	f	struct:g2o::Sim3
translation	orb_slam2/Thirdparty/g2o/g2o/types/sim3.h	/^    inline const Vector3d& translation() const {return t;}$/;"	f	struct:g2o::Sim3
transpose	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^  bool SparseBlockMatrix<MatrixType>::transpose(SparseBlockMatrix<MatrixTransposedType>*& dest) const {$/;"	f	class:g2o::SparseBlockMatrix
transposed	orb_slam2/Thirdparty/g2o/g2o/core/base_multi_edge.h	/^        bool transposed;          \/\/\/< the block has to be transposed$/;"	m	struct:g2o::BaseMultiEdge::HessianHelper
trim	orb_slam2/Thirdparty/g2o/g2o/stuff/string_tools.cpp	/^std::string trim(const std::string& s)$/;"	f	namespace:g2o
trimLeft	orb_slam2/Thirdparty/g2o/g2o/stuff/string_tools.cpp	/^std::string trimLeft(const std::string& s)$/;"	f	namespace:g2o
trimRight	orb_slam2/Thirdparty/g2o/g2o/stuff/string_tools.cpp	/^std::string trimRight(const std::string& s)$/;"	f	namespace:g2o
trustRegion	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.h	/^      double trustRegion() const { return _delta;}$/;"	f	class:g2o::OptimizationAlgorithmDogleg
tv_sec	orb_slam2/Thirdparty/g2o/g2o/stuff/timeutil.h	/^  long tv_sec;$/;"	m	struct:g2o::timeval
tv_usec	orb_slam2/Thirdparty/g2o/g2o/stuff/timeutil.h	/^  long tv_usec;$/;"	m	struct:g2o::timeval
type	orb_slam2/Thirdparty/g2o/g2o/core/cache.h	/^          const std::string& type() const { return _type;}$/;"	f	class:g2o::Cache::CacheKey
type	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_property.h	/^  std::string type;           \/\/\/< type of solver, e.g., "CSparse Cholesky", "PCG"$/;"	m	struct:g2o::OptimizationAlgorithmProperty
typeName	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^      const std::string& typeName() const { return _typeName;}$/;"	f	class:g2o::HyperGraphElementAction
types_six_dof_expmap	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h	/^namespace types_six_dof_expmap {$/;"	n	namespace:g2o
tz_dsttime	orb_slam2/Thirdparty/g2o/g2o/stuff/timeutil.cpp	/^  int  tz_dsttime;     \/* type of dst correction *\/$/;"	m	struct:g2o::timezone	file:
tz_minuteswest	orb_slam2/Thirdparty/g2o/g2o/stuff/timeutil.cpp	/^  int  tz_minuteswest; \/* minutes W of Greenwich *\/$/;"	m	struct:g2o::timezone	file:
uc	orb_slam2/include/PnPsolver.h	/^  double uc, vc, fu, fv;$/;"	m	class:ORB_SLAM2::PnPsolver
umax	orb_slam2/include/ORBextractor.h	/^    std::vector<int> umax;$/;"	m	class:ORB_SLAM2::ORBextractor
unlock	orb_slam2/Thirdparty/g2o/g2o/core/openmp_mutex.h	/^      void unlock() { omp_unset_lock(&_lock); }$/;"	f	class:g2o::OpenMPMutex
unlockQuadraticForm	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        void unlockQuadraticForm() { _quadraticFormMutex.unlock();}$/;"	f	class:g2o::OptimizableGraph::Vertex
unproject	orb_slam2/Thirdparty/g2o/g2o/types/se3_ops.hpp	/^  Vector3d unproject(const Vector2d& v)$/;"	f
unproject	orb_slam2/Thirdparty/g2o/g2o/types/se3_ops.hpp	/^  Vector4d unproject(const Vector3d& v)$/;"	f
unproject2d	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.cpp	/^Vector3d unproject2d(const Vector2d& v)  {$/;"	f	namespace:g2o
unregisterAction	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  bool HyperGraphActionLibrary::unregisterAction(HyperGraphElementAction* action)$/;"	f	class:g2o::HyperGraphActionLibrary
unregisterAction	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  bool HyperGraphElementActionCollection::unregisterAction(HyperGraphElementAction* action)$/;"	f	class:g2o::HyperGraphElementActionCollection
unregisterSolver	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.cpp	/^  void OptimizationAlgorithmFactory::unregisterSolver(AbstractOptimizationAlgorithmCreator* c)$/;"	f	class:g2o::OptimizationAlgorithmFactory
unregisterType	orb_slam2/Thirdparty/g2o/g2o/core/factory.cpp	/^  void Factory::unregisterType(const std::string& tag)$/;"	f	class:g2o::Factory
unregisterType	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.cpp	/^void RobustKernelFactory::unregisterType(const std::string& tag)$/;"	f	class:g2o::RobustKernelFactory
update	orb_slam2/Thirdparty/g2o/g2o/core/cache.cpp	/^  void Cache::update(){$/;"	f	class:g2o::Cache
update	orb_slam2/Thirdparty/g2o/g2o/core/cache.cpp	/^  void CacheContainer::update() {$/;"	f	class:g2o::CacheContainer
update	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::update(const double* update)$/;"	f	class:g2o::SparseOptimizer
updateCache	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  void OptimizableGraph::Vertex::updateCache(){$/;"	f	class:g2o::OptimizableGraph::Vertex
updateInitialization	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  bool SparseOptimizer::updateInitialization(HyperGraph::VertexSet& vset, HyperGraph::EdgeSet& eset)$/;"	f	class:g2o::SparseOptimizer
updateLinearSystem	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_with_hessian.cpp	/^  void OptimizationAlgorithmWithHessian::updateLinearSystem()$/;"	f	class:g2o::OptimizationAlgorithmWithHessian
updateMapFromString	orb_slam2/Thirdparty/g2o/g2o/stuff/property.cpp	/^  bool PropertyMap::updateMapFromString(const std::string& values)$/;"	f	class:g2o::PropertyMap
updatePropertiesFromString	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm.cpp	/^bool OptimizationAlgorithm::updatePropertiesFromString(const std::string& propString)$/;"	f	class:g2o::OptimizationAlgorithm
updatePropertyFromString	orb_slam2/Thirdparty/g2o/g2o/stuff/property.cpp	/^  bool PropertyMap::updatePropertyFromString(const std::string& name, const std::string& value)$/;"	f	class:g2o::PropertyMap
updateSize	orb_slam2/Thirdparty/g2o/g2o/core/jacobian_workspace.cpp	/^void JacobianWorkspace::updateSize(const HyperGraph::Edge* e_)$/;"	f	class:g2o::JacobianWorkspace
updateSize	orb_slam2/Thirdparty/g2o/g2o/core/jacobian_workspace.cpp	/^void JacobianWorkspace::updateSize(const OptimizableGraph& graph)$/;"	f	class:g2o::JacobianWorkspace
updateSize	orb_slam2/Thirdparty/g2o/g2o/core/jacobian_workspace.cpp	/^void JacobianWorkspace::updateSize(int numVertices, int dimension)$/;"	f	class:g2o::JacobianWorkspace
updateStructure	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.hpp	/^bool BlockSolver<Traits>::updateStructure(const std::vector<HyperGraph::Vertex*>& vset, const HyperGraph::EdgeSet& edges)$/;"	f	class:g2o::BlockSolver
updateStructure	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_with_hessian.cpp	/^  bool OptimizationAlgorithmWithHessian::updateStructure(const std::vector<HyperGraph::Vertex*>& vset, const HyperGraph::EdgeSet& edges)$/;"	f	class:g2o::OptimizationAlgorithmWithHessian
us	orb_slam2/include/PnPsolver.h	/^  double * pws, * us, * alphas, * pcs;$/;"	m	class:ORB_SLAM2::PnPsolver
userData	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        Data* userData() { return _userData; }$/;"	f	class:g2o::OptimizableGraph::Vertex
userData	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^        const Data* userData() const { return _userData; }$/;"	f	class:g2o::OptimizableGraph::Vertex
userLambdaInit	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.h	/^      double userLambdaInit() {return _userLambdaInit->value();}$/;"	f	class:g2o::OptimizationAlgorithmLevenberg
vKeys	orb_slam2/include/ORBextractor.h	/^    std::vector<cv::KeyPoint> vKeys;$/;"	m	class:ORB_SLAM2::ExtractorNode
value	orb_slam2/Thirdparty/g2o/g2o/stuff/property.h	/^      const T& value() const {return _value;}$/;"	f	class:g2o::Property
vasprintf	orb_slam2/Thirdparty/g2o/g2o/stuff/os_specific.c	/^int vasprintf(char** strp, const char* fmt, va_list ap)$/;"	f
vc	orb_slam2/include/PnPsolver.h	/^  double uc, vc, fu, fv;$/;"	m	class:ORB_SLAM2::PnPsolver
vectorSize	orb_slam2/Thirdparty/g2o/g2o/core/solver.h	/^      size_t vectorSize() const { return _xSize;}$/;"	f	class:g2o::Solver
verbose	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.h	/^    bool verbose()  const {return _verbose;}$/;"	f	class:g2o::SparseOptimizer
verifyInformationMatrices	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::verifyInformationMatrices(bool verbose) const$/;"	f	class:g2o::OptimizableGraph
vertex	orb_slam2/Thirdparty/g2o/g2o/core/cache.cpp	/^  OptimizableGraph::Vertex* Cache::vertex() { $/;"	f	class:g2o::Cache
vertex	orb_slam2/Thirdparty/g2o/g2o/core/cache.cpp	/^  OptimizableGraph::Vertex* CacheContainer::vertex() {$/;"	f	class:g2o::CacheContainer
vertex	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.cpp	/^  HyperGraph::Vertex* HyperGraph::vertex(int id)$/;"	f	class:g2o::HyperGraph
vertex	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.cpp	/^  const HyperGraph::Vertex* HyperGraph::vertex(int id) const$/;"	f	class:g2o::HyperGraph
vertex	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^          Vertex* vertex(size_t i) { assert(i < _vertices.size() && "index out of bounds"); return _vertices[i];}$/;"	f	class:g2o::HyperGraph::Edge
vertex	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^          const Vertex* vertex(size_t i) const { assert(i < _vertices.size() && "index out of bounds"); return _vertices[i];}$/;"	f	class:g2o::HyperGraph::Edge
vertex	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^    inline Vertex* vertex(int id) { return reinterpret_cast<Vertex*>(HyperGraph::vertex(id));}$/;"	f	struct:g2o::OptimizableGraph
vertex	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.h	/^    inline const Vertex* vertex (int id) const{ return reinterpret_cast<const Vertex*>(HyperGraph::vertex(id));}$/;"	f	struct:g2o::OptimizableGraph
vertices	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^          VertexContainer& vertices() { return _vertices;}$/;"	f	class:g2o::HyperGraph::Edge
vertices	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^          const VertexContainer& vertices() const { return _vertices;}$/;"	f	class:g2o::HyperGraph::Edge
vertices	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^      VertexIDMap& vertices() {return _vertices;}$/;"	f	class:g2o::HyperGraph
vertices	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^      const VertexIDMap& vertices() const {return _vertices;}$/;"	f	class:g2o::HyperGraph
visitAdjacencyMap	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.cpp	/^  void HyperDijkstra::visitAdjacencyMap(AdjacencyMap& amap, TreeAction* action, bool useDistance)$/;"	f	class:g2o::HyperDijkstra
visited	orb_slam2/Thirdparty/g2o/g2o/core/estimate_propagator.h	/^      OptimizableGraph::VertexSet& visited() {return _visited; }$/;"	f	class:g2o::EstimatePropagator
visited	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.h	/^    HyperGraph::VertexSet& visited() {return _visited; }$/;"	f	struct:g2o::HyperDijkstra
voc_file_name_param_	ros/include/Node.h	/^    std::string voc_file_name_param_;$/;"	m	class:Node
weight	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^    WordValue weight;$/;"	m	struct:DBoW2::TemplatedVocabulary::Node
weightComp	orb_slam2/include/KeyFrame.h	/^    static bool weightComp( int a, int b){$/;"	f	class:ORB_SLAM2::KeyFrame
word_id	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^    WordId word_id;$/;"	m	struct:DBoW2::TemplatedVocabulary::Node
workspaceForVertex	orb_slam2/Thirdparty/g2o/g2o/core/jacobian_workspace.h	/^      double* workspaceForVertex(int vertexIndex)$/;"	f	class:g2o::JacobianWorkspace
wrap	orb_slam2/Thirdparty/g2o/g2o/stuff/misc.h	/^inline T wrap(T l, T x, T u) $/;"	f	namespace:g2o
write	orb_slam2/Thirdparty/g2o/g2o/core/matrix_structure.cpp	/^bool MatrixStructure::write(const char* filename) const$/;"	f	class:g2o::MatrixStructure
write	orb_slam2/Thirdparty/g2o/g2o/core/parameter_container.cpp	/^  bool ParameterContainer::write(std::ostream& os) const{$/;"	f	class:g2o::ParameterContainer
write	orb_slam2/Thirdparty/g2o/g2o/types/types_sba.cpp	/^  bool VertexSBAPointXYZ::write(std::ostream& os) const$/;"	f	class:g2o::VertexSBAPointXYZ
write	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.cpp	/^  bool EdgeInverseSim3ProjectXYZ::write(std::ostream& os) const$/;"	f	class:g2o::EdgeInverseSim3ProjectXYZ
write	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.cpp	/^  bool EdgeSim3::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSim3
write	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.cpp	/^  bool EdgeSim3ProjectXYZ::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSim3ProjectXYZ
write	orb_slam2/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.cpp	/^  bool VertexSim3Expmap::write(std::ostream& os) const$/;"	f	class:g2o::VertexSim3Expmap
write	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.cpp	/^bool EdgeSE3ProjectXYZ::write(std::ostream& os) const {$/;"	f	class:g2o::EdgeSE3ProjectXYZ
write	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.cpp	/^bool EdgeSE3ProjectXYZOnlyPose::write(std::ostream& os) const {$/;"	f	class:g2o::EdgeSE3ProjectXYZOnlyPose
write	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.cpp	/^bool EdgeStereoSE3ProjectXYZ::write(std::ostream& os) const {$/;"	f	class:g2o::EdgeStereoSE3ProjectXYZ
write	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.cpp	/^bool EdgeStereoSE3ProjectXYZOnlyPose::write(std::ostream& os) const {$/;"	f	class:g2o::EdgeStereoSE3ProjectXYZOnlyPose
write	orb_slam2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.cpp	/^bool VertexSE3Expmap::write(std::ostream& os) const {$/;"	f	class:g2o::VertexSE3Expmap
writeDebug	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      virtual bool writeDebug() const {return _linearSolver->writeDebug();}$/;"	f	class:g2o::BlockSolver
writeDebug	orb_slam2/Thirdparty/g2o/g2o/core/linear_solver.h	/^    virtual bool writeDebug() const { return false;}$/;"	f	class:g2o::LinearSolver
writeDebug	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_with_hessian.h	/^      virtual bool writeDebug() const { return _writeDebug->value();}$/;"	f	class:g2o::OptimizationAlgorithmWithHessian
writeDebug	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_eigen.h	/^    virtual bool writeDebug() const { return _writeDebug;}$/;"	f	class:g2o::LinearSolverEigen
writeOctave	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^  bool SparseBlockMatrix<MatrixType>::writeOctave(const char* filename, bool upperTriangle) const$/;"	f	class:g2o::SparseBlockMatrix
writeToCSV	orb_slam2/Thirdparty/g2o/g2o/stuff/property.cpp	/^  void PropertyMap::writeToCSV(std::ostream& os) const$/;"	f	class:g2o::PropertyMap
x	orb_slam2/Thirdparty/g2o/g2o/core/solver.h	/^      const double* x() const { return _x;}$/;"	f	class:g2o::Solver
x	orb_slam2/Thirdparty/g2o/g2o/core/solver.h	/^      double* x() { return _x;}$/;"	f	class:g2o::Solver
x	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^      double x;$/;"	m	struct:g2o::__anon3::TripletEntry
~AbstractHyperGraphElementCreator	orb_slam2/Thirdparty/g2o/g2o/core/creators.h	/^      virtual ~AbstractHyperGraphElementCreator() { }$/;"	f	class:g2o::AbstractHyperGraphElementCreator
~AbstractOptimizationAlgorithmCreator	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.h	/^      virtual ~AbstractOptimizationAlgorithmCreator() { }$/;"	f	class:g2o::AbstractOptimizationAlgorithmCreator
~AbstractRobustKernelCreator	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.h	/^      virtual ~AbstractRobustKernelCreator() { }$/;"	f	class:g2o::AbstractRobustKernelCreator
~BaseEdge	orb_slam2/Thirdparty/g2o/g2o/core/base_edge.h	/^      virtual ~BaseEdge() {}$/;"	f	class:g2o::BaseEdge
~BaseProperty	orb_slam2/Thirdparty/g2o/g2o/stuff/property.cpp	/^  BaseProperty::~BaseProperty(){}$/;"	f	class:g2o::BaseProperty
~BlockSolver	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.hpp	/^BlockSolver<Traits>::~BlockSolver()$/;"	f	class:g2o::BlockSolver
~BlockSolverBase	orb_slam2/Thirdparty/g2o/g2o/core/block_solver.h	/^      virtual ~BlockSolverBase() {}$/;"	f	class:g2o::BlockSolverBase
~BowVector	orb_slam2/Thirdparty/DBoW2/DBoW2/BowVector.cpp	/^BowVector::~BowVector(void)$/;"	f	class:DBoW2::BowVector
~CacheContainer	orb_slam2/Thirdparty/g2o/g2o/core/cache.cpp	/^  CacheContainer::~CacheContainer(){$/;"	f	class:g2o::CacheContainer
~CostFunction	orb_slam2/Thirdparty/g2o/g2o/core/hyper_dijkstra.h	/^      virtual ~CostFunction() { }$/;"	f	struct:g2o::HyperDijkstra::CostFunction
~CreatorInformation	orb_slam2/Thirdparty/g2o/g2o/core/factory.h	/^          ~CreatorInformation()$/;"	f	class:g2o::Factory::CreatorInformation
~Data	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::Data::~Data(){$/;"	f	class:g2o::OptimizableGraph::Data
~Edge	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.cpp	/^  HyperGraph::Edge::~Edge()$/;"	f	class:g2o::HyperGraph::Edge
~Edge	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::Edge::~Edge()$/;"	f	class:g2o::OptimizableGraph::Edge
~Factory	orb_slam2/Thirdparty/g2o/g2o/core/factory.cpp	/^Factory::~Factory()$/;"	f	class:g2o::Factory
~FeatureVector	orb_slam2/Thirdparty/DBoW2/DBoW2/FeatureVector.cpp	/^FeatureVector::~FeatureVector(void)$/;"	f	class:DBoW2::FeatureVector
~GeneralScoring	orb_slam2/Thirdparty/DBoW2/DBoW2/ScoringObject.h	/^  virtual ~GeneralScoring() {} \/\/!< Required for virtual base classes$/;"	f	class:DBoW2::GeneralScoring
~HyperGraph	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.cpp	/^  HyperGraph::~HyperGraph()$/;"	f	class:g2o::HyperGraph
~HyperGraphAction	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  HyperGraphAction::~HyperGraphAction()$/;"	f	class:g2o::HyperGraphAction
~HyperGraphActionLibrary	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  HyperGraphActionLibrary::~HyperGraphActionLibrary()$/;"	f	class:g2o::HyperGraphActionLibrary
~HyperGraphElement	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.h	/^        virtual ~HyperGraphElement() {}$/;"	f	struct:g2o::HyperGraph::HyperGraphElement
~HyperGraphElementAction	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementAction::~HyperGraphElementAction()$/;"	f	class:g2o::HyperGraphElementAction
~HyperGraphElementActionCollection	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementActionCollection::~HyperGraphElementActionCollection()$/;"	f	class:g2o::HyperGraphElementActionCollection
~JacobianWorkspace	orb_slam2/Thirdparty/g2o/g2o/core/jacobian_workspace.cpp	/^JacobianWorkspace::~JacobianWorkspace()$/;"	f	class:g2o::JacobianWorkspace
~LinearSolver	orb_slam2/Thirdparty/g2o/g2o/core/linear_solver.h	/^    virtual ~LinearSolver() {}$/;"	f	class:g2o::LinearSolver
~LinearSolverCCS	orb_slam2/Thirdparty/g2o/g2o/core/linear_solver.h	/^    ~LinearSolverCCS()$/;"	f	class:g2o::LinearSolverCCS
~LinearSolverDense	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_dense.h	/^      virtual ~LinearSolverDense()$/;"	f	class:g2o::LinearSolverDense
~LinearSolverEigen	orb_slam2/Thirdparty/g2o/g2o/solvers/linear_solver_eigen.h	/^    virtual ~LinearSolverEigen()$/;"	f	class:g2o::LinearSolverEigen
~MarginalCovarianceCholesky	orb_slam2/Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.cpp	/^MarginalCovarianceCholesky::~MarginalCovarianceCholesky()$/;"	f	class:g2o::MarginalCovarianceCholesky
~MatrixStructure	orb_slam2/Thirdparty/g2o/g2o/core/matrix_structure.cpp	/^MatrixStructure::~MatrixStructure()$/;"	f	class:g2o::MatrixStructure
~MonoNode	ros/src/MonoNode.cc	/^MonoNode::~MonoNode () {$/;"	f	class:MonoNode
~Node	ros/src/Node.cc	/^Node::~Node () {$/;"	f	class:Node
~ORBextractor	orb_slam2/include/ORBextractor.h	/^    ~ORBextractor(){}$/;"	f	class:ORB_SLAM2::ORBextractor
~OpenMPMutex	orb_slam2/Thirdparty/g2o/g2o/core/openmp_mutex.h	/^      ~OpenMPMutex() { omp_destroy_lock(&_lock); }$/;"	f	class:g2o::OpenMPMutex
~OptimizableGraph	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::~OptimizableGraph()$/;"	f	class:g2o::OptimizableGraph
~OptimizationAlgorithm	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm.cpp	/^OptimizationAlgorithm::~OptimizationAlgorithm()$/;"	f	class:g2o::OptimizationAlgorithm
~OptimizationAlgorithmDogleg	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.cpp	/^  OptimizationAlgorithmDogleg::~OptimizationAlgorithmDogleg()$/;"	f	class:g2o::OptimizationAlgorithmDogleg
~OptimizationAlgorithmFactory	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.cpp	/^  OptimizationAlgorithmFactory::~OptimizationAlgorithmFactory()$/;"	f	class:g2o::OptimizationAlgorithmFactory
~OptimizationAlgorithmGaussNewton	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_gauss_newton.cpp	/^  OptimizationAlgorithmGaussNewton::~OptimizationAlgorithmGaussNewton()$/;"	f	class:g2o::OptimizationAlgorithmGaussNewton
~OptimizationAlgorithmLevenberg	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.cpp	/^  OptimizationAlgorithmLevenberg::~OptimizationAlgorithmLevenberg()$/;"	f	class:g2o::OptimizationAlgorithmLevenberg
~OptimizationAlgorithmWithHessian	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_with_hessian.cpp	/^  OptimizationAlgorithmWithHessian::~OptimizationAlgorithmWithHessian()$/;"	f	class:g2o::OptimizationAlgorithmWithHessian
~Parameter	orb_slam2/Thirdparty/g2o/g2o/core/parameter.h	/^        virtual ~Parameter() {};$/;"	f	class:g2o::Parameter
~ParameterContainer	orb_slam2/Thirdparty/g2o/g2o/core/parameter_container.cpp	/^  ParameterContainer::~ParameterContainer(){$/;"	f	class:g2o::ParameterContainer
~Parameters	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  HyperGraphAction::Parameters::~Parameters()$/;"	f	class:g2o::HyperGraphAction::Parameters
~Parameters	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementAction::Parameters::~Parameters()$/;"	f	class:g2o::HyperGraphElementAction::Parameters
~PnPsolver	orb_slam2/src/PnPsolver.cc	/^PnPsolver::~PnPsolver()$/;"	f	class:ORB_SLAM2::PnPsolver
~PropertyMap	orb_slam2/Thirdparty/g2o/g2o/stuff/property.cpp	/^  PropertyMap::~PropertyMap() {$/;"	f	class:g2o::PropertyMap
~RGBDNode	ros/src/RGBDNode.cc	/^RGBDNode::~RGBDNode () {$/;"	f	class:RGBDNode
~RegisterActionProxy	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph_action.h	/^        ~RegisterActionProxy()$/;"	f	class:g2o::RegisterActionProxy
~RegisterOptimizationAlgorithmProxy	orb_slam2/Thirdparty/g2o/g2o/core/optimization_algorithm_factory.h	/^      ~RegisterOptimizationAlgorithmProxy()$/;"	f	class:g2o::RegisterOptimizationAlgorithmProxy
~RegisterRobustKernelProxy	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.h	/^      ~RegisterRobustKernelProxy()$/;"	f	class:g2o::RegisterRobustKernelProxy
~RegisterTypeProxy	orb_slam2/Thirdparty/g2o/g2o/core/factory.h	/^      ~RegisterTypeProxy()$/;"	f	class:g2o::RegisterTypeProxy
~RobustKernel	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel.h	/^      virtual ~RobustKernel() {}$/;"	f	class:g2o::RobustKernel
~RobustKernelFactory	orb_slam2/Thirdparty/g2o/g2o/core/robust_kernel_factory.cpp	/^RobustKernelFactory::~RobustKernelFactory()$/;"	f	class:g2o::RobustKernelFactory
~ScopeTime	orb_slam2/Thirdparty/g2o/g2o/stuff/timeutil.cpp	/^ScopeTime::~ScopeTime() {$/;"	f	class:g2o::ScopeTime
~ScopedOpenMPMutex	orb_slam2/Thirdparty/g2o/g2o/core/openmp_mutex.h	/^      ~ScopedOpenMPMutex() { _mutex->unlock(); }$/;"	f	class:g2o::ScopedOpenMPMutex
~Solver	orb_slam2/Thirdparty/g2o/g2o/core/solver.cpp	/^Solver::~Solver()$/;"	f	class:g2o::Solver
~SparseBlockMatrix	orb_slam2/Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp	/^  SparseBlockMatrix<MatrixType>::~SparseBlockMatrix(){$/;"	f	class:g2o::SparseBlockMatrix
~SparseOptimizer	orb_slam2/Thirdparty/g2o/g2o/core/sparse_optimizer.cpp	/^  SparseOptimizer::~SparseOptimizer(){$/;"	f	class:g2o::SparseOptimizer
~StereoNode	ros/src/StereoNode.cc	/^StereoNode::~StereoNode () {$/;"	f	class:StereoNode
~TemplatedVocabulary	orb_slam2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h	/^TemplatedVocabulary<TDescriptor,F>::~TemplatedVocabulary()$/;"	f	class:DBoW2::TemplatedVocabulary
~Timestamp	orb_slam2/Thirdparty/DBoW2/DUtils/Timestamp.cpp	/^Timestamp::~Timestamp(void)$/;"	f	class:Timestamp
~UnrepeatedRandomizer	orb_slam2/Thirdparty/DBoW2/DUtils/Random.h	/^  ~UnrepeatedRandomizer(){}$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
~Vertex	orb_slam2/Thirdparty/g2o/g2o/core/hyper_graph.cpp	/^  HyperGraph::Vertex::~Vertex()$/;"	f	class:g2o::HyperGraph::Vertex
~Vertex	orb_slam2/Thirdparty/g2o/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::Vertex::~Vertex()$/;"	f	class:g2o::OptimizableGraph::Vertex
